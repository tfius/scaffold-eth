{
  "31337": {
    "localhost": {
      "name": "localhost",
      "chainId": "31337",
      "contracts": {
        "SwarmMail": {
          "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "types",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "emailSwarmLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "swarmThreadLocation",
                  "type": "bytes32"
                }
              ],
              "name": "addThread",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "blackListAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "createThread",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "fundsBalance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "fundsTransfer",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "types",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "length",
                  "type": "uint256"
                }
              ],
              "name": "getEmailRange",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "isEncryption",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "time",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "from",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "swarmLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bool",
                      "name": "signed",
                      "type": "bool"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "threads",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct SwarmMail.Email[]",
                  "name": "messages",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "locker",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "lockerLocation",
                  "type": "bytes32"
                }
              ],
              "name": "getLockerShares",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "withAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "keyLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bool",
                      "name": "revoked",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct SwarmMail.Share[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getPublicKeys",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "registered",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "pubKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "keyLocation",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32[]",
                  "name": "locations",
                  "type": "bytes32[]"
                }
              ],
              "name": "getThreads",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "isEncryption",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "time",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "from",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "swarmLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bool",
                      "name": "signed",
                      "type": "bool"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "threads",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct SwarmMail.Email[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getUserStats",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "numInboxItems",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numSentItems",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numLockers",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numSharedLockers",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numOneWayItems",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numThreads",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "length",
                  "type": "uint256"
                }
              ],
              "name": "getUserThreadsRange",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "isEncryption",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "time",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "from",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "swarmLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bool",
                      "name": "signed",
                      "type": "bool"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "threads",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct SwarmMail.Email[]",
                  "name": "",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "",
                  "type": "bytes32[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "pubKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "keyLocation",
                  "type": "bytes32"
                }
              ],
              "name": "register",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "release",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "types",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "locations",
                  "type": "bytes32[]"
                }
              ],
              "name": "removeEmails",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "idx",
                  "type": "uint256"
                }
              ],
              "name": "removeUserThread",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "reset_registration",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isEncryption",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "sendEmail",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isEncryption",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "sendOneWayEmail",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "lockerLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "keyLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "withAddress",
                  "type": "address"
                }
              ],
              "name": "shareLockerWith",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "in_types",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sender_types",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "signEmail",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "storeLocker",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "lockerLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "keyLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "withAddress",
                  "type": "address"
                }
              ],
              "name": "unshareLockerWith",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ]
        },
        "DataHub": {
          "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ROLE_REPORTER",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "fdpBuyerNameHash",
                  "type": "bytes32"
                }
              ],
              "name": "bidSub",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "active",
                  "type": "bool"
                }
              ],
              "name": "enableSub",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "feesCollected",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "fundsBalance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "fundsTransfer",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getActiveBidAt",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "requestHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "served",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataHub.ActiveBid",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getActiveBids",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "requestHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "served",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataHub.ActiveBid[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "requestHash",
                  "type": "bytes32"
                }
              ],
              "name": "getActiveBidsByHash",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "requestHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "served",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataHub.ActiveBid",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getAllSubItems",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "unlockKeyLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "validTill",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct DataHub.SubItem[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "nameHash",
                  "type": "bytes32"
                }
              ],
              "name": "getAllSubItemsForNameHash",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "unlockKeyLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "validTill",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct DataHub.SubItem[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "category",
                  "type": "bytes32"
                }
              ],
              "name": "getCategory",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint64[]",
                      "name": "subIdxs",
                      "type": "uint64[]"
                    }
                  ],
                  "internalType": "struct DataHub.Category",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_fee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "getFee",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getListedSubs",
              "outputs": [
                {
                  "internalType": "bytes32[]",
                  "name": "",
                  "type": "bytes32[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "nameHash",
                  "type": "bytes32"
                }
              ],
              "name": "getNameHashSubItems",
              "outputs": [
                {
                  "internalType": "bytes32[]",
                  "name": "",
                  "type": "bytes32[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getPortableAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                }
              ],
              "name": "getSubBy",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "fdpSellerNameHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "swarmLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "price",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "active",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "earned",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "bids",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "sells",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "reports",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint16",
                      "name": "daysValid",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct DataHub.Sub",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getSubByIndex",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "fdpSellerNameHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "swarmLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "price",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "active",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "earned",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "bids",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "sells",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "reports",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint16",
                      "name": "daysValid",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct DataHub.Sub",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "forAddress",
                  "type": "address"
                }
              ],
              "name": "getSubInfoBalance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getSubItemAt",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "unlockKeyLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "validTill",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct DataHub.SubItem",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "length",
                  "type": "uint256"
                }
              ],
              "name": "getSubItems",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "unlockKeyLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "validTill",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct DataHub.SubItem[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint256",
                  "name": "last",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getSubRequestAt",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "fdpBuyerNameHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "requestHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "served",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataHub.SubRequest",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "requestHash",
                  "type": "bytes32"
                }
              ],
              "name": "getSubRequestByHash",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "fdpBuyerNameHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "requestHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "served",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataHub.SubRequest",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getSubRequests",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "fdpBuyerNameHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "requestHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "served",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataHub.SubRequest[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                }
              ],
              "name": "getSubSubscribers",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "",
                  "type": "address[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getSubs",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "fdpSellerNameHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "swarmLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "price",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "active",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "earned",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "bids",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "sells",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "reports",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint16",
                      "name": "daysValid",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct DataHub.Sub[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getUserStats",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "numSubRequests",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numSubItems",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numActiveBids",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numListedSubs",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "inEscrow",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "fdpSellerNameHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "dataSwarmLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "category",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "podAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint16",
                  "name": "daysValid",
                  "type": "uint16"
                }
              ],
              "name": "listSub",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "marketFee",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minListingFee",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "release",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "requestHash",
                  "type": "bytes32"
                }
              ],
              "name": "removeUserActiveBid",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                }
              ],
              "name": "reportSub",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "requestHash",
                  "type": "bytes32"
                }
              ],
              "name": "requestAgain",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "requestHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "encryptedKeyLocation",
                  "type": "bytes32"
                }
              ],
              "name": "sellSub",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "newFee",
                  "type": "uint256"
                }
              ],
              "name": "setFee",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "newListingFee",
                  "type": "uint256"
                }
              ],
              "name": "setListingFee",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "setPortableAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "name": "subscriptionIds",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "subscriptions",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "fdpSellerNameHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "seller",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "swarmLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "active",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "earned",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "bids",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "sells",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "reports",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "daysValid",
                  "type": "uint16"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ]
        },
        "Calendar": {
          "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "_swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "addEvent",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "_swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "addEventForAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "_swarmLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "address[]",
                  "name": "_participants",
                  "type": "address[]"
                }
              ],
              "name": "addInvite",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "allow",
                  "type": "bool"
                }
              ],
              "name": "allowAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_index",
                  "type": "uint64"
                }
              ],
              "name": "confirmInvite",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                }
              ],
              "name": "getEventsByDate",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Calendar.Event[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64[]",
                  "name": "_dates",
                  "type": "uint64[]"
                }
              ],
              "name": "getEventsByDates",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Calendar.Event[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                }
              ],
              "name": "getFreeSlot",
              "outputs": [
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                }
              ],
              "name": "getInvitesByDate",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "creator",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "date",
                      "type": "uint64"
                    },
                    {
                      "internalType": "address[]",
                      "name": "participants",
                      "type": "address[]"
                    },
                    {
                      "internalType": "address[]",
                      "name": "accepted",
                      "type": "address[]"
                    }
                  ],
                  "internalType": "struct Calendar.Invite[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64[]",
                  "name": "_dates",
                  "type": "uint64[]"
                }
              ],
              "name": "getInvitesByDates",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "creator",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "date",
                      "type": "uint64"
                    },
                    {
                      "internalType": "address[]",
                      "name": "participants",
                      "type": "address[]"
                    },
                    {
                      "internalType": "address[]",
                      "name": "accepted",
                      "type": "address[]"
                    }
                  ],
                  "internalType": "struct Calendar.Invite[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                }
              ],
              "name": "isOwnerAvailable",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_index",
                  "type": "uint64"
                }
              ],
              "name": "removeEventByIndex",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_index",
                  "type": "uint64"
                }
              ],
              "name": "removeInviteByIndex",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_newTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_newDuration",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "_swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "updateEventsByDate",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Calendar.Event",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        },
        "Scheduler": {
          "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "feesCollected",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "fundsBalance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "fundsTransfer",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                }
              ],
              "name": "getEventsByDate",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "sender",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Scheduler.Event[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64[]",
                  "name": "_dates",
                  "type": "uint64[]"
                }
              ],
              "name": "getEventsByDates",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "sender",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Scheduler.Event[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "getFee",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                }
              ],
              "name": "getFreeSlot",
              "outputs": [
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                }
              ],
              "name": "getPriceForEvent",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "getUser",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "isAway",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint64",
                      "name": "startTime",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "endTime",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Scheduler.User",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                }
              ],
              "name": "isOwnerAvailable",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "release",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_index",
                  "type": "uint64"
                }
              ],
              "name": "removeEventByIndex",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "_swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "scheduleEvent",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "schedulerFee",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bool",
                  "name": "_away",
                  "type": "bool"
                }
              ],
              "name": "setAway",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "allow",
                  "type": "bool"
                }
              ],
              "name": "setBlockAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "newFee",
                  "type": "uint256"
                }
              ],
              "name": "setFee",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_paymentPerS",
                  "type": "uint256"
                }
              ],
              "name": "setPayment",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_startTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_endTime",
                  "type": "uint64"
                }
              ],
              "name": "setStartEndTime",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ]
        }
      }
    }
  },
  "5": {
    "goerli": {
      "name": "localhost",
      "chainId": "31337",
      "SwarmMail": {
        "address": "0x32C144cf950E1f3Fa3b96049c10C39995076BCd6",
        "abi": [
          {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "indexed": true,
                "internalType": "bytes32",
                "name": "previousAdminRole",
                "type": "bytes32"
              },
              {
                "indexed": true,
                "internalType": "bytes32",
                "name": "newAdminRole",
                "type": "bytes32"
              }
            ],
            "name": "RoleAdminChanged",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "account",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "RoleGranted",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "account",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "RoleRevoked",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "DEFAULT_ADMIN_ROLE",
            "outputs": [
              {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "types",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "emailSwarmLocation",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "swarmThreadLocation",
                "type": "bytes32"
              }
            ],
            "name": "addThread",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "blackListAddress",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "swarmLocation",
                "type": "bytes32"
              }
            ],
            "name": "createThread",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "fundsBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "fundsTransfer",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "types",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "start",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "length",
                "type": "uint256"
              }
            ],
            "name": "getEmailRange",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bool",
                    "name": "isEncryption",
                    "type": "bool"
                  },
                  {
                    "internalType": "uint256",
                    "name": "time",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "swarmLocation",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bool",
                    "name": "signed",
                    "type": "bool"
                  },
                  {
                    "internalType": "bytes32[]",
                    "name": "threads",
                    "type": "bytes32[]"
                  }
                ],
                "internalType": "struct SwarmMail.Email[]",
                "name": "messages",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "locker",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "lockerLocation",
                "type": "bytes32"
              }
            ],
            "name": "getLockerShares",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "withAddress",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "keyLocation",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bool",
                    "name": "revoked",
                    "type": "bool"
                  }
                ],
                "internalType": "struct SwarmMail.Share[]",
                "name": "",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "getPublicKeys",
            "outputs": [
              {
                "internalType": "bool",
                "name": "registered",
                "type": "bool"
              },
              {
                "internalType": "bytes32",
                "name": "pubKey",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "keyLocation",
                "type": "bytes32"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              }
            ],
            "name": "getRoleAdmin",
            "outputs": [
              {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32[]",
                "name": "locations",
                "type": "bytes32[]"
              }
            ],
            "name": "getThreads",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bool",
                    "name": "isEncryption",
                    "type": "bool"
                  },
                  {
                    "internalType": "uint256",
                    "name": "time",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "swarmLocation",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bool",
                    "name": "signed",
                    "type": "bool"
                  },
                  {
                    "internalType": "bytes32[]",
                    "name": "threads",
                    "type": "bytes32[]"
                  }
                ],
                "internalType": "struct SwarmMail.Email[]",
                "name": "",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "getUserStats",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "numInboxItems",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "numSentItems",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "numLockers",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "numSharedLockers",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "numOneWayItems",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "numThreads",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "start",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "length",
                "type": "uint256"
              }
            ],
            "name": "getUserThreadsRange",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bool",
                    "name": "isEncryption",
                    "type": "bool"
                  },
                  {
                    "internalType": "uint256",
                    "name": "time",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "swarmLocation",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bool",
                    "name": "signed",
                    "type": "bool"
                  },
                  {
                    "internalType": "bytes32[]",
                    "name": "threads",
                    "type": "bytes32[]"
                  }
                ],
                "internalType": "struct SwarmMail.Email[]",
                "name": "",
                "type": "tuple[]"
              },
              {
                "internalType": "bytes32[]",
                "name": "",
                "type": "bytes32[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "grantRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "hasRole",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "pubKey",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "keyLocation",
                "type": "bytes32"
              }
            ],
            "name": "register",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "release",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint32",
                "name": "types",
                "type": "uint32"
              },
              {
                "internalType": "bytes32[]",
                "name": "locations",
                "type": "bytes32[]"
              }
            ],
            "name": "removeEmails",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "idx",
                "type": "uint256"
              }
            ],
            "name": "removeUserThread",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "renounceRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "revokeRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "toAddress",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "isEncryption",
                "type": "bool"
              },
              {
                "internalType": "bytes32",
                "name": "swarmLocation",
                "type": "bytes32"
              }
            ],
            "name": "sendEmail",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "toAddress",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "isEncryption",
                "type": "bool"
              },
              {
                "internalType": "bytes32",
                "name": "swarmLocation",
                "type": "bytes32"
              }
            ],
            "name": "sendOneWayEmail",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "lockerLocation",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "keyLocation",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "withAddress",
                "type": "address"
              }
            ],
            "name": "shareLockerWith",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "in_types",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "sender_types",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "swarmLocation",
                "type": "bytes32"
              }
            ],
            "name": "signEmail",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "swarmLocation",
                "type": "bytes32"
              }
            ],
            "name": "storeLocker",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes4",
                "name": "interfaceId",
                "type": "bytes4"
              }
            ],
            "name": "supportsInterface",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "lockerLocation",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "keyLocation",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "withAddress",
                "type": "address"
              }
            ],
            "name": "unshareLockerWith",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "stateMutability": "payable",
            "type": "receive"
          }
        ],
        "transactionHash": "0x4b50db71ec56f37875c11edd20a520e6edd285ed8ff44be7badc737cedaf5949",
        "receipt": {
          "to": null,
          "from": "0xd27ffA0e47Fca8D3E757B4d2C408169859B8c419",
          "contractAddress": "0x32C144cf950E1f3Fa3b96049c10C39995076BCd6",
          "transactionIndex": 66,
          "gasUsed": "3300461",
          "logsBloom": "0x
          "blockHash": "0x978d3167ecdeeaf27f29b7baeb52b777df54d8caebb4142289ff771e9aa9065c",
          "transactionHash": "0x4b50db71ec56f37875c11edd20a520e6edd285ed8ff44be7badc737cedaf5949",
          "logs": [
            {
              "transactionIndex": 66,
              "blockNumber": 8785696,
              "transactionHash": "0x4b50db71ec56f37875c11edd20a520e6edd285ed8ff44be7badc737cedaf5949",
              "address": "0x32C144cf950E1f3Fa3b96049c10C39995076BCd6",
              "topics": [
                "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                "0x000000000000000000000000d27ffa0e47fca8d3e757b4d2c408169859b8c419"
              ],
              "data": "0x",
              "logIndex": 117,
              "blockHash": "0x978d3167ecdeeaf27f29b7baeb52b777df54d8caebb4142289ff771e9aa9065c"
            }
          ],
          "blockNumber": 8785696,
          "cumulativeGasUsed": "15104378",
          "status": 1,
          "byzantium": true
        },
        "args": [],
        "numDeployments": 4,
        "solcInputHash": "df349cd8237980cf046c4877ed60d9b3",
        "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"emailSwarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmThreadLocation\",\"type\":\"bytes32\"}],\"name\":\"addThread\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"blackListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"createThread\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getEmailRange\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEncryption\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"threads\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SwarmMail.Email[]\",\"name\":\"messages\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"lockerLocation\",\"type\":\"bytes32\"}],\"name\":\"getLockerShares\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"withAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct SwarmMail.Share[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPublicKeys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"pubKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keyLocation\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"locations\",\"type\":\"bytes32[]\"}],\"name\":\"getThreads\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEncryption\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"threads\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SwarmMail.Email[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numInboxItems\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSentItems\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLockers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSharedLockers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOneWayItems\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numThreads\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getUserThreadsRange\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEncryption\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"threads\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SwarmMail.Email[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pubKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keyLocation\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"types\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"locations\",\"type\":\"bytes32[]\"}],\"name\":\"removeEmails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"removeUserThread\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEncryption\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"sendEmail\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEncryption\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"sendOneWayEmail\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"lockerLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"withAddress\",\"type\":\"address\"}],\"name\":\"shareLockerWith\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"in_types\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sender_types\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"signEmail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"storeLocker\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"lockerLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"withAddress\",\"type\":\"address\"}],\"name\":\"unshareLockerWith\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwarmMail.sol\":\"SwarmMail\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SwarmMail.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n// import \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n//import \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/*\\nuint32\\t\\t10\\t\\t4,294,967,295\\nuint40\\t\\t13\\t\\t1,099,511,627,775\\nuint48\\t\\t15\\t\\t281,474,976,710,655\\nuint56\\t\\t17\\t\\t72,057,594,037,927,935\\nuint64\\t\\t20\\t\\t18,446,744,073,709,551,615\\nuint72\\t\\t22\\t\\t4,722,366,482,869,645,213,695\\nuint80\\t\\t25\\t\\t1,208,925,819,614,629,174,706,175\\nuint88\\t\\t27\\t\\t309,485,009,821,345,068,724,781,055\\nuint96\\t\\t29\\t\\t79,228,162,514,264,337,593,543,950,335\\n*/\\n\\n\\ncontract SwarmMail is Ownable, AccessControl /*, ReentrancyGuard*/ {\\n    struct Share {\\n        address withAddress;\\n        bytes32 keyLocation;\\n        bool    revoked;\\n    }\\n    /*struct Thread {\\n        bytes32  threadHash;\\n        Email[]  emails;\\n    }*/\\n    struct Email {\\n        bool      isEncryption;\\n        uint256   time;\\n        address   from;\\n        address   to;\\n        bytes32   swarmLocation;\\n        bool      signed;\\n        bytes32[] threads; // hashes to threads\\n    }\\n    /*\\n    // subscription request\\n    struct SubRequest {\\n        bytes32 fdpBuyerNameHash;\\n        address buyer;\\n        bytes32 subHash; //which subscription;\\n        bytes32 requestHash; // this is needed when\\n    }\\n    // active Bid\\n    struct ActiveBid {\\n        address seller;\\n        bytes32 requestHash;\\n    }\\n    // subscription items\\n    struct SubItem {\\n        bytes32 subHash;  // what subscription you are entitled to\\n        bytes32 unlockKeyLocation; // where is your key\\n        uint256 validTill; // until it is valid \\n    }*/\\n    struct User {\\n        bytes32 pubKey;\\n        bytes32 keyLocation;\\n        // PublicKey pubkey;\\n        Email[] inboxEmails;\\n        mapping(bytes32 => uint256) inboxEmailIds;\\n        Email[] sentEmails;\\n        mapping(bytes32 => uint256) sentEmailIds;\\n\\n        Email[] oneWayEmails;\\n        mapping(bytes32 => uint256) oneWayEmailIds;\\n\\n        Email[] lockerEmails;\\n        mapping(bytes32 => uint256) lockerEmailIds;\\n        \\n        mapping(bytes32 => Share[]) shares;\\n        mapping(bytes32 => mapping(address => uint256)) shareIds;\\n\\n        Email[] sharedLockerEmails;\\n        mapping(bytes32 => uint256) sharedLockerEmailIds;\\n\\n        //Email[] private threadEmails;\\n        bytes32[] threads;\\n        //mapping(bytes32 => uint256) threadEmailIds;\\n\\n        // // who wants to subscribe to what\\n        // SubRequest[] subRequests;\\n        // mapping(bytes32 => uint256) subRequestIds;\\n        // // what is user subscribed to\\n        // SubItem[] subItems;\\n        // mapping(bytes32 => uint256) subItemIds;\\n\\n        // ActiveBid[] activeBids;\\n        // mapping(bytes32 => uint256) activeBidIds;\\n\\n        // bytes32[] listedSubs; // everything user listed \\n\\n        //address[] contacts;\\n        //mapping(address => uint256) contactsIds;\\n    }\\n\\n    Email[] private Threads;\\n    mapping(bytes32 => uint256) threadHashIds;\\n\\n    mapping(address => User) private users;\\n    // mapping of blacklisted addresses (for spam)\\n    mapping(address => mapping(address => bool)) private blackList;\\n    //mapping(address => address)\\n    // mapping(address => address) userToPortable;\\n\\n    // to do add checkers for blacklisted addresses\\n    function blackListAddress(address addr) public {\\n        blackList[msg.sender][addr] = true;\\n    }\\n \\n    constructor() {\\n    }\\n\\n    receive() external payable {}\\n\\n    modifier isRegistered() { \\n        require(users[msg.sender].pubKey != bytes32(0), \\\"User not registred\\\");\\n        _;\\n    }\\n\\n    function getPublicKeys(address addr) public view returns (bool registered, bytes32 pubKey, bytes32 keyLocation/*, address portable*/) {\\n        registered = users[addr].pubKey != bytes32(0) ;\\n        pubKey = users[addr].pubKey;\\n        keyLocation = users[addr].keyLocation;\\n        //portable = userToPortable[addr];\\n    } \\n    function getUserStats(address addr) public view returns (uint numInboxItems, uint numSentItems, uint numLockers, uint numSharedLockers, uint numOneWayItems, uint numThreads /* uint numSubRequests, uint numSubItems, uint numActiveBids */) {\\n        numInboxItems = users[addr].inboxEmails.length;\\n        numSentItems  = users[addr].sentEmails.length;\\n        numLockers = users[addr].lockerEmails.length;\\n        numSharedLockers = users[addr].sharedLockerEmails.length;\\n        numOneWayItems = users[addr].oneWayEmails.length;\\n        numThreads = users[addr].threads.length;\\n    }\\n    function register(bytes32 pubKey, bytes32 keyLocation) public {\\n        User storage user = users[msg.sender];\\n        require(user.pubKey == bytes32(0), \\\"Already registered\\\");\\n        user.pubKey = pubKey;\\n        user.keyLocation = keyLocation;\\n        //userToPortable[msg.sender] = portable;\\n    }\\n    \\n\\n    /*\\n    function setPortableAddress(address addr) public {\\n        userToPortable[msg.sender] = addr;\\n    }\\n    function getPortableAddress(address addr) public view returns (address) {\\n        return userToPortable[addr];\\n    }\\n    */    \\n\\n    /*\\n    function getInboxCount(address addr) public view returns (uint) {\\n        return users[addr].inboxEmails.length;\\n    }\\n    function getSentCount(address addr) public view returns (uint) {\\n        return users[addr].sentEmails.length;\\n    }\\n    */\\n    /*function getInboxAt(address addr, uint index) public view returns (Email memory) {\\n        return users[addr].inboxEmails[index];\\n    }*/\\n    /*function getSentAt(address addr, uint index) public view returns (Email memory) {\\n        return users[addr].sentEmails[index];\\n    }*/\\n\\n\\n    /*\\n    function getInbox(address addr) public view returns (Email[] memory) {\\n        return users[addr].inboxEmails;\\n    }\\n    function getSent(address addr) public view returns (Email[] memory) {\\n        return users[addr].sentEmails;\\n    } */\\n\\n    /*    \\n    function getActiveSubItemsCount(address addr, uint start) public view returns (uint) {\\n        uint count = 0;\\t\\n        for (uint i = start; i < users[addr].subItems.length; i++) {\\n            if(block.timestamp <= users[addr].subItems[i].validTill) {\\n                ++count;\\n            }\\n        }\\n        return count;\\n    }*/ \\n\\n    // this will work for inbox / outbox \\n    function signEmail(uint in_types, uint sender_types, bytes32 swarmLocation) public {\\n        User storage u = users[msg.sender];\\n        Email memory e = getEmailByType(u, in_types, swarmLocation); \\n        // require(e.to == msg.sender, \\\"only receiver can sign\\\");\\n        \\n        if(e.to==msg.sender) { // receiver signs\\n            User storage sender = users[e.from]; // get sender\\n            Email storage e2 = getEmailByType(sender, sender_types, swarmLocation); \\n            e2.signed = true;\\n        }\\n        if(e.from==msg.sender) { // sender signs\\n            User storage receiver = users[e.from]; // get sender\\n            Email storage e2 = getEmailByType(receiver, sender_types, swarmLocation); \\n            e2.signed = true;\\n        }\\n    }\\n\\n    function sendEmail( address toAddress, bool isEncryption, bytes32 swarmLocation ) public payable {\\n        require(blackList[toAddress][msg.sender]==false, \\\"denied\\\");\\n\\n        User storage receiver = users[toAddress];\\n        require(!isEncryption || receiver.pubKey != bytes32(0), \\\"receiver not registered\\\");\\n        User storage sender = users[msg.sender];\\n        // create email\\n        Email memory email;\\n        email.isEncryption = isEncryption;\\n        email.time = block.timestamp;\\n        email.from = msg.sender;\\n        email.to = toAddress;\\n        email.swarmLocation = swarmLocation;\\n\\n        // add email\\n        sender.sentEmails.push(email);\\n        sender.sentEmailIds[swarmLocation] = sender.sentEmails.length;\\n        receiver.inboxEmails.push(email);\\n        receiver.inboxEmailIds[swarmLocation] = receiver.inboxEmails.length;\\n    }\\n\\n    function sendOneWayEmail( address toAddress, bool isEncryption, bytes32 swarmLocation ) public payable {\\n        require(blackList[toAddress][msg.sender]==false, \\\"denied\\\");\\n\\n        User storage receiver = users[toAddress];\\n        require(!isEncryption || receiver.pubKey != bytes32(0), \\\"receiver not registered\\\");\\n        \\n        // create email\\n        Email memory email;\\n        email.isEncryption = isEncryption;\\n        email.time = block.timestamp;\\n        email.from = msg.sender;\\n        email.to = toAddress;\\n        email.swarmLocation = swarmLocation;\\n\\n        // add email\\n        receiver.oneWayEmails.push(email);\\n        receiver.oneWayEmailIds[swarmLocation] = receiver.oneWayEmails.length;\\n    }\\n\\n    // try to do generif delete from array using ref to array and mapping \\n    function removeGenericEmail(bytes32 location, mapping(bytes32=>uint256) storage ids, Email[] storage array) private {\\n        require(ids[location] != 0, \\\"!Req\\\");\\n\\n        uint256 removeIndex = ids[location] - 1;\\n        // remove info\\n        uint256 lastIndex = array.length - 1;\\n        if (lastIndex != removeIndex) {\\n            array[removeIndex] = array[lastIndex];\\n            ids[array[lastIndex].swarmLocation] = removeIndex + 1;\\n        }\\n        array.pop();\\n        delete ids[location];\\n    }\\n\\n    function removeEmails(uint32 types, bytes32[] memory locations) public {\\n        User storage u = users[msg.sender];\\n        if(types == 0) {\\n            for (uint256 i; i < locations.length; i++) {\\n                removeGenericEmail(locations[i], u.inboxEmailIds, u.inboxEmails);\\n            }\\n        }\\n        else if(types == 1) {\\n            for (uint256 i; i < locations.length; i++) {\\n                removeGenericEmail(locations[i], u.sentEmailIds, u.sentEmails);\\n            }\\n        } \\n        else if(types == 2) {\\n            for (uint256 i; i < locations.length; i++) {\\n                removeGenericEmail(locations[i], u.lockerEmailIds, u.lockerEmails);\\n            }\\n        }\\n        else if(types == 3) {\\n            for (uint256 i; i < locations.length; i++) {\\n                removeGenericEmail(locations[i], u.oneWayEmailIds, u.oneWayEmails);\\n            }\\n        }\\n        // TODO remove threads \\n        /*else if(types == 5) {\\n            for (uint256 i; i < locations.length; i++) {\\n                removeGenericEmail(locations[i], u.threadEmailIds, u.threadEmails);\\n            }\\n        }*/\\n    }\\n\\n    function genEmailRange(uint start, uint length, Email[] memory array) private pure returns (Email[] memory) {\\n        Email[] memory emails = new Email[](length);\\n        //require(start + length <= array.length, \\\"Out of bounds\\\");\\n        uint count = 0;\\n        for(uint i = start; i < start + length; i++)\\n        {\\n            if(i<array.length)\\n            {\\n                emails[count] = array[i];\\n                ++count;\\n            }\\n        }\\n        return emails;\\n    }\\n\\n    function getEmailRange(address addr, uint types, uint start, uint length) public view returns (Email[] memory messages) {\\n        User storage u = users[addr];\\n        if(types == 0) {\\n            messages = genEmailRange(start, length, u.inboxEmails);\\n        } else if(types == 1) {\\n            messages = genEmailRange(start, length, u.sentEmails);\\n        } else if(types == 2) {\\n            messages = genEmailRange(start, length, u.lockerEmails);\\n        } else if(types == 3) {\\n            messages = genEmailRange(start, length, u.oneWayEmails);\\n        } else if(types == 4) {\\n            messages = genEmailRange(start, length, u.sharedLockerEmails);\\n        } /*else if(types == 5) {\\n            messages = genEmailRange(start, length, u.threadEmails);\\n        }*/\\n    }\\n\\n    function storeLocker(bytes32 swarmLocation) public payable {\\n        User storage sender = users[msg.sender];\\n        require(sender.lockerEmailIds[swarmLocation] == 0, \\\"!exist\\\");\\n        Email memory email;\\n        email.isEncryption = true;\\n        email.time = block.timestamp;\\n        email.from = msg.sender;\\n        email.to = msg.sender;\\n        email.swarmLocation = swarmLocation;\\n\\n        sender.lockerEmails.push(email);\\n        sender.lockerEmailIds[swarmLocation] = sender.lockerEmails.length;\\n    }\\n\\n    function shareLockerWith(bytes32 lockerLocation, bytes32 keyLocation, address withAddress) public payable {\\n        require(blackList[withAddress][msg.sender]==false, \\\"denied\\\");\\n\\n        User storage u = users[msg.sender];\\n\\n        // TODO storage fee for locker\\n        if(u.shareIds[lockerLocation][withAddress]==0) {\\n            Share memory share = Share(withAddress, keyLocation, false);\\n            u.shares[lockerLocation].push(share);\\n            u.shareIds[lockerLocation][withAddress] = u.shares[lockerLocation].length;\\n        } else {\\n            // update keyLocation\\n            Share storage sr = u.shares[lockerLocation] [u.shareIds[lockerLocation][withAddress]-1];\\n            sr.keyLocation = keyLocation;\\n        } \\n\\n        User storage u2 = users[withAddress];\\n        require(u2.sharedLockerEmailIds[keyLocation] == 0, \\\"exists\\\");\\n        Email memory email; \\n        email.isEncryption = true;\\n        email.time = block.timestamp;\\n        email.from = msg.sender;\\n        email.to = withAddress;\\n        email.swarmLocation = keyLocation;\\n        //u2.sharedLockerEmails.push(email);\\n        u2.sharedLockerEmails.push(email); // u.lockerEmails[u.lockerEmailIds[keyLocation]]);\\n        u2.sharedLockerEmailIds[keyLocation] = u2.sharedLockerEmails.length;\\n    }\\n    function unshareLockerWith(bytes32 lockerLocation, bytes32 keyLocation, address withAddress) public {\\n        User storage u = users[msg.sender];\\n        require(u.lockerEmailIds[lockerLocation] != 0, \\\"!exist\\\");\\n        require(u.shareIds[lockerLocation][withAddress] != 0, \\\"!noshare\\\");\\n        // you revoked share to withAddress\\n        u.shares[lockerLocation][u.shareIds[lockerLocation][withAddress]-1].revoked = true;\\n\\n        User storage u2 = users[withAddress];\\n        require(u2.sharedLockerEmailIds[keyLocation] != 0, \\\"!exist\\\");\\n        // needs to be owner to remove shared locker \\n        require(u2.lockerEmails[u2.lockerEmailIds[keyLocation]].from == msg.sender, \\\"!owner\\\");\\n        // u2.lockerEmails[u2.lockerEmailIds[keyLocation]].to == msg.sender\\n\\n        removeGenericEmail(keyLocation, u2.sharedLockerEmailIds, u2.sharedLockerEmails);\\n    }\\n    function getLockerShares(address locker, bytes32 lockerLocation) public view returns (Share[] memory) {\\n        return users[locker].shares[lockerLocation];\\n    }\\n    // End of Locker parts of SwarmMail contract\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    function getEmailByType(User storage u, uint types, bytes32 swarmLocation) private view returns (Email storage e) {\\n        if(types == 0) {\\n            e = u.inboxEmails[u.inboxEmailIds[swarmLocation]-1];\\n            return e;\\n        }\\n        else if(types == 1) {\\n            e = u.sentEmails[u.sentEmailIds[swarmLocation]-1];\\n            return e;\\n        } \\n        else if(types == 2) {\\n            e = u.lockerEmails[u.lockerEmailIds[swarmLocation]-1];\\n            return e;\\n        }\\n        else if(types == 3) {\\n            e = u.oneWayEmails[u.oneWayEmailIds[swarmLocation]-1];\\n            return e;\\n        }\\n        /*else if(types == 5) {\\n            return e;\\n        }*/ \\n        e = Threads[threadHashIds[swarmLocation]-1];\\n    }\\n\\n    function createThread(address to, bytes32 swarmLocation) public payable\\n    {\\n        require(blackList[to][msg.sender]==false, \\\"denied\\\");\\n\\n        Email memory email; \\n        email.isEncryption = true;\\n        email.time = block.timestamp;\\n        email.from = msg.sender;\\n        email.to = to;\\n        email.swarmLocation = swarmLocation;\\n\\n        User storage sender   = users[msg.sender];\\n        User storage receiver = users[to];\\n        \\n        bytes32 threadHash = keccak256(abi.encode(msg.sender, to, swarmLocation));\\n\\n        Threads.push(email);\\n        sender.threads.push(threadHash);\\n        receiver.threads.push(threadHash);\\n\\n        threadHashIds[threadHash] = Threads.length;\\n    }\\n\\n    function addThread(uint types, bytes32 emailSwarmLocation, address to, bytes32 swarmThreadLocation) public payable {\\n        User  storage sender = users[msg.sender];\\n        Email storage e = getEmailByType(sender, types, emailSwarmLocation);\\n        require(e.from == msg.sender || e.to == msg.sender, \\\"!owner\\\");\\n\\n        Email memory email; \\n        email.isEncryption = e.isEncryption;\\n        email.time = block.timestamp;\\n        email.from = msg.sender;\\n        email.to = to;\\n        email.swarmLocation = swarmThreadLocation;\\n\\n        Threads.push(email); \\n        bytes32 threadHash = keccak256(abi.encode(email.from, email.to, swarmThreadLocation));\\n        threadHashIds[threadHash] = Threads.length;\\n        //sender.threadEmailIds[swarmThreadLocation] = Threads.length;\\n        //sender.threadEmailIds[threadHash] = Threads.length;\\n        e.threads.push(threadHash);\\n    }\\n\\n    function getThreads(bytes32[] memory locations) public view returns (Email[] memory) {\\n        Email[] memory messages = new Email[](locations.length);\\n        for (uint256 i=0; i < locations.length; i++) {\\n            if(threadHashIds[locations[i]]!=0)\\n               messages[i] = Threads[threadHashIds[locations[i]]-1];\\n        }\\n        return messages;\\n    }\\n\\n    function getUserThreadsRange(address addr, uint start, uint length) public view returns (Email[] memory, bytes32[] memory) {\\n        Email[] memory emails = new Email[](length);\\n        bytes32[] memory locations = new bytes32[](length);\\n        uint count = 0;\\n        uint len = users[addr].threads.length;\\n        for(uint i = start; i < start + length; i++)\\n        {\\n            if(i<len)\\n            {\\n                bytes32 location = users[addr].threads[i];\\n                if(threadHashIds[location]!=0)\\n                {\\n                    emails[count] = Threads[threadHashIds[location]-1];\\n                    locations[count] = location;\\n                    ++count;\\n                }\\n            }\\n        }\\n        return (emails,locations);\\n    }\\n\\n    function removeUserThread(uint idx) public {\\n        User storage u = users[msg.sender];\\n        uint256 removeIndex = idx;\\n        // remove info\\n        uint256 lastIndex = u.threads.length - 1;\\n        if (lastIndex != removeIndex) {\\n            u.threads[removeIndex] = u.threads[lastIndex];\\n        }\\n        u.threads.pop();\\n    }\\n    /*\\n    function getUserThreads(address addr) public view returns (bytes32[] memory) {\\n        return users[addr].threads;\\n    }*/\\n    /*\\n    function getUserThreadEmails(address addr) public view returns (Email[] memory) {\\n        return getThreads(getUserThreads(addr));\\n    }*/ \\n    \\n    //uint256 public inEscrow = 0;\\n\\n\\n/*\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    uint256 private constant FEE_PRECISION = 1e5;  \\n    uint256 public marketFee = 1000; // 1%\\n    uint256 public minListingFee = 1000000 gwei; // min listing fee - 0.0001000 ETH\\n    uint256 public feesCollected = 0;\\n    uint256 public inEscrow = 0;\\n    bytes32 public constant ROLE_REPORTER = keccak256(\\\"ROLE_REPORTER\\\");\\n\\n    function getFee(uint256 _fee, uint256 amount) public pure returns (uint256) {\\n        return (amount * _fee) / FEE_PRECISION;\\n    }\\n    function setFee(uint256 newFee) public  {\\n        require(msg.sender==_owner, \\\"!\\\");\\n        marketFee = newFee; \\n    }\\n    function setListingFee(uint256 newListingFee) public  {\\n        require(msg.sender==_owner, \\\"!\\\");\\n        minListingFee = newListingFee; \\n    }      \\n\\n    struct Category {\\n        uint64[]     subIdxs;\\n    }\\n    mapping(bytes32 => Category) categories; // where is category in categories array\\n\\n    // Sub listings\\n    struct Sub {\\n        bytes32 subHash;\\n        bytes32 fdpSellerNameHash; //\\n        address seller;\\n        bytes32 swarmLocation; // metadata location\\n        uint256 price;\\n        bool    active; // is subscription active\\n        uint256 earned;  \\n        uint32  bids;\\n        uint32  sells;\\n        uint32  reports; // TODO add method to report for OWNERS\\n        uint16  daysValid;\\n    }\\n    Sub[] public  subscriptions;\\n    mapping(bytes32 => uint256) public subscriptionIds; \\n\\n    struct SubInfo {\\n        mapping(address => uint256) perSubscriberBalance; // balance per subscriber\\n        address[] subscribers; \\n    }\\n    mapping(bytes32 => SubInfo) subInfos; // where is sub in subscriptions array\\n\\n    function getSubRequestAt(address addr, uint index) public view returns (SubRequest memory) {\\n        return users[addr].subRequests[index];\\n    }\\n    function getSubItemAt(address addr, uint index) public view returns (SubItem memory) {\\n        return users[addr].subItems[index];\\n    }\\n    function getActiveBidAt(address addr, uint index) public view returns (ActiveBid memory) {\\n        return users[addr].activeBids[index];\\n    }    \\n    // todo remove \\n    function getSubItems(address addr, uint start, uint length) public view returns (SubItem[] memory items, uint last) {\\n        // either we  iterate through all items and return only those that are active\\n        // or we return all items and let the client filter them\\n        // iterate through active subItems\\n        items = new SubItem[](length);\\n        uint count = 0;\\n        last = 0; // init to 0\\n        \\n        for (uint i = start; i < users[addr].subItems.length; i++) {\\n            if(block.timestamp < users[addr].subItems[i].validTill) {\\n                if(count < length)\\n                {\\n                   items[count] = users[addr].subItems[i];\\n                   //items.push(users[addr].subItems[i]);\\n                   ++count;\\n                   last = i;\\n                } else \\n                    break;\\n            }\\n        }\\n        //return items;\\n    }\\n    function getSubItemBy(address addr, bytes32 subHash) public view returns (SubItem memory) {\\n        // check if subHash subItem is active\\n        require(block.timestamp <= users[addr].subItems[users[addr].subItemIds[subHash]-1].validTill, \\\"SubItem expired\\\");\\n        return users[addr].subItems[users[addr].subItemIds[subHash]-1];\\n    }\\n    function getAllSubItems(address addr) public view returns (SubItem[] memory) {\\n        // TODO return non active without keyLockLocation\\n        SubItem[] memory items = new SubItem[](users[addr].subItems.length);\\n        for (uint i = 0; i < users[addr].subItems.length; i++) {\\n            items[i] = users[addr].subItems[i];\\n            if(block.timestamp > items[i].validTill) {\\n                items[i].unlockKeyLocation = bytes32(0);\\n            }\\n        }\\n        return items; //users[addr].subItems;\\n    }\\n    function getListedSubs(address addr) public view returns (bytes32[] memory) {\\n        return users[addr].listedSubs;\\n    }\\n    function getActiveBids(address addr) public view returns (ActiveBid[] memory) {\\n        return users[addr].activeBids;\\n    }\\n    function getSubRequestByHash(address addr, bytes32 requestHash) public view returns (SubRequest memory) {\\n        return users[addr].subRequests[users[addr].subRequestIds[requestHash]-1];\\n    }\\n    function getSubRequests(address addr) public view returns (SubRequest[] memory) {\\n        return users[addr].subRequests;\\n    }\\n    function getSubSubscribers(bytes32 subHash) public view returns (address[] memory) {\\n        return subInfos[subHash].subscribers;\\n    }\\n    function getSubInfoBalance(bytes32 subHash, address forAddress) public view returns (uint256) {\\n        return subInfos[subHash].perSubscriberBalance[forAddress];\\n    }\\n    function getSubs() public view returns (Sub[] memory) {\\n        return subscriptions;\\n    }\\n    function getCategory(bytes32 category) public view returns (Category memory) {\\n        return categories[category];\\n    }\\n    function getSubByIndex(uint index) public view returns (Sub memory) {\\n        return subscriptions[index];\\n    }\\n    function getSubBy(bytes32 subHash) public view returns (Sub memory) {\\n        return subscriptions[subscriptionIds[subHash]-1];\\n    }\\n    function enableSub(bytes32 subHash, bool active) public {\\n        require(subscriptionIds[subHash] != 0, \\\"No Sub\\\"); // must exists\\n        Sub storage s = subscriptions[subscriptionIds[subHash] - 1]; \\n        require(s.seller == msg.sender, \\\"Not Seller\\\"); // only seller can enable subscription\\n        require(s.reports<4, \\\"Too many reports\\\"); // only seller can enable subscription\\n\\n        s.active = active;\\n    }\\n    function reportSub(bytes32 subHash) public {\\n        require(hasRole(ROLE_REPORTER, msg.sender),\\\"Not Reporter\\\");\\n        require(subscriptionIds[subHash] != 0, \\\"No Sub\\\"); // must exists\\n        Sub storage s = subscriptions[subscriptionIds[subHash] - 1]; \\n        s.reports = s.reports + 1;\\n        if(s.reports >= 3) {\\n            s.active = false;\\n        }\\n    }\\n    // Market to sell encrypted swarmLocation\\n    function listSub(bytes32 fdpSellerNameHash, bytes32 dataSwarmLocation, uint price, bytes32 category, address podAddress, uint16 daysValid) public payable {\\n        //bytes32 subHash = keccak256(abi.encode(msg.sender, fdpSeller, dataSwarmLocation, price, category, podIndex));\\n        require(msg.value>=minListingFee, \\\"minFee\\\"); // sent value must be equal to price\\n        require(daysValid>=1 && daysValid<=365, \\\"daysValid\\\"); // must not exists\\n\\n        bytes32 subHash = keccak256(abi.encode(msg.sender, fdpSellerNameHash, podAddress));// user can list same pod only once\\n        require(subscriptionIds[subHash] == 0, \\\"SubExists\\\"); // must not exists\\n\\n        Sub memory s = Sub(subHash, fdpSellerNameHash, msg.sender, dataSwarmLocation, price, true, 0, 0, 0, 0, daysValid);\\n        \\n        subscriptions.push(s);\\n        subscriptionIds[subHash] = subscriptions.length; // will point to 1 more than index\\n\\n        Category storage c = categories[category];\\n        c.subIdxs.push(uint64(subscriptions.length) - 1); // point to index\\n\\n        User storage seller = users[msg.sender];\\n        seller.listedSubs.push(subHash);\\n\\n        feesCollected+=msg.value;\\n    }\\n    function bidSub(bytes32 subHash, bytes32 fdpBuyerNameHash) public nonReentrant payable {\\n        // marketplace does not require user to be registred with smail -- TODO on front end and check \\n        // require(users[msg.sender].key != bytes32(0), \\\"Not reg\\\"); // user can not receive encrypted data\\n        require(subscriptionIds[subHash] != 0, \\\"No Sub\\\"); // must exists\\n        Sub storage s = subscriptions[subscriptionIds[subHash] - 1]; \\n\\n        require(s.active, \\\"Inactive\\\"); // must be active\\n        require(msg.value==s.price, \\\"Value!=price\\\"); // sent value must be equal to price\\n\\n        User storage seller = users[s.seller];\\n        bytes32 requestHash = keccak256(abi.encode(msg.sender, subHash, fdpBuyerNameHash)); //, block.timestamp));\\n        require(seller.subRequestIds[requestHash] == 0, \\\"Req exists\\\");\\n\\n        s.bids++;\\n\\n        SubRequest memory sr;\\n        sr.fdpBuyerNameHash = fdpBuyerNameHash;\\n        sr.buyer = msg.sender;\\n        sr.subHash = s.subHash;\\n        sr.requestHash = requestHash;\\n\\n        seller.subRequests.push(sr);\\n        seller.subRequestIds[requestHash] = seller.subRequests.length; // +1 of index\\n        \\n        inEscrow += msg.value;\\n\\n        ActiveBid memory ab;\\n        ab.requestHash = requestHash;\\n        ab.seller = msg.sender;\\n\\n        User storage buyer = users[msg.sender];\\n        buyer.activeBids.push(ab);      \\n        buyer.activeBidIds[requestHash] = buyer.activeBids.length; // +1 of index\\n    }\\n    // encryptedSecret is podReference encrypited with sharedSecret - podAddress, seller.address, buyer.address, encryptedSecret\\n    function sellSub(bytes32 requestHash, bytes32 encryptedKeyLocation) public payable {\\n        User storage seller = users[msg.sender];\\n        require(seller.subRequestIds[requestHash] != 0, \\\"No Req\\\");\\n\\n        SubRequest memory br = seller.subRequests[seller.subRequestIds[requestHash]-1];\\n        require(subscriptionIds[br.subHash] != 0, \\\"No Sub\\\"); // must exists\\n\\n        Sub storage s = subscriptions[subscriptionIds[br.subHash]-1]; \\n        require(msg.sender==s.seller, \\\"Not Sub Seller\\\"); // sent value must be equal to price\\n\\n        uint256 fee = getFee(marketFee, s.price);\\n        payable(msg.sender).transfer(s.price-fee);\\n        inEscrow -= s.price;\\n        feesCollected += fee;\\n\\n        s.sells++;\\n        s.earned += (s.price-fee);\\n\\n        User storage buyer = users[br.buyer];\\n        SubItem memory si;\\n        si.subHash = br.subHash;\\n        si.unlockKeyLocation = encryptedKeyLocation;\\n        si.validTill = block.timestamp + (s.daysValid * 86400); //(daysValid * 60*60*24) // days;\\n\\n        buyer.subItems.push(si);\\n        buyer.subItemIds[br.subHash] = buyer.subItems.length; // +1 of index (so call subHash -1)\\n\\n        if(subInfos[br.subHash].perSubscriberBalance[br.buyer]==0) // only add subscriber if not already added\\n           subInfos[br.subHash].subscribers.push(br.buyer);\\n\\n        subInfos[br.subHash].perSubscriberBalance[br.buyer] += (s.price-fee);\\n\\n        // seller removes request from his list\\n        removeSubRequest(msg.sender, requestHash); // remove from seller \\n        removeActiveBid(br.buyer, requestHash);\\n    }\\n    // removes active bids from SubRequests of seller and from Active bids of buyer\\n    function removeUserActiveBid(bytes32 requestHash) public {\\n        User storage u = users[msg.sender];\\n        require(u.activeBidIds[requestHash] != 0, \\\"!ab Req\\\");\\n        ActiveBid memory ab = u.activeBids[u.activeBidIds[requestHash]-1];\\n\\n        User storage seller = users[ab.seller];\\n        require(seller.subRequestIds[requestHash] != 0, \\\"!seller Req\\\");\\n\\n        SubRequest storage br = seller.subRequests[seller.subRequestIds[requestHash]-1];\\n        require(subscriptionIds[br.subHash] != 0, \\\"!sub\\\");\\n\\n        Sub memory s = subscriptions[subscriptionIds[br.subHash]-1];\\n        payable(msg.sender).transfer(s.price);\\n\\n        removeSubRequest(ab.seller, requestHash); // remove from seller \\n        removeActiveBid(msg.sender, requestHash);\\n    }\\n    function removeActiveBid(address user, bytes32 requestHash) private {\\n        User storage u = users[user];\\n        require(u.activeBidIds[requestHash] != 0, \\\"!ab Req\\\");\\n\\n        uint256 removeIndex = u.activeBidIds[requestHash] - 1;       \\n        uint256 lastIndex = u.activeBids.length - 1; // replace removeIndex with last item and pop last item\\n        if (lastIndex != removeIndex) {\\n            u.activeBids[removeIndex] = u.activeBids[lastIndex];\\n            u.activeBidIds[u.activeBids[removeIndex].requestHash] = removeIndex + 1;\\n        }\\n        u.activeBids.pop();\\n        delete u.activeBidIds[requestHash];\\n    }\\n    // user can remove subItem from his list if wishes to do so\\n    function removeSubItem(uint256 index) private {\\n        User storage u = users[msg.sender];\\n        require(index < u.subItems.length, \\\"!Index\\\");\\n\\n        uint256 lastIndex = u.subItems.length - 1;\\n        if (lastIndex != index) {\\n            u.subItems[index] = u.subItems[lastIndex];\\n        }\\n        u.subItems.pop();\\n    }\\n    // remove subRequest from seller needs to return money to bidder \\n    function removeSubRequest(address owner, bytes32 requestHash) private {\\n        User storage u = users[owner]; //msg.sender];\\n        require(u.subRequestIds[requestHash] != 0, \\\"!Req\\\");\\n\\n        uint256 removeIndex = u.subRequestIds[requestHash] - 1;\\n        uint256 lastIndex = u.subRequests.length - 1; // replace removeIndex with last item and pop last item\\n        if (lastIndex != removeIndex) {\\n            u.subRequests[removeIndex] = u.subRequests[lastIndex];\\n            u.subRequestIds[u.subRequests[lastIndex].requestHash] = removeIndex + 1;\\n        }\\n        u.subRequests.pop();\\n        delete u.subRequestIds[requestHash];\\n        //delete u.subRequests[lastIndex];\\n    }\\n*/\\n    function fundsBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }    \\n    function fundsTransfer() onlyOwner public payable {\\n        payable(msg.sender).transfer((address(this).balance));\\n    }\\n    function release(address token, uint amount) public virtual {\\n        SafeERC20.safeTransfer(IERC20(token), owner(), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc1e00894095a3cd907126a455bb8e5bd40d702eac669df4b0ab966e992cb6b0f\",\"license\":\"MIT\"}},\"version\":1}",
        "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000023565b62000073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613a4380620000836000396000f3fe6080604052600436106101dc5760003560e01c80636cd9fea011610102578063a217fddf11610095578063d2df294f11610064578063d2df294f14610608578063d547741f14610628578063da305b2014610648578063f2fde38b1461065b57600080fd5b8063a217fddf146105ad578063a3101d05146105c2578063b44407d9146105d5578063d2465fab146105f557600080fd5b80638da5cb5b116100d15780638da5cb5b146105325780638f138ced1461055a57806391d148541461057a5780639454932c1461059a57600080fd5b80636cd9fea0146104c9578063715018a6146104dc57806377226ccb146104f15780637d51f5f81461051f57600080fd5b806336568abe1161017a5780634e43603a116101495780634e43603a146103aa57806355e3a1d414610437578063567556a4146104645780635fcbb7d61461046c57600080fd5b806336568abe1461030b57806338b62de91461032b578063394737a21461033e5780633b0e01331461035e57600080fd5b8063248a9ca3116101b6578063248a9ca31461025f5780632e920a281461029e5780632f2ff15d146102cb5780632f926732146102eb57600080fd5b806301ffc9a7146101e85780630357371d1461021d578063140e67021461023f57600080fd5b366101e357005b600080fd5b3480156101f457600080fd5b5061020861020336600461357c565b61067b565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b5061023d610238366004613402565b6106b2565b005b34801561024b57600080fd5b5061023d61025a3660046135e0565b6106d2565b34801561026b57600080fd5b5061029061027a3660046134e4565b6000908152600160208190526040909120015490565b604051908152602001610214565b3480156102aa57600080fd5b506102be6102b9366004613495565b61084d565b60405161021491906137da565b3480156102d757600080fd5b5061023d6102e63660046134fc565b610a6d565b3480156102f757600080fd5b5061023d610306366004613527565b610a99565b34801561031757600080fd5b5061023d6103263660046134fc565b610afc565b61023d6103393660046133c4565b610b76565b34801561034a57600080fd5b5061023d61035936600461360b565b610d16565b34801561036a57600080fd5b5061023d6103793660046133aa565b3360009081526005602090815260408083206001600160a01b0394909416835292905220805460ff19166001179055565b3480156103b657600080fd5b5061040a6103c53660046133aa565b6001600160a01b031660009081526004602081905260409091206002810154918101546008820154600c8301546006840154600e909401549495929491939092909190565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610214565b34801561044357600080fd5b50610457610452366004613402565b610ebb565b604051610214919061381b565b61023d610f64565b34801561047857600080fd5b506104ac6104873660046133aa565b6001600160a01b03166000908152600460205260409020805460019091015481151592565b604080519315158452602084019290925290820152606001610214565b61023d6104d7366004613548565b610fbd565b3480156104e857600080fd5b5061023d611290565b3480156104fd57600080fd5b5061051161050c36600461342b565b6112c6565b6040516102149291906137ed565b61023d61052d366004613402565b6115a0565b34801561053e57600080fd5b506000546040516001600160a01b039091168152602001610214565b34801561056657600080fd5b5061023d6105753660046134e4565b611830565b34801561058657600080fd5b506102086105953660046134fc565b6118f8565b3480156105a657600080fd5b5047610290565b3480156105b957600080fd5b50610290600081565b61023d6105d03660046135a4565b611923565b3480156105e157600080fd5b5061023d6105f0366004613548565b611bc4565b61023d6106033660046133c4565b611db6565b34801561061457600080fd5b506102be61062336600461345d565b612030565b34801561063457600080fd5b5061023d6106433660046134fc565b612581565b61023d6106563660046134e4565b6125a8565b34801561066757600080fd5b5061023d6106763660046133aa565b6126ce565b60006001600160e01b03198216637965db0b60e01b14806106ac57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6106ce826106c86000546001600160a01b031690565b83612766565b5050565b336000908152600460205260408120906106ed8286856127b8565b6040805160e081018252825460ff90811615158252600184015460208084019190915260028501546001600160a01b03908116848601526003860154166060840152600485015460808401526005850154909116151560a083015260068401805484518184028101840190955280855292949360c0860193909283018282801561079657602002820191906000526020600020905b815481526020019060010190808311610782575b5050505050815250509050336001600160a01b031681606001516001600160a01b031614156107f8576040808201516001600160a01b031660009081526004602052908120906107e78287876127b8565b600501805460ff1916600117905550505b60408101516001600160a01b0316331415610846576040808201516001600160a01b031660009081526004602052908120906108358287876127b8565b600501805460ff1916600117905550505b5050505050565b60606000825167ffffffffffffffff81111561087957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108b257816020015b61089f6131f8565b8152602001906001900390816108975790505b50905060005b8351811015610a6657600360008583815181106108e557634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054600014610a5457600260016003600087858151811061092b57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000205461094c919061395e565b8154811061096a57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160e0810182526007909302909101805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c086019392830182828015610a1f57602002820191906000526020600020905b815481526020019060010190808311610a0b575b505050505081525050828281518110610a4857634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b80610a5e816139b8565b9150506108b8565b5092915050565b60008281526001602081905260409091200154610a8a81336128e9565b610a94838361294d565b505050565b336000908152600460205260409020805415610af15760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064015b60405180910390fd5b918255600190910155565b6001600160a01b0381163314610b6c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610ae8565b6106ce82826129b8565b6001600160a01b038316600090815260056020908152604080832033845290915290205460ff1615610bba5760405162461bcd60e51b8152600401610ae8906138b2565b6001600160a01b0383166000908152600460205260409020821580610bdf5750805415155b610c255760405162461bcd60e51b81526020600482015260176024820152761c9958d95a5d995c881b9bdd081c9959da5cdd195c9959604a1b6044820152606401610ae8565b610c2d6131f8565b831515815242602080830191825233604084019081526001600160a01b03888116606086019081526080860188815260068089018054600181810183556000928352918890208a51600790920201805491151560ff1992831617815598519189019190915594516002880180549186166001600160a01b03199283161790559251600388018054919095169316929092179092559051600485015560a0850151600585018054911515919093161790915560c08401518051859493610cf6938501920190613236565b505050600682015460009384526007909201602052506040909120555050565b33600090815260046020526040902063ffffffff8316610d8c5760005b8251811015610d8657610d74838281518110610d5f57634e487b7160e01b600052603260045260246000fd5b60200260200101518360030184600201612a1f565b80610d7e816139b8565b915050610d33565b50505050565b8263ffffffff1660011415610df15760005b8251811015610d8657610ddf838281518110610dca57634e487b7160e01b600052603260045260246000fd5b60200260200101518360050184600401612a1f565b80610de9816139b8565b915050610d9e565b8263ffffffff1660021415610e565760005b8251811015610d8657610e44838281518110610e2f57634e487b7160e01b600052603260045260246000fd5b60200260200101518360090184600801612a1f565b80610e4e816139b8565b915050610e03565b8263ffffffff1660031415610a945760005b8251811015610d8657610ea9838281518110610e9457634e487b7160e01b600052603260045260246000fd5b60200260200101518360070184600601612a1f565b80610eb3816139b8565b915050610e68565b6001600160a01b0382166000908152600460209081526040808320848452600a018252808320805482518185028101850190935280835260609492939192909184015b82821015610f58576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015460ff161515918301919091529083529092019101610efe565b50505050905092915050565b6000546001600160a01b03163314610f8e5760405162461bcd60e51b8152600401610ae8906138f2565b60405133904780156108fc02916000818181858888f19350505050158015610fba573d6000803e3d6000fd5b50565b6001600160a01b038116600090815260056020908152604080832033845290915290205460ff16156110015760405162461bcd60e51b8152600401610ae8906138b2565b336000908152600460209081526040808320868452600b810183528184206001600160a01b0386168552909252909120546110d257604080516060810182526001600160a01b03848116808352602080840188815260008587018181528b8252600a890184528782208054600180820183558285528685209951600390920290990180546001600160a01b0319169190981617875592519686019690965594516002909401805460ff1916941515949094179093558884529154600b86018352848420918452915291902055611142565b6000848152600a820160209081526040808320600b850183528184206001600160a01b038716855290925282205461110c9060019061395e565b8154811061112a57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600160039092020101849055505b6001600160a01b0382166000908152600460209081526040808320868452600d810190925290912054156111a15760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b6044820152606401610ae8565b6111a96131f8565b600180825242602080840191825233604085019081526001600160a01b0388811660608701908152608087018b8152600c8901805480890182556000918252908690208951600790920201805491151560ff1992831617815596519787019790975592516002860180549184166001600160a01b0319928316179055905160038601805491909316911617905551600483015560a0840151600583018054911515919094161790925560c08301518051849361126c926006850192910190613236565b505050600c8201546000958652600d90920160205250604090932092909255505050565b6000546001600160a01b031633146112ba5760405162461bcd60e51b8152600401610ae8906138f2565b6112c46000612c7a565b565b60608060008367ffffffffffffffff8111156112f257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561132b57816020015b6113186131f8565b8152602001906001900390816113105790505b50905060008467ffffffffffffffff81111561135757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611380578160200160208202803683370190505b506001600160a01b0388166000908152600460205260408120600e015491925090875b6113ad888a613927565b811015611590578181101561157e576001600160a01b038a166000908152600460205260408120600e018054839081106113f757634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050600360008281526020019081526020016000205460001461157c5760008181526003602052604090205460029061143d9060019061395e565b8154811061145b57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160e0810182526007909302909101805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c08601939283018282801561151057602002820191906000526020600020905b8154815260200190600101908083116114fc575b50505050508152505086858151811061153957634e487b7160e01b600052603260045260246000fd5b60200260200101819052508085858151811061156557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611579846139b8565b93505b505b80611588816139b8565b9150506113a3565b5092989197509095505050505050565b6001600160a01b038216600090815260056020908152604080832033845290915290205460ff16156115e45760405162461bcd60e51b8152600401610ae8906138b2565b6115ec6131f8565b60018152426020808301919091523360408084018290526001600160a01b0386166060808601829052608080870188905260008581526004875284812084825285822086519889019790975294870193909352908501879052919390910160408051601f19818403018152918152815160209283012060028054600181018255600091909152875160079091027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace8101805492151560ff19938416178155898601517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830155938901517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0820180546001600160a01b039283166001600160a01b03199182161790915560608b01517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad18401805491909316911617905560808901517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad282015560a08901517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad382018054911515919093161790915560c0880151805192955088946117e4937f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad490930192910190613236565b505050600e928301805460018181018355600092835260208084209092018490559390940180549384018155815283812090920181905560025490825260039092526040902055505050565b336000908152600460205260408120600e810154909183916118549060019061395e565b90508181146118bb5782600e01818154811061188057634e487b7160e01b600052603260045260246000fd5b906000526020600020015483600e0183815481106118ae57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001555b82600e018054806118dc57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3360009081526004602052604081209061193e8287876127b8565b60028101549091506001600160a01b0316331480611968575060038101546001600160a01b031633145b61199d5760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b6044820152606401610ae8565b6119a56131f8565b815460ff161515815242602080830191825233604084019081526001600160a01b03888116606086019081526080860189815260028054600181018255600091909152875160079091027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace8101805492151560ff1993841617815597517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0860180549186166001600160a01b031992831617905592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad1860180549190951693169290921790925590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad283015560a08501517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad3830180549115159190921617905560c08401518051859493611b45937f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad401920190613236565b50505060408082015160608084015183516001600160a01b03938416602082015292169282019290925290810185905260009060800160408051601f1981840301815291815281516020928301206002546000828152600385529283205560069095018054600181018255908252919020019290925550505050505050565b3360009081526004602090815260408083208684526009810190925290912054611c005760405162461bcd60e51b8152600401610ae8906138d2565b6000848152600b8201602090815260408083206001600160a01b0386168452909152902054611c5c5760405162461bcd60e51b8152602060048201526008602482015267216e6f736861726560c01b6044820152606401610ae8565b6000848152600a820160209081526040808320600b850183528184206001600160a01b03871685529092529091205460019190611c9a90839061395e565b81548110611cb857634e487b7160e01b600052603260045260246000fd5b60009182526020808320600392909202909101600201805460ff1916931515939093179092556001600160a01b0384168152600482526040808220868352600d8101909352902054611d1c5760405162461bcd60e51b8152600401610ae8906138d2565b60008481526009820160205260409020546008820180543392908110611d5257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600260079092020101546001600160a01b031614611da55760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b6044820152606401610ae8565b6108468482600d0183600c01612a1f565b6001600160a01b038316600090815260056020908152604080832033845290915290205460ff1615611dfa5760405162461bcd60e51b8152600401610ae8906138b2565b6001600160a01b0383166000908152600460205260409020821580611e1f5750805415155b611e655760405162461bcd60e51b81526020600482015260176024820152761c9958d95a5d995c881b9bdd081c9959da5cdd195c9959604a1b6044820152606401610ae8565b336000908152600460205260409020611e7c6131f8565b841515815242602080830191825233604084019081526001600160a01b03898116606086019081526080860189815260048089018054600181810183556000928352918890208a51600790920201805491151560ff1992831617815598519189019190915594516002880180549186166001600160a01b031992831617905592516003880180549190951693169290921790925590519084015560a08401516005840180549115159190921617905560c08301518051849392611f46926006850192910190613236565b5050506004808301546000868152600580860160209081526040808420949094556002808901805460018181018355918652948390208851600790960201805495151560ff1996871617815588840151918101919091559487015190850180546001600160a01b039283166001600160a01b031991821617909155606088015160038701805491909316911617905560808601519484019490945560a085015190830180549115159190921617905560c08301518051849361200f926006850192910190613236565b50505060028301546000948552600390930160205250506040909120555050565b6001600160a01b03841660009081526004602052604090206060908461215d57612156848483600201805480602002602001604051908101604052809291908181526020016000905b8282101561214d5760008481526020908190206040805160e08101825260078602909201805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c08601939283018282801561213557602002820191906000526020600020905b815481526020019060010190808311612121575b50505050508152505081526020019060010190612079565b50505050612cca565b9150612578565b846001141561226357612156848483600401805480602002602001604051908101604052809291908181526020016000905b8282101561214d5760008481526020908190206040805160e08101825260078602909201805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c08601939283018282801561224b57602002820191906000526020600020905b815481526020019060010190808311612237575b5050505050815250508152602001906001019061218f565b846002141561236957612156848483600801805480602002602001604051908101604052809291908181526020016000905b8282101561214d5760008481526020908190206040805160e08101825260078602909201805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c08601939283018282801561235157602002820191906000526020600020905b81548152602001906001019080831161233d575b50505050508152505081526020019060010190612295565b846003141561246f57612156848483600601805480602002602001604051908101604052809291908181526020016000905b8282101561214d5760008481526020908190206040805160e08101825260078602909201805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c08601939283018282801561245757602002820191906000526020600020905b815481526020019060010190808311612443575b5050505050815250508152602001906001019061239b565b846004141561257857612575848483600c01805480602002602001604051908101604052809291908181526020016000905b8282101561214d5760008481526020908190206040805160e08101825260078602909201805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c08601939283018282801561255d57602002820191906000526020600020905b815481526020019060010190808311612549575b505050505081525050815260200190600101906124a1565b91505b50949350505050565b6000828152600160208190526040909120015461259e81336128e9565b610a9483836129b8565b3360009081526004602090815260408083208484526009810190925290912054156125e55760405162461bcd60e51b8152600401610ae8906138d2565b6125ed6131f8565b60018082524260208084019182523360408501818152606086019182526080860188815260088801805480880182556000918252908590208851600790920201805460ff1990811692151592909217815595519686019690965590516002850180546001600160a01b03199081166001600160a01b0393841617909155925160038601805490941691161790915551600483015560a08401516005830180549094169015151790925560c0830151805184936126b0926006850192910190613236565b50505060088201546000938452600990920160205250604090912055565b6000546001600160a01b031633146126f85760405162461bcd60e51b8152600401610ae8906138f2565b6001600160a01b03811661275d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ae8565b610fba81612c7a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a94908490612dcc565b60008261281457600082815260038501602052604090205460028501906127e19060019061395e565b815481106127ff57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020190506128e2565b826001141561283f57600082815260058501602052604090205460048501906127e19060019061395e565b826002141561286a57600082815260098501602052604090205460088501906127e19060019061395e565b826003141561289557600082815260078501602052604090205460068501906127e19060019061395e565b6000828152600360205260409020546002906128b39060019061395e565b815481106128d157634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020190505b9392505050565b6128f382826118f8565b6106ce5761290b816001600160a01b03166014612e9e565b612916836020612e9e565b604051602001612927929190613765565b60408051601f198184030181529082905262461bcd60e51b8252610ae89160040161387f565b61295782826118f8565b6106ce5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6129c282826118f8565b156106ce5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600083815260208390526040902054612a635760405162461bcd60e51b8152600401610ae8906020808252600490820152632152657160e01b604082015260600190565b600083815260208390526040812054612a7e9060019061395e565b8254909150600090612a929060019061395e565b9050818114612be057828181548110612abb57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201838381548110612ae957634e487b7160e01b600052603260045260246000fd5b600091825260209091208254600790920201805460ff928316151560ff199182161782556001808501549083015560028085015490830180546001600160a01b03199081166001600160a01b03938416179091556003808701549085018054909216921691909117905560048085015490830155600580850154908301805491909416151591161790915560068083018054612b889284019190613281565b50612b9891508390506001613927565b846000858481548110612bbb57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600401548152602001908152602001600020819055505b82805480612bfe57634e487b7160e01b600052603160045260246000fd5b600082815260208120600760001990930192830201805460ff199081168255600182018390556002820180546001600160a01b0319908116909155600383018054909116905560048201839055600582018054909116905590612c6460068301826132c1565b5050905550505060009182526020526040812055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060008367ffffffffffffffff811115612cf557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612d2e57816020015b612d1b6131f8565b815260200190600190039081612d135790505b5090506000855b612d3f8688613927565b811015612dc1578451811015612daf57848181518110612d6f57634e487b7160e01b600052603260045260246000fd5b6020026020010151838381518110612d9757634e487b7160e01b600052603260045260246000fd5b602002602001018190525081612dac906139b8565b91505b80612db9816139b8565b915050612d35565b509095945050505050565b6000612e21826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130809092919063ffffffff16565b805190915015610a945780806020019051810190612e3f91906134c8565b610a945760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ae8565b60606000612ead83600261393f565b612eb8906002613927565b67ffffffffffffffff811115612ede57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612f08576020820181803683370190505b509050600360fc1b81600081518110612f3157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612f6e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612f9284600261393f565b612f9d906001613927565b90505b6001811115613031576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612fdf57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061300357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361302a816139a1565b9050612fa0565b5083156128e25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ae8565b606061308f8484600085613097565b949350505050565b6060824710156130f85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ae8565b843b6131465760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ae8565b600080866001600160a01b031685876040516131629190613749565b60006040518083038185875af1925050503d806000811461319f576040519150601f19603f3d011682016040523d82523d6000602084013e6131a4565b606091505b50915091506131b48282866131bf565b979650505050505050565b606083156131ce5750816128e2565b8251156131de5782518084602001fd5b8160405162461bcd60e51b8152600401610ae8919061387f565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c081019190915290565b828054828255906000526020600020908101928215613271579160200282015b82811115613271578251825591602001919060010190613256565b5061327d9291506132db565b5090565b8280548282559060005260206000209081019282156132715760005260206000209182015b828111156132715782548255916001019190600101906132a6565b5080546000825590600052602060002090810190610fba91905b5b8082111561327d57600081556001016132dc565b80356001600160a01b038116811461330757600080fd5b919050565b600082601f83011261331c578081fd5b8135602067ffffffffffffffff80831115613339576133396139e9565b8260051b604051601f19603f8301168101818110848211171561335e5761335e6139e9565b6040528481528381019250868401828801850189101561337c578687fd5b8692505b8583101561339e578035845292840192600192909201918401613380565b50979650505050505050565b6000602082840312156133bb578081fd5b6128e2826132f0565b6000806000606084860312156133d8578182fd5b6133e1846132f0565b925060208401356133f1816139ff565b929592945050506040919091013590565b60008060408385031215613414578182fd5b61341d836132f0565b946020939093013593505050565b60008060006060848603121561343f578283fd5b613448846132f0565b95602085013595506040909401359392505050565b60008060008060808587031215613472578081fd5b61347b856132f0565b966020860135965060408601359560600135945092505050565b6000602082840312156134a6578081fd5b813567ffffffffffffffff8111156134bc578182fd5b61308f8482850161330c565b6000602082840312156134d9578081fd5b81516128e2816139ff565b6000602082840312156134f5578081fd5b5035919050565b6000806040838503121561350e578182fd5b8235915061351e602084016132f0565b90509250929050565b60008060408385031215613539578182fd5b50508035926020909101359150565b60008060006060848603121561355c578283fd5b8335925060208401359150613573604085016132f0565b90509250925092565b60006020828403121561358d578081fd5b81356001600160e01b0319811681146128e2578182fd5b600080600080608085870312156135b9578182fd5b84359350602085013592506135d0604086016132f0565b9396929550929360600135925050565b6000806000606084860312156135f4578081fd5b505081359360208301359350604090920135919050565b6000806040838503121561361d578182fd5b823563ffffffff81168114613630578283fd5b9150602083013567ffffffffffffffff81111561364b578182fd5b6136578582860161330c565b9150509250929050565b6000815180845260208085019450808401835b8381101561369057815187529582019590820190600101613674565b509495945050505050565b6000815180845260208085019450848260051b8601828601855b8581101561373c578383038952815180511515845285810151868501526040808201516001600160a01b0390811691860191909152606080830151909116908501526080808201519085015260a08082015115159085015260c09081015160e09185018290529061372881860183613661565b9a87019a94505050908401906001016136b5565b5090979650505050505050565b6000825161375b818460208701613975565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161379d816017850160208801613975565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516137ce816028840160208801613975565b01602801949350505050565b6020815260006128e2602083018461369b565b604081526000613800604083018561369b565b82810360208401526138128185613661565b95945050505050565b602080825282518282018190526000919060409081850190868401855b8281101561387257815180516001600160a01b03168552868101518786015285015115158585015260609093019290850190600101613838565b5091979650505050505050565b602081526000825180602084015261389e816040850160208701613975565b601f01601f19169190910160400192915050565b60208082526006908201526519195b9a595960d21b604082015260600190565b60208082526006908201526508595e1a5cdd60d21b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561393a5761393a6139d3565b500190565b6000816000190483118215151615613959576139596139d3565b500290565b600082821015613970576139706139d3565b500390565b60005b83811015613990578181015183820152602001613978565b83811115610d865750506000910152565b6000816139b0576139b06139d3565b506000190190565b60006000198214156139cc576139cc6139d3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610fba57600080fdfea26469706673582212206c5408974749811e2c56b4cdd87da89a7a6ee0498210a89cfe7e06bc48d9f08f64736f6c63430008040033",
        "deployedBytecode": "",
        "devdoc": {
          "kind": "dev",
          "methods": {
            "getRoleAdmin(bytes32)": {
              "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
            },
            "grantRole(bytes32,address)": {
              "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
            },
            "hasRole(bytes32,address)": {
              "details": "Returns `true` if `account` has been granted `role`."
            },
            "owner()": {
              "details": "Returns the address of the current owner."
            },
            "renounceOwnership()": {
              "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
            },
            "renounceRole(bytes32,address)": {
              "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
            },
            "revokeRole(bytes32,address)": {
              "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
            },
            "supportsInterface(bytes4)": {
              "details": "See {IERC165-supportsInterface}."
            },
            "transferOwnership(address)": {
              "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
          },
          "version": 1
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        },
        "storageLayout": {
          "storage": [
            {
              "astId": 389,
              "contract": "contracts/SwarmMail.sol:SwarmMail",
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address"
            },
            {
              "astId": 24,
              "contract": "contracts/SwarmMail.sol:SwarmMail",
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
            },
            {
              "astId": 3388,
              "contract": "contracts/SwarmMail.sol:SwarmMail",
              "label": "Threads",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Email)3324_storage)dyn_storage"
            },
            {
              "astId": 3392,
              "contract": "contracts/SwarmMail.sol:SwarmMail",
              "label": "threadHashIds",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)"
            },
            {
              "astId": 3397,
              "contract": "contracts/SwarmMail.sol:SwarmMail",
              "label": "users",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(User)3384_storage)"
            },
            {
              "astId": 3403,
              "contract": "contracts/SwarmMail.sol:SwarmMail",
              "label": "blackList",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
            }
          ],
          "types": {
            "t_address": {
              "encoding": "inplace",
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "base": "t_bytes32",
              "encoding": "dynamic_array",
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Email)3324_storage)dyn_storage": {
              "base": "t_struct(Email)3324_storage",
              "encoding": "dynamic_array",
              "label": "struct SwarmMail.Email[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Share)3308_storage)dyn_storage": {
              "base": "t_struct(Share)3308_storage",
              "encoding": "dynamic_array",
              "label": "struct SwarmMail.Share[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "encoding": "inplace",
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "encoding": "inplace",
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => bool)",
              "numberOfBytes": "32",
              "value": "t_bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32",
              "value": "t_mapping(t_address,t_bool)"
            },
            "t_mapping(t_address,t_struct(User)3384_storage)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => struct SwarmMail.User)",
              "numberOfBytes": "32",
              "value": "t_struct(User)3384_storage"
            },
            "t_mapping(t_address,t_uint256)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32",
              "value": "t_uint256"
            },
            "t_mapping(t_bytes32,t_array(t_struct(Share)3308_storage)dyn_storage)": {
              "encoding": "mapping",
              "key": "t_bytes32",
              "label": "mapping(bytes32 => struct SwarmMail.Share[])",
              "numberOfBytes": "32",
              "value": "t_array(t_struct(Share)3308_storage)dyn_storage"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
              "encoding": "mapping",
              "key": "t_bytes32",
              "label": "mapping(bytes32 => mapping(address => uint256))",
              "numberOfBytes": "32",
              "value": "t_mapping(t_address,t_uint256)"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "encoding": "mapping",
              "key": "t_bytes32",
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32",
              "value": "t_struct(RoleData)19_storage"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "encoding": "mapping",
              "key": "t_bytes32",
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32",
              "value": "t_uint256"
            },
            "t_struct(Email)3324_storage": {
              "encoding": "inplace",
              "label": "struct SwarmMail.Email",
              "members": [
                {
                  "astId": 3310,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "isEncryption",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_bool"
                },
                {
                  "astId": 3312,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "time",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_uint256"
                },
                {
                  "astId": 3314,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "from",
                  "offset": 0,
                  "slot": "2",
                  "type": "t_address"
                },
                {
                  "astId": 3316,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "to",
                  "offset": 0,
                  "slot": "3",
                  "type": "t_address"
                },
                {
                  "astId": 3318,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "swarmLocation",
                  "offset": 0,
                  "slot": "4",
                  "type": "t_bytes32"
                },
                {
                  "astId": 3320,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "signed",
                  "offset": 0,
                  "slot": "5",
                  "type": "t_bool"
                },
                {
                  "astId": 3323,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "threads",
                  "offset": 0,
                  "slot": "6",
                  "type": "t_array(t_bytes32)dyn_storage"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)19_storage": {
              "encoding": "inplace",
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "astId": 16,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "members",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "astId": 18,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "adminRole",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_bytes32"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Share)3308_storage": {
              "encoding": "inplace",
              "label": "struct SwarmMail.Share",
              "members": [
                {
                  "astId": 3303,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "withAddress",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_address"
                },
                {
                  "astId": 3305,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "keyLocation",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_bytes32"
                },
                {
                  "astId": 3307,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "revoked",
                  "offset": 0,
                  "slot": "2",
                  "type": "t_bool"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(User)3384_storage": {
              "encoding": "inplace",
              "label": "struct SwarmMail.User",
              "members": [
                {
                  "astId": 3326,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "pubKey",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_bytes32"
                },
                {
                  "astId": 3328,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "keyLocation",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_bytes32"
                },
                {
                  "astId": 3332,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "inboxEmails",
                  "offset": 0,
                  "slot": "2",
                  "type": "t_array(t_struct(Email)3324_storage)dyn_storage"
                },
                {
                  "astId": 3336,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "inboxEmailIds",
                  "offset": 0,
                  "slot": "3",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                },
                {
                  "astId": 3340,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "sentEmails",
                  "offset": 0,
                  "slot": "4",
                  "type": "t_array(t_struct(Email)3324_storage)dyn_storage"
                },
                {
                  "astId": 3344,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "sentEmailIds",
                  "offset": 0,
                  "slot": "5",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                },
                {
                  "astId": 3348,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "oneWayEmails",
                  "offset": 0,
                  "slot": "6",
                  "type": "t_array(t_struct(Email)3324_storage)dyn_storage"
                },
                {
                  "astId": 3352,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "oneWayEmailIds",
                  "offset": 0,
                  "slot": "7",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                },
                {
                  "astId": 3356,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "lockerEmails",
                  "offset": 0,
                  "slot": "8",
                  "type": "t_array(t_struct(Email)3324_storage)dyn_storage"
                },
                {
                  "astId": 3360,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "lockerEmailIds",
                  "offset": 0,
                  "slot": "9",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                },
                {
                  "astId": 3366,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "shares",
                  "offset": 0,
                  "slot": "10",
                  "type": "t_mapping(t_bytes32,t_array(t_struct(Share)3308_storage)dyn_storage)"
                },
                {
                  "astId": 3372,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "shareIds",
                  "offset": 0,
                  "slot": "11",
                  "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
                },
                {
                  "astId": 3376,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "sharedLockerEmails",
                  "offset": 0,
                  "slot": "12",
                  "type": "t_array(t_struct(Email)3324_storage)dyn_storage"
                },
                {
                  "astId": 3380,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "sharedLockerEmailIds",
                  "offset": 0,
                  "slot": "13",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                },
                {
                  "astId": 3383,
                  "contract": "contracts/SwarmMail.sol:SwarmMail",
                  "label": "threads",
                  "offset": 0,
                  "slot": "14",
                  "type": "t_array(t_bytes32)dyn_storage"
                }
              ],
              "numberOfBytes": "480"
            },
            "t_uint256": {
              "encoding": "inplace",
              "label": "uint256",
              "numberOfBytes": "32"
            }
          }
        }
      },
      "DataHub": {
        "address": "0x982d3A3516E08763DEf73485e5762bdBbD932Ce9",
        "abi": [
          {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "indexed": true,
                "internalType": "bytes32",
                "name": "previousAdminRole",
                "type": "bytes32"
              },
              {
                "indexed": true,
                "internalType": "bytes32",
                "name": "newAdminRole",
                "type": "bytes32"
              }
            ],
            "name": "RoleAdminChanged",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "account",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "RoleGranted",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "account",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "RoleRevoked",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "DEFAULT_ADMIN_ROLE",
            "outputs": [
              {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "ROLE_REPORTER",
            "outputs": [
              {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "subHash",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "fdpBuyerNameHash",
                "type": "bytes32"
              }
            ],
            "name": "bidSub",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "subHash",
                "type": "bytes32"
              },
              {
                "internalType": "bool",
                "name": "active",
                "type": "bool"
              }
            ],
            "name": "enableSub",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "feesCollected",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "fundsBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "fundsTransfer",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "index",
                "type": "uint256"
              }
            ],
            "name": "getActiveBidAt",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "requestHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "address",
                    "name": "seller",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "served",
                    "type": "bool"
                  }
                ],
                "internalType": "struct DataHub.ActiveBid",
                "name": "",
                "type": "tuple"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "getActiveBids",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "requestHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "address",
                    "name": "seller",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "served",
                    "type": "bool"
                  }
                ],
                "internalType": "struct DataHub.ActiveBid[]",
                "name": "",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "requestHash",
                "type": "bytes32"
              }
            ],
            "name": "getActiveBidsByHash",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "requestHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "address",
                    "name": "seller",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "served",
                    "type": "bool"
                  }
                ],
                "internalType": "struct DataHub.ActiveBid",
                "name": "",
                "type": "tuple"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "getAllSubItems",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "subHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "unlockKeyLocation",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint256",
                    "name": "validTill",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct DataHub.SubItem[]",
                "name": "",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "nameHash",
                "type": "bytes32"
              }
            ],
            "name": "getAllSubItemsForNameHash",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "subHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "unlockKeyLocation",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint256",
                    "name": "validTill",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct DataHub.SubItem[]",
                "name": "",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "category",
                "type": "bytes32"
              }
            ],
            "name": "getCategory",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "uint64[]",
                    "name": "subIdxs",
                    "type": "uint64[]"
                  }
                ],
                "internalType": "struct DataHub.Category",
                "name": "",
                "type": "tuple"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_fee",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "getFee",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "getListedSubs",
            "outputs": [
              {
                "internalType": "bytes32[]",
                "name": "",
                "type": "bytes32[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "nameHash",
                "type": "bytes32"
              }
            ],
            "name": "getNameHashSubItems",
            "outputs": [
              {
                "internalType": "bytes32[]",
                "name": "",
                "type": "bytes32[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "getPortableAddress",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              }
            ],
            "name": "getRoleAdmin",
            "outputs": [
              {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "subHash",
                "type": "bytes32"
              }
            ],
            "name": "getSubBy",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "subHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "fdpSellerNameHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "address",
                    "name": "seller",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "swarmLocation",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint256",
                    "name": "price",
                    "type": "uint256"
                  },
                  {
                    "internalType": "bool",
                    "name": "active",
                    "type": "bool"
                  },
                  {
                    "internalType": "uint256",
                    "name": "earned",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint32",
                    "name": "bids",
                    "type": "uint32"
                  },
                  {
                    "internalType": "uint32",
                    "name": "sells",
                    "type": "uint32"
                  },
                  {
                    "internalType": "uint32",
                    "name": "reports",
                    "type": "uint32"
                  },
                  {
                    "internalType": "uint16",
                    "name": "daysValid",
                    "type": "uint16"
                  }
                ],
                "internalType": "struct DataHub.Sub",
                "name": "",
                "type": "tuple"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "index",
                "type": "uint256"
              }
            ],
            "name": "getSubByIndex",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "subHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "fdpSellerNameHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "address",
                    "name": "seller",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "swarmLocation",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint256",
                    "name": "price",
                    "type": "uint256"
                  },
                  {
                    "internalType": "bool",
                    "name": "active",
                    "type": "bool"
                  },
                  {
                    "internalType": "uint256",
                    "name": "earned",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint32",
                    "name": "bids",
                    "type": "uint32"
                  },
                  {
                    "internalType": "uint32",
                    "name": "sells",
                    "type": "uint32"
                  },
                  {
                    "internalType": "uint32",
                    "name": "reports",
                    "type": "uint32"
                  },
                  {
                    "internalType": "uint16",
                    "name": "daysValid",
                    "type": "uint16"
                  }
                ],
                "internalType": "struct DataHub.Sub",
                "name": "",
                "type": "tuple"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "subHash",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "forAddress",
                "type": "address"
              }
            ],
            "name": "getSubInfoBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "index",
                "type": "uint256"
              }
            ],
            "name": "getSubItemAt",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "subHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "unlockKeyLocation",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint256",
                    "name": "validTill",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct DataHub.SubItem",
                "name": "",
                "type": "tuple"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "start",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "length",
                "type": "uint256"
              }
            ],
            "name": "getSubItems",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "subHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "unlockKeyLocation",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint256",
                    "name": "validTill",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct DataHub.SubItem[]",
                "name": "items",
                "type": "tuple[]"
              },
              {
                "internalType": "uint256",
                "name": "last",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "index",
                "type": "uint256"
              }
            ],
            "name": "getSubRequestAt",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "fdpBuyerNameHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "subHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "requestHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "address",
                    "name": "buyer",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "served",
                    "type": "bool"
                  }
                ],
                "internalType": "struct DataHub.SubRequest",
                "name": "",
                "type": "tuple"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "requestHash",
                "type": "bytes32"
              }
            ],
            "name": "getSubRequestByHash",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "fdpBuyerNameHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "subHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "requestHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "address",
                    "name": "buyer",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "served",
                    "type": "bool"
                  }
                ],
                "internalType": "struct DataHub.SubRequest",
                "name": "",
                "type": "tuple"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "getSubRequests",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "fdpBuyerNameHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "subHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "requestHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "address",
                    "name": "buyer",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "served",
                    "type": "bool"
                  }
                ],
                "internalType": "struct DataHub.SubRequest[]",
                "name": "",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "subHash",
                "type": "bytes32"
              }
            ],
            "name": "getSubSubscribers",
            "outputs": [
              {
                "internalType": "address[]",
                "name": "",
                "type": "address[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getSubs",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "subHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "fdpSellerNameHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "address",
                    "name": "seller",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "swarmLocation",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint256",
                    "name": "price",
                    "type": "uint256"
                  },
                  {
                    "internalType": "bool",
                    "name": "active",
                    "type": "bool"
                  },
                  {
                    "internalType": "uint256",
                    "name": "earned",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint32",
                    "name": "bids",
                    "type": "uint32"
                  },
                  {
                    "internalType": "uint32",
                    "name": "sells",
                    "type": "uint32"
                  },
                  {
                    "internalType": "uint32",
                    "name": "reports",
                    "type": "uint32"
                  },
                  {
                    "internalType": "uint16",
                    "name": "daysValid",
                    "type": "uint16"
                  }
                ],
                "internalType": "struct DataHub.Sub[]",
                "name": "",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "getUserStats",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "numSubRequests",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "numSubItems",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "numActiveBids",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "numListedSubs",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "grantRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "hasRole",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "inEscrow",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "fdpSellerNameHash",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "dataSwarmLocation",
                "type": "bytes32"
              },
              {
                "internalType": "uint256",
                "name": "price",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "category",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "podAddress",
                "type": "address"
              },
              {
                "internalType": "uint16",
                "name": "daysValid",
                "type": "uint16"
              }
            ],
            "name": "listSub",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "marketFee",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "minListingFee",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "release",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "requestHash",
                "type": "bytes32"
              }
            ],
            "name": "removeUserActiveBid",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "renounceRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "subHash",
                "type": "bytes32"
              }
            ],
            "name": "reportSub",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "requestHash",
                "type": "bytes32"
              }
            ],
            "name": "requestAgain",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "role",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "revokeRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "requestHash",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "encryptedKeyLocation",
                "type": "bytes32"
              }
            ],
            "name": "sellSub",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "newFee",
                "type": "uint256"
              }
            ],
            "name": "setFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "newListingFee",
                "type": "uint256"
              }
            ],
            "name": "setListingFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "setPortableAddress",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
              }
            ],
            "name": "subscriptionIds",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "name": "subscriptions",
            "outputs": [
              {
                "internalType": "bytes32",
                "name": "subHash",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "fdpSellerNameHash",
                "type": "bytes32"
              },
              {
                "internalType": "address",
                "name": "seller",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "swarmLocation",
                "type": "bytes32"
              },
              {
                "internalType": "uint256",
                "name": "price",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "active",
                "type": "bool"
              },
              {
                "internalType": "uint256",
                "name": "earned",
                "type": "uint256"
              },
              {
                "internalType": "uint32",
                "name": "bids",
                "type": "uint32"
              },
              {
                "internalType": "uint32",
                "name": "sells",
                "type": "uint32"
              },
              {
                "internalType": "uint32",
                "name": "reports",
                "type": "uint32"
              },
              {
                "internalType": "uint16",
                "name": "daysValid",
                "type": "uint16"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes4",
                "name": "interfaceId",
                "type": "bytes4"
              }
            ],
            "name": "supportsInterface",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "stateMutability": "payable",
            "type": "receive"
          }
        ],
        "transactionHash": "0x6f9de3dcd9eb07518e6fc3d5b2745c395462c48fcf97a283f51c8e47c5b011bc",
        "receipt": {
          "to": null,
          "from": "0xd27ffA0e47Fca8D3E757B4d2C408169859B8c419",
          "contractAddress": "0x982d3A3516E08763DEf73485e5762bdBbD932Ce9",
          "transactionIndex": 85,
          "gasUsed": "3981185",
          "logsBloom": "0x
          "blockHash": "0x895939c6f04dec267259f0314fe44af58a508ddff28b62638e7739df631fc171",
          "transactionHash": "0x6f9de3dcd9eb07518e6fc3d5b2745c395462c48fcf97a283f51c8e47c5b011bc",
          "logs": [
            {
              "transactionIndex": 85,
              "blockNumber": 8785697,
              "transactionHash": "0x6f9de3dcd9eb07518e6fc3d5b2745c395462c48fcf97a283f51c8e47c5b011bc",
              "address": "0x982d3A3516E08763DEf73485e5762bdBbD932Ce9",
              "topics": [
                "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                "0x000000000000000000000000d27ffa0e47fca8d3e757b4d2c408169859b8c419"
              ],
              "data": "0x",
              "logIndex": 113,
              "blockHash": "0x895939c6f04dec267259f0314fe44af58a508ddff28b62638e7739df631fc171"
            }
          ],
          "blockNumber": 8785697,
          "cumulativeGasUsed": "18062363",
          "status": 1,
          "byzantium": true
        },
        "args": [],
        "numDeployments": 4,
        "solcInputHash": "df349cd8237980cf046c4877ed60d9b3",
        "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_REPORTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fdpBuyerNameHash\",\"type\":\"bytes32\"}],\"name\":\"bidSub\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"enableSub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getActiveBidAt\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"served\",\"type\":\"bool\"}],\"internalType\":\"struct DataHub.ActiveBid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getActiveBids\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"served\",\"type\":\"bool\"}],\"internalType\":\"struct DataHub.ActiveBid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"getActiveBidsByHash\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"served\",\"type\":\"bool\"}],\"internalType\":\"struct DataHub.ActiveBid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAllSubItems\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"unlockKeyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validTill\",\"type\":\"uint256\"}],\"internalType\":\"struct DataHub.SubItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nameHash\",\"type\":\"bytes32\"}],\"name\":\"getAllSubItemsForNameHash\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"unlockKeyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validTill\",\"type\":\"uint256\"}],\"internalType\":\"struct DataHub.SubItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"category\",\"type\":\"bytes32\"}],\"name\":\"getCategory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64[]\",\"name\":\"subIdxs\",\"type\":\"uint64[]\"}],\"internalType\":\"struct DataHub.Category\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getListedSubs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nameHash\",\"type\":\"bytes32\"}],\"name\":\"getNameHashSubItems\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPortableAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"}],\"name\":\"getSubBy\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fdpSellerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"bids\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sells\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reports\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"daysValid\",\"type\":\"uint16\"}],\"internalType\":\"struct DataHub.Sub\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSubByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fdpSellerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"bids\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sells\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reports\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"daysValid\",\"type\":\"uint16\"}],\"internalType\":\"struct DataHub.Sub\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"getSubInfoBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSubItemAt\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"unlockKeyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validTill\",\"type\":\"uint256\"}],\"internalType\":\"struct DataHub.SubItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getSubItems\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"unlockKeyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validTill\",\"type\":\"uint256\"}],\"internalType\":\"struct DataHub.SubItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSubRequestAt\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"fdpBuyerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"served\",\"type\":\"bool\"}],\"internalType\":\"struct DataHub.SubRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"getSubRequestByHash\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"fdpBuyerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"served\",\"type\":\"bool\"}],\"internalType\":\"struct DataHub.SubRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getSubRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"fdpBuyerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"served\",\"type\":\"bool\"}],\"internalType\":\"struct DataHub.SubRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"}],\"name\":\"getSubSubscribers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubs\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fdpSellerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"bids\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sells\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reports\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"daysValid\",\"type\":\"uint16\"}],\"internalType\":\"struct DataHub.Sub[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numSubRequests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSubItems\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numActiveBids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numListedSubs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inEscrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fdpSellerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataSwarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"category\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"podAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"daysValid\",\"type\":\"uint16\"}],\"name\":\"listSub\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minListingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"removeUserActiveBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"}],\"name\":\"reportSub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"requestAgain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedKeyLocation\",\"type\":\"bytes32\"}],\"name\":\"sellSub\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newListingFee\",\"type\":\"uint256\"}],\"name\":\"setListingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPortableAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"subscriptionIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fdpSellerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"bids\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sells\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reports\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"daysValid\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DataHub.sol\":\"DataHub\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DataHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract DataHub is Ownable, ReentrancyGuard, AccessControl  {\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    uint256 private constant FEE_PRECISION = 1e5;  \\n    uint256 public marketFee = 1000; // 1%\\n    uint256 public minListingFee = 1000000 gwei; // min listing fee - 0.0001000 ETH\\n    uint256 public feesCollected = 0;\\n    uint256 public inEscrow = 0;\\n    bytes32 public constant ROLE_REPORTER = keccak256(\\\"ROLE_REPORTER\\\");\\n\\n    // subscription request\\n    struct SubRequest {\\n        bytes32 fdpBuyerNameHash;\\n        bytes32 subHash;     // which subscription;\\n        bytes32 requestHash; // this is needed when\\n        address buyer;\\n        bool    served; // default false\\n    }\\n    // active Bid\\n    struct ActiveBid {\\n        bytes32 requestHash;\\n        address seller;\\n        bool    served; // default false\\n    }\\n    // subscription items\\n    struct SubItem {\\n        bytes32 subHash;  // what subscription you are entitled to\\n        bytes32 unlockKeyLocation; // where is your key\\n        uint256 validTill; // until it is valid \\n    }\\n    struct User {\\n        // who wants to subscribe to what\\n        SubRequest[] subRequests;\\n        mapping(bytes32 => uint256) subRequestIds;\\n\\n        ActiveBid[] activeBids;\\n        mapping(bytes32 => uint256) activeBidIds;\\n\\n        // what is user subscribed to\\n        //SubItem[] subItems;\\n        //mapping(bytes32 => uint256) subItemIds;\\n        bytes32[] subItemHashes;\\n\\n        bytes32[] listedSubs; // everything user listed \\n    }\\n    mapping(address => User) users;\\n    mapping(address => address) userToPortable;\\n    // mapping(address => address) portableToUser;\\n    mapping(bytes32 => address) nameHashToUser;\\n\\n    SubItem[] private allSubItems;\\n    mapping(bytes32 => uint256) allSubItemIds; \\n     mapping(bytes32 => bytes32[]) nameHashToSubItems; // what nameHash has access to (whomever bought it)\\n\\n\\n    struct Category {\\n        uint64[]     subIdxs;\\n    }\\n    mapping(bytes32 => Category) categories; // where is category in categories array\\n\\n    // Sub listings\\n    struct Sub {\\n        bytes32 subHash;\\n        bytes32 fdpSellerNameHash; //\\n        address seller;\\n        bytes32 swarmLocation; // metadata location\\n        uint256 price;\\n        bool    active; // is subscription active\\n        uint256 earned;  \\n        uint32  bids;\\n        uint32  sells;\\n        uint32  reports; \\n        uint16  daysValid;\\n    }\\n    Sub[] public  subscriptions;\\n    mapping(bytes32 => uint256) public subscriptionIds; \\n\\n    struct SubInfo {\\n        mapping(address => uint256) perSubscriberBalance; // balance per subscriber\\n        address[] subscribers; \\n    }\\n    mapping(bytes32 => SubInfo) subInfos; // where is sub in subscriptions array    \\n\\n    constructor() {\\n    }\\n\\n    receive() external payable {}\\n\\n    function getUserStats(address addr) public view returns (uint numSubRequests, uint numSubItems, uint numActiveBids, uint numListedSubs) {\\n        numSubRequests = users[addr].subRequests.length;\\n        numSubItems = users[addr].subItemHashes.length;\\n        numActiveBids = users[addr].activeBids.length;\\n        numListedSubs = users[addr].listedSubs.length;\\n    }\\n    function setPortableAddress(address addr) public {\\n        userToPortable[msg.sender] = addr;\\n        //portableToUser[addr] = msg.sender;\\n    }\\n    function getPortableAddress(address addr) public view returns (address) {\\n        return userToPortable[addr];\\n    }    \\n    // function getUserAddress(address fdpAddress) public view returns (address) {\\n    //     return portableToUser[fdpAddress];\\n    // }   \\n    function getFee(uint256 _fee, uint256 amount) public pure returns (uint256) {\\n        return (amount * _fee) / FEE_PRECISION;\\n    }\\n    function setFee(uint256 newFee) onlyOwner public  {\\n        marketFee = newFee; \\n    }\\n    function setListingFee(uint256 newListingFee) onlyOwner public  {\\n        minListingFee = newListingFee; \\n    }      \\n    function getCategory(bytes32 category) public view returns (Category memory) {\\n        return categories[category];\\n    }\\n    function getSubs() public view returns (Sub[] memory) {\\n        return subscriptions;\\n    }\\n    function getSubByIndex(uint index) public view returns (Sub memory) {\\n        return subscriptions[index];\\n    }\\n    function getSubBy(bytes32 subHash) public view returns (Sub memory) {\\n        return subscriptions[subscriptionIds[subHash]-1];\\n    }\\n    function getSubRequestAt(address addr, uint index) public view returns (SubRequest memory) {\\n        return users[addr].subRequests[index];\\n    }\\n    function getActiveBidAt(address addr, uint index) public view returns (ActiveBid memory) {\\n        return users[addr].activeBids[index];\\n    }    \\n\\n    function getSubItemAt(address addr, uint index) public view returns (SubItem memory) {\\n        // return users[addr].subItems[index];\\n        return allSubItems[allSubItemIds[users[addr].subItemHashes[index]]-1];\\n    }\\n    function getSubItems(address addr, uint start, uint length) public view returns (SubItem[] memory items, uint last) {\\n        // either we  iterate through all items and return only those that are active\\n        // or we return all items and let the client filter them\\n        // iterate through active subItems\\n        items = new SubItem[](length);\\n        uint count = 0;\\n        last = 0; // init to 0\\n        \\n        for (uint i = start; i < users[addr].subItemHashes.length; i++) {\\n            SubItem memory subItem = allSubItems[allSubItemIds[users[addr].subItemHashes[i]]-1];\\n            if(block.timestamp < subItem.validTill) {\\n                if(count < length)\\n                {\\n                   items[count] = subItem;\\n                   ++count;\\n                   last = i;\\n                } else \\n                    break;\\n            }\\n        }\\n        //return items;\\n    }\\n    /*function getSubItemBy(address addr, bytes32 subHash) public view returns (SubItem memory) {\\n        // check if subHash subItem is active\\n        require(block.timestamp <= users[addr].subItems[users[addr].subItemIds[subHash]-1].validTill, \\\"SubItem expired\\\");\\n        return users[addr].subItems[users[addr].subItemIds[subHash]-1];\\n    }*/\\n    function getAllSubItems(address addr) public view returns (SubItem[] memory) {\\n        // TODO return non active without keyLockLocation\\n        SubItem[] memory items = new SubItem[](users[addr].subItemHashes.length);\\n        for (uint i = 0; i < items.length; i++) {\\n            items[i] = allSubItems[allSubItemIds[users[addr].subItemHashes[i]]-1];\\n            if(block.timestamp > items[i].validTill) {\\n                items[i].unlockKeyLocation = bytes32(0);\\n            }\\n        }\\n        return items; //users[addr].subItems;\\n    }\\n    function getAllSubItemsForNameHash(bytes32 nameHash) public view returns (SubItem[] memory) {\\n        //User storage u = users[nameHashToUser[nameHash]];\\n        // TODO return non active without keyLockLocation\\n        uint len = nameHashToSubItems[nameHash].length;\\n        SubItem[] memory items = new SubItem[](len);\\n        for (uint i = 0; i < len; i++) {\\n            items[i] = allSubItems[allSubItemIds[nameHashToSubItems[nameHash][i]]-1];\\n            // nameHashToSubItems[nameHash][i];\\n            if(block.timestamp > items[i].validTill) {\\n                items[i].unlockKeyLocation = bytes32(0);\\n            }\\n        }\\n        return items; //users[addr].subItems;\\n    }\\n    \\n    function getNameHashSubItems(bytes32 nameHash) public view returns (bytes32[] memory) {\\n        return nameHashToSubItems[nameHash];\\n    }\\n\\n    function getListedSubs(address addr) public view returns (bytes32[] memory) {\\n        return users[addr].listedSubs;\\n    }\\n    function getActiveBids(address addr) public view returns (ActiveBid[] memory) {\\n        return users[addr].activeBids;\\n    }\\n    function getSubRequestByHash(address addr, bytes32 requestHash) public view returns (SubRequest memory) {\\n        return users[addr].subRequests[users[addr].subRequestIds[requestHash]-1];\\n    }\\n    function getActiveBidsByHash(address addr, bytes32 requestHash) public view returns (ActiveBid memory) {\\n        return users[addr].activeBids[users[addr].activeBidIds[requestHash]-1];\\n    }\\n    function getSubRequests(address addr) public view returns (SubRequest[] memory) {\\n        return users[addr].subRequests;\\n    }\\n    function getSubSubscribers(bytes32 subHash) public view returns (address[] memory) {\\n        return subInfos[subHash].subscribers;\\n    }\\n    function getSubInfoBalance(bytes32 subHash, address forAddress) public view returns (uint256) {\\n        return subInfos[subHash].perSubscriberBalance[forAddress];\\n    }\\n    function enableSub(bytes32 subHash, bool active) public {\\n        require(subscriptionIds[subHash] != 0, \\\"No Sub\\\"); // must exists\\n        Sub storage s = subscriptions[subscriptionIds[subHash] - 1]; \\n        require(s.seller == msg.sender, \\\"Not Seller\\\"); // only seller can enable subscription\\n        require(s.reports<4, \\\"Too many reports\\\"); // only seller can enable subscription\\n\\n        s.active = active;\\n    }\\n    function reportSub(bytes32 subHash) public {\\n        require(hasRole(ROLE_REPORTER, msg.sender),\\\"Not Reporter\\\");\\n        require(subscriptionIds[subHash] != 0, \\\"No Sub\\\"); // must exists\\n        Sub storage s = subscriptions[subscriptionIds[subHash] - 1]; \\n        s.reports = s.reports + 1;\\n        if(s.reports >= 3) {\\n            s.active = false;\\n        }\\n    }\\n    // Market to sell encrypted swarmLocation\\n    function listSub(bytes32 fdpSellerNameHash, bytes32 dataSwarmLocation, uint price, bytes32 category, address podAddress, uint16 daysValid) public payable {\\n        //bytes32 subHash = keccak256(abi.encode(msg.sender, fdpSeller, dataSwarmLocation, price, category, podIndex));\\n        require(msg.value>=minListingFee, \\\"minFee\\\"); // sent value must be equal to price\\n        require(daysValid>=1 && daysValid<=365, \\\"daysValid\\\"); // must not exists\\n\\n        bytes32 subHash = keccak256(abi.encode(msg.sender, fdpSellerNameHash, podAddress));// user can list same pod only once\\n        require(subscriptionIds[subHash] == 0, \\\"SubExists\\\"); // must not exists\\n\\n        Sub memory s = Sub(subHash, fdpSellerNameHash, msg.sender, dataSwarmLocation, price, true, 0, 0, 0, 0, daysValid);\\n        \\n        subscriptions.push(s);\\n        subscriptionIds[subHash] = subscriptions.length; // will point to 1 more than index\\n\\n        Category storage c = categories[category];\\n        c.subIdxs.push(uint64(subscriptions.length) - 1); // point to index\\n\\n        User storage seller = users[msg.sender];\\n        seller.listedSubs.push(subHash);\\n\\n        feesCollected+=msg.value;\\n    }\\n    function bidSub(bytes32 subHash, bytes32 fdpBuyerNameHash) public nonReentrant payable {\\n        // marketplace does not require user to be registred with smail -- TODO on front end and check \\n        // require(users[msg.sender].key != bytes32(0), \\\"Not reg\\\"); // user can not receive encrypted data\\n        require(subscriptionIds[subHash] != 0, \\\"No Sub\\\"); // must exists\\n        Sub storage s = subscriptions[subscriptionIds[subHash] - 1]; \\n\\n        require(s.active, \\\"Inactive\\\"); // must be active\\n        require(msg.value==s.price, \\\"Value!=price\\\"); // sent value must be equal to price\\n\\n        User storage seller = users[s.seller];\\n        bytes32 requestHash = keccak256(abi.encode(msg.sender, subHash, fdpBuyerNameHash)); //, block.timestamp));\\n        require(seller.subRequestIds[requestHash] == 0, \\\"Req exists\\\");\\n\\n        s.bids++;\\n\\n        SubRequest memory sr;\\n        sr.fdpBuyerNameHash = fdpBuyerNameHash;\\n        sr.buyer = msg.sender;\\n        sr.subHash = s.subHash;\\n        sr.requestHash = requestHash;\\n\\n        seller.subRequests.push(sr);\\n        seller.subRequestIds[requestHash] = seller.subRequests.length; // +1 of index\\n        \\n        inEscrow += msg.value;\\n\\n        ActiveBid memory ab;\\n        ab.requestHash = requestHash;\\n        ab.seller = s.seller; //msg.sender;\\n\\n        User storage buyer = users[msg.sender];\\n        buyer.activeBids.push(ab);      \\n        buyer.activeBidIds[requestHash] = buyer.activeBids.length; // +1 of index\\n    }\\n\\n   \\n\\n    // encryptedSecret is podReference encrypited with sharedSecret - podAddress, seller.address, buyer.address, encryptedSecret\\n    function sellSub(bytes32 requestHash, bytes32 encryptedKeyLocation) public nonReentrant payable {\\n        User storage seller = users[msg.sender];\\n        require(seller.subRequestIds[requestHash] != 0, \\\"No Req\\\");\\n\\n        SubRequest storage br = seller.subRequests[seller.subRequestIds[requestHash]-1];\\n        require(br.served == false, \\\"served\\\"); // must exists\\n        require(subscriptionIds[br.subHash] != 0, \\\"No Sub\\\"); // must exists\\n\\n        Sub storage s = subscriptions[subscriptionIds[br.subHash]-1]; \\n        require(msg.sender==s.seller, \\\"Not Sub Seller\\\"); // sent value must be equal to price\\n\\n        User storage buyer = users[br.buyer];\\n        //User storage buyer = users[userToPortable[br.buyer]];\\n        SubItem memory si;\\n        si.subHash = br.subHash;\\n        si.unlockKeyLocation = encryptedKeyLocation;\\n        si.validTill = block.timestamp + (s.daysValid * 86400); //(daysValid * 60*60*24) // days;\\n\\n        bytes32 subItemHash = keccak256(abi.encode(msg.sender, br.buyer, si.subHash, si.validTill, si.unlockKeyLocation)); //, block.timestamp));\\n        allSubItems.push(si); \\n        allSubItemIds[subItemHash] = allSubItems.length;\\n\\n        buyer.subItemHashes.push(subItemHash);\\n        nameHashToSubItems[br.fdpBuyerNameHash].push(subItemHash); // point to index\\n        \\n        ActiveBid storage ab = buyer.activeBids[buyer.activeBidIds[requestHash]-1];\\n        ab.served = true; // active bid served\\n        br.served = true; // sub request served\\n        //removeSubRequest(msg.sender, requestHash); // seller removes request from his list\\n        //removeActiveBid(br.buyer, requestHash); // remove activeBid from buyer\\n\\n        // calculate fees and transfer to seller\\n        uint256 fee = getFee(marketFee, s.price);\\n        uint256 sellerPayout = s.price-fee;\\n        payable(msg.sender).transfer(sellerPayout);\\n        inEscrow -= s.price;\\n        feesCollected += fee;\\n\\n        s.sells++;\\n        s.earned += (sellerPayout);\\n\\n        if(subInfos[br.subHash].perSubscriberBalance[br.buyer]==0) // only add subscriber if not already added\\n           subInfos[br.subHash].subscribers.push(br.buyer);\\n\\n        subInfos[br.subHash].perSubscriberBalance[br.buyer] += (sellerPayout);\\n    }\\n\\n    function requestAgain(bytes32 requestHash) public nonReentrant payable {\\n        User storage buyer = users[msg.sender];\\n        ActiveBid storage ab = buyer.activeBids[buyer.activeBidIds[requestHash]-1];\\n        require(ab.served == true, \\\"ab served\\\"); \\n        // todo some checks those with sellSub\\n        User storage seller = users[ab.seller];\\n        SubRequest storage sr = seller.subRequests[seller.subRequestIds[requestHash]-1];\\n        require(ab.served == true, \\\"sr served\\\"); // must exists\\n\\n        Sub memory s = subscriptions[subscriptionIds[sr.subHash]-1];\\n        require(msg.value==s.price, \\\"!price\\\"); // sent value must be equal to price\\n\\n        sr.served = false;\\n        ab.served = false;\\n        inEscrow += msg.value;\\n    }\\n\\n    // removes active bids from SubRequests of seller and from Active bids of buyer, returns funds to buyer\\n    function removeUserActiveBid(bytes32 requestHash) public {\\n        User storage u = users[msg.sender];\\n        require(u.activeBidIds[requestHash] != 0, \\\"!ab Req\\\");\\n        ActiveBid memory ab = u.activeBids[u.activeBidIds[requestHash]-1];\\n\\n        User storage seller = users[ab.seller];\\n        require(seller.subRequestIds[requestHash] != 0, \\\"!seller Req\\\");\\n\\n        SubRequest storage br = seller.subRequests[seller.subRequestIds[requestHash]-1];\\n        require(subscriptionIds[br.subHash] != 0, \\\"!sub\\\");\\n\\n        Sub memory s = subscriptions[subscriptionIds[br.subHash]-1];\\n\\n        if(br.served == false && ab.served == false)\\n           payable(msg.sender).transfer(s.price);\\n\\n        removeSubRequest(ab.seller, requestHash); // remove from seller \\n        removeActiveBid(msg.sender, requestHash);\\n    }\\n    function removeActiveBid(address user, bytes32 requestHash) private {\\n        User storage u = users[user];\\n        require(u.activeBidIds[requestHash] != 0, \\\"!ab Req\\\");\\n\\n        uint256 removeIndex = u.activeBidIds[requestHash] - 1;       \\n        uint256 lastIndex = u.activeBids.length - 1; // replace removeIndex with last item and pop last item\\n        if (lastIndex != removeIndex) {\\n            u.activeBids[removeIndex] = u.activeBids[lastIndex];\\n            u.activeBidIds[u.activeBids[removeIndex].requestHash] = removeIndex + 1;\\n        }\\n        u.activeBids.pop();\\n        delete u.activeBidIds[requestHash];\\n    }\\n    // remove subRequest from seller needs to return money to bidder \\n    function removeSubRequest(address owner, bytes32 requestHash) private {\\n        User storage u = users[owner]; //msg.sender];\\n        require(u.subRequestIds[requestHash] != 0, \\\"!Req\\\");\\n\\n        uint256 removeIndex = u.subRequestIds[requestHash] - 1;\\n        uint256 lastIndex = u.subRequests.length - 1; // replace removeIndex with last item and pop last item\\n        if (lastIndex != removeIndex) {\\n            u.subRequests[removeIndex] = u.subRequests[lastIndex];\\n            u.subRequestIds[u.subRequests[lastIndex].requestHash] = removeIndex + 1;\\n        }\\n        u.subRequests.pop();\\n        delete u.subRequestIds[requestHash];\\n    }\\n\\n    // user can remove subItem from his list if wishes to do so\\n    /*function removeSubItem(uint256 index) public {\\n        User storage u = users[msg.sender];\\n        require(index < u.subItemHashes.length, \\\"!Index\\\");\\n\\n        uint256 lastIndex = u.subItemHashes.length - 1;\\n        if (lastIndex != index) {\\n            u.subItemHashes[index] = u.subItemHashes[lastIndex];\\n        }\\n        u.subItemHashes.pop();\\n    }*/\\n\\n    function fundsBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }    \\n    function fundsTransfer() onlyOwner public payable {\\n        payable(msg.sender).transfer((address(this).balance-inEscrow));\\n    }\\n    function release(address token, uint amount) public virtual {\\n        SafeERC20.safeTransfer(IERC20(token), owner(), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x3d29f0b7ddfb201328de24335df5f625c1a2996348a81282ab013e278b21e349\",\"license\":\"MIT\"}},\"version\":1}",
        "bytecode": "0x60806040526103e860035566038d7ea4c68000600455600060055560006006553480156200002c57600080fd5b50620000383362000042565b6001805562000092565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61454e80620000a26000396000f3fe6080604052600436106102e85760003560e01c80637de2e5e811610190578063b8fb1bac116100dc578063d547741f11610095578063eed5b6e51161006f578063eed5b6e514610a56578063f071db5a14610a76578063f2fde38b14610a8c578063fbc4fc4414610aac57600080fd5b8063d547741f14610a03578063d76ac1d114610a23578063e91dbcb014610a4357600080fd5b8063b8fb1bac146108f0578063c3b4dde914610912578063c6d05aee1461094b578063cddf64ea14610995578063d250185c146109b5578063d3fbc74c146109d557600080fd5b806391d14854116101495780639bde82dc116101235780639bde82dc14610885578063a217fddf146108a5578063b62fe12f146108ba578063b7391341146108da57600080fd5b806391d148541461082557806392b58bc2146108455780639454932c1461087257600080fd5b80637de2e5e81461071857806380dd0d8e1461074557806383102c2b1461077257806384053229146107a657806388ac2917146107d35780638da5cb5b146107f357600080fd5b80632c3ca35a1161024f578063473b084c1161020857806369fe0e2d116101e257806369fe0e2d146106ad578063703a54b5146106cd578063715018a6146106e357806378ba33c6146106f857600080fd5b8063473b084c1461060c5780634e43603a14610639578063567556a4146106a557600080fd5b80632c3ca35a146104cf5780632d5bbf60146104fc5780632da826431461058c5780632f2ff15d146105b957806336568abe146105d95780633ca684e3146105f957600080fd5b80631a937f08116102a15780631a937f08146103dc5780631f9ef490146103ef578063202cff8a1461041c578063224b6b8c1461042f578063248a9ca31461045c578063254e287b1461048c57600080fd5b806301ffc9a7146102f45780630260f912146103295780630357371d1461034b5780630ccf21561461036b5780630e4999941461038f578063131dbd09146103bc57600080fd5b366102ef57005b600080fd5b34801561030057600080fd5b5061031461030f366004613e6a565b610ad9565b60405190151581526020015b60405180910390f35b34801561033557600080fd5b50610349610344366004613d76565b610b10565b005b34801561035757600080fd5b50610349610366366004613d16565b610e4b565b34801561037757600080fd5b5061038160035481565b604051908152602001610320565b34801561039b57600080fd5b506103816103aa366004613d76565b600f6020526000908152604090205481565b3480156103c857600080fd5b506103496103d7366004613d76565b610e6b565b6103496103ea366004613d76565b610e9a565b3480156103fb57600080fd5b5061040f61040a366004613d76565b61119a565b6040516103209190614379565b61034961042a366004613e09565b611294565b34801561043b57600080fd5b5061044f61044a366004613cd3565b61163a565b604051610320919061414b565b34801561046857600080fd5b50610381610477366004613d76565b60009081526002602052604090206001015490565b34801561049857600080fd5b506103816104a7366004613d8e565b60009182526010602090815260408084206001600160a01b0393909316845291905290205490565b3480156104db57600080fd5b506104ef6104ea366004613d76565b611843565b60405161032091906140b2565b34801561050857600080fd5b5061051c610517366004613d76565b6118a5565b604080519b8c5260208c019a909a526001600160a01b03909816988a01989098526060890195909552608088019390935290151560a087015260c086015263ffffffff90811660e086015290811661010085015290911661012083015261ffff1661014082015261016001610320565b34801561059857600080fd5b506105ac6105a7366004613ced565b611931565b60405161032091906142c4565b3480156105c557600080fd5b506103496105d4366004613d8e565b6119f1565b3480156105e557600080fd5b506103496105f4366004613d8e565b611a1c565b610349610607366004613de8565b611a96565b34801561061857600080fd5b5061062c610627366004613d76565b612033565b60405161032091906142f0565b34801561064557600080fd5b50610685610654366004613cd3565b6001600160a01b03166000908152600760205260409020805460048201546002830154600590930154919390929190565b604080519485526020850193909352918301526060820152608001610320565b6103496120e0565b3480156106b957600080fd5b506103496106c8366004613d76565b612148565b3480156106d957600080fd5b5061038160045481565b3480156106ef57600080fd5b50610349612177565b34801561070457600080fd5b506105ac610713366004613d16565b6121ad565b34801561072457600080fd5b50610738610733366004613d76565b612201565b6040516103209190614065565b34801561075157600080fd5b50610765610760366004613d16565b61226f565b604051610320919061434a565b34801561077e57600080fd5b506103817fc6ff1722ffb1bdb71482122a9b8ca2ca5d75d70ed7d05f5d3174c866c748f82581565b3480156107b257600080fd5b506107c66107c1366004613d16565b612351565b604051610320919061436b565b3480156107df57600080fd5b506103496107ee366004613db9565b612414565b3480156107ff57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610320565b34801561083157600080fd5b50610314610840366004613d8e565b612542565b34801561085157600080fd5b50610865610860366004613cd3565b61256d565b6040516103209190614180565b34801561087e57600080fd5b5047610381565b34801561089157600080fd5b506107c66108a0366004613ced565b61261f565b3480156108b157600080fd5b50610381600081565b3480156108c657600080fd5b5061044f6108d5366004613d76565b61269b565b3480156108e657600080fd5b5061038160065481565b3480156108fc57600080fd5b5061090561288a565b60405161032091906141c2565b34801561091e57600080fd5b5061080d61092d366004613cd3565b6001600160a01b039081166000908152600860205260409020541690565b34801561095757600080fd5b50610349610966366004613cd3565b33600090815260086020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b3480156109a157600080fd5b506104ef6109b0366004613cd3565b612979565b3480156109c157600080fd5b506103816109d0366004613de8565b6129e6565b3480156109e157600080fd5b506109f56109f0366004613d28565b612a07565b60405161032092919061415e565b348015610a0f57600080fd5b50610349610a1e366004613d8e565b612be2565b348015610a2f57600080fd5b50610349610a3e366004613d76565b612c08565b610349610a51366004613de8565b612d4b565b348015610a6257600080fd5b5061040f610a71366004613d76565b6130aa565b348015610a8257600080fd5b5061038160055481565b348015610a9857600080fd5b50610349610aa7366004613cd3565b6130d3565b348015610ab857600080fd5b50610acc610ac7366004613cd3565b61316b565b60405161032091906140ea565b60006001600160e01b03198216637965db0b60e01b1480610b0a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360009081526007602090815260408083208484526003810190925290912054610b6b5760405162461bcd60e51b81526020600482015260076024820152662161622052657160c81b60448201526064015b60405180910390fd5b60008281526003820160205260408120546002830190610b8d90600190614432565b81548110610bab57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060408051606081018252600294909402909101805484526001908101546001600160a01b038116858501819052600160a01b90910460ff1615158584015285526007835281852088865290810190925290922054909250610c465760405162461bcd60e51b815260206004820152600b60248201526a2173656c6c65722052657160a81b6044820152606401610b62565b6000848152600180830160205260408220548391610c6391614432565b81548110610c8157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600402019050600f6000826001015481526020019081526020016000205460001415610ce25760405162461bcd60e51b8152600401610b629060208082526004908201526310b9bab160e11b604082015260600190565b6001818101546000908152600f60205260408120549091600e91610d069190614432565b81548110610d2457634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101608101825260089093029091018054835260018101549383019390935260028301546001600160a01b031690820152600380830154606083015260048301546080830152600583015460ff908116151560a0840152600684015460c084015260079093015463ffffffff80821660e085015264010000000082048116610100850152600160401b82041661012084015261ffff600160601b90910416610140830152840154909250600160a01b900416158015610df457506040840151155b15610e2b576080810151604051339180156108fc02916000818181858888f19350505050158015610e29573d6000803e3d6000fd5b505b610e39846020015187613202565b610e433387613430565b505050505050565b610e6782610e616000546001600160a01b031690565b8361363c565b5050565b6000546001600160a01b03163314610e955760405162461bcd60e51b8152600401610b6290614258565b600455565b60026001541415610ebd5760405162461bcd60e51b8152600401610b629061428d565b60026001818155336000908152600760209081526040808320868452600381019092528220549093919291840191610ef491614432565b81548110610f1257634e487b7160e01b600052603260045260246000fd5b6000918252602090912060016002909202018181015490925060ff600160a01b90910416151514610f715760405162461bcd60e51b81526020600482015260096024820152681858881cd95c9d995960ba1b6044820152606401610b62565b6001808201546001600160a01b0316600090815260076020908152604080832087845280850190925282205490928391610fab9190614432565b81548110610fc957634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020190508260010160149054906101000a900460ff161515600115151461102a5760405162461bcd60e51b81526020600482015260096024820152681cdc881cd95c9d995960ba1b6044820152606401610b62565b6001818101546000908152600f60205260408120549091600e9161104e9190614432565b8154811061106c57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101608101825260089093029091018054835260018101549383019390935260028301546001600160a01b03169082015260038201546060820152600482015460808201819052600583015460ff16151560a0830152600683015460c083015260079092015463ffffffff80821660e084015264010000000082048116610100840152600160401b82041661012083015261ffff600160601b90910416610140820152915034146111575760405162461bcd60e51b815260206004820152600660248201526521707269636560d01b6044820152606401610b62565b60038201805460ff60a01b19908116909155600185018054909116905560068054349190600090611189908490614388565b909155505060018055505050505050565b6111a2613c5b565b6000828152600f6020526040902054600e906111c090600190614432565b815481106111de57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101608101825260089093029091018054835260018101549383019390935260028301546001600160a01b0316908201526003820154606082015260048201546080820152600582015460ff16151560a0820152600682015460c082015260079091015463ffffffff80821660e084015264010000000082048116610100840152600160401b82041661012083015261ffff600160601b9091041661014082015292915050565b6004543410156112cf5760405162461bcd60e51b81526020600482015260066024820152656d696e46656560d01b6044820152606401610b62565b60018161ffff16101580156112ea575061016d8161ffff1611155b6113225760405162461bcd60e51b815260206004820152600960248201526819185e5cd5985b1a5960ba1b6044820152606401610b62565b604080513360208201529081018790526001600160a01b038316606082015260009060800160408051601f1981840301815291815281516020928301206000818152600f909352912054909150156113a85760405162461bcd60e51b815260206004820152600960248201526853756245786973747360b81b6044820152606401610b62565b6000604051806101600160405280838152602001898152602001336001600160a01b0316815260200188815260200187815260200160011515815260200160008152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020018461ffff168152509050600e819080600181540180825580915050600190039060005260206000209060080201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c0820151816006015560e08201518160070160006101000a81548163ffffffff021916908363ffffffff1602179055506101008201518160070160046101000a81548163ffffffff021916908363ffffffff1602179055506101208201518160070160086101000a81548163ffffffff021916908363ffffffff16021790555061014082015181600701600c6101000a81548161ffff021916908361ffff1602179055505050600e80549050600f6000848152602001908152602001600020819055506000600d60008781526020019081526020016000209050806000016001600e805490506115b09190614449565b815460018082018455600093845260208085206004840401805460039094166008026101000a67ffffffffffffffff818102199095169590941693909302939093179091553383526007825260408320600580820180549384018155855292842090910186905581549092349291611629908490614388565b909155505050505050505050505050565b6001600160a01b0381166000908152600760205260408120600401546060919067ffffffffffffffff81111561168057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156116cb57816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161169e5790505b50905060005b815181101561183c576001600160a01b03841660009081526007602052604081206004018054600a92600192600b928690811061171e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020546117429190614432565b8154811061176057634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508282815181106117b757634e487b7160e01b600052603260045260246000fd5b60200260200101819052508181815181106117e257634e487b7160e01b600052603260045260246000fd5b60200260200101516040015142111561182a576000801b82828151811061181957634e487b7160e01b600052603260045260246000fd5b602002602001015160200181815250505b80611834816144b5565b9150506116d1565b5092915050565b6000818152600c602090815260409182902080548351818402810184019094528084526060939283018282801561189957602002820191906000526020600020905b815481526020019060010190808311611885575b50505050509050919050565b600e81815481106118b557600080fd5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600687015460079097015495975093956001600160a01b03909316949193909260ff9091169163ffffffff808216916401000000008104821691600160401b82041690600160601b900461ffff168b565b60408051606081018252600080825260208083018290528284018290526001600160a01b038616825260078152838220858352600381019091529290205490916002019061198190600190614432565b8154811061199f57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160608101825260029390930290910180548352600101546001600160a01b03811693830193909352600160a01b90920460ff161515918101919091529392505050565b600082815260026020526040902060010154611a0d813361368e565b611a1783836136f2565b505050565b6001600160a01b0381163314611a8c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610b62565b610e678282613778565b60026001541415611ab95760405162461bcd60e51b8152600401610b629061428d565b60026001908155336000908152600760209081526040808320868452938401909152902054611b135760405162461bcd60e51b81526020600482015260066024820152654e6f2052657160d01b6044820152606401610b62565b6000838152600180830160205260408220548391611b3091614432565b81548110611b4e57634e487b7160e01b600052603260045260246000fd5b600091825260209091206004909102016003810154909150600160a01b900460ff1615611ba65760405162461bcd60e51b81526020600482015260066024820152651cd95c9d995960d21b6044820152606401610b62565b60018101546000908152600f6020526040902054611bd65760405162461bcd60e51b8152600401610b6290614238565b6001818101546000908152600f60205260408120549091600e91611bfa9190614432565b81548110611c1857634e487b7160e01b600052603260045260246000fd5b6000918252602090912060089091020160028101549091506001600160a01b03163314611c785760405162461bcd60e51b815260206004820152600e60248201526d2737ba1029bab11029b2b63632b960911b6044820152606401610b62565b60038201546001600160a01b03166000908152600760205260409020611cb7604080516060810182526000808252602082018190529181019190915290565b60018401548152602081018690526007830154611ce290600160601b900461ffff16620151806143e8565b611cf19062ffffff1642614388565b6040828101828152600387810154855160208088018051875133818501526001600160a01b03909516858901526060850193909352608084019790975260a0808401929092528551808403909201825260c09092018552805190820120600a80546001808201835560008381528a517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a89388029384015598517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a983015595517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa9091015554818752600b83528587205560048801805480860182559087528287200181905589548652600c825284862080548086018255908752828720018190558c86529187019052918320549192916002860191611e2f91614432565b81548110611e4d57634e487b7160e01b600052603260045260246000fd5b60009182526020822060029190910201600181018054600160a01b60ff60a01b19918216811790925560038a810180549092169092179055546004880154919350611e97916129e6565b90506000818760040154611eab9190614432565b604051909150339082156108fc029083906000818181858888f19350505050158015611edb573d6000803e3d6000fd5b50866004015460066000828254611ef29190614432565b925050819055508160056000828254611f0b9190614388565b9091555050600787018054640100000000900463ffffffff16906004611f30836144d0565b91906101000a81548163ffffffff021916908363ffffffff1602179055505080876006016000828254611f639190614388565b90915550506001880154600090815260106020908152604080832060038c01546001600160a01b03168452909152902054611fe2576001808901546000908152601060209081526040822060038c0154908401805494850181558352912090910180546001600160a01b0319166001600160a01b039092169190911790555b6001880154600090815260106020908152604080832060038c01546001600160a01b031684529091528120805483929061201d908490614388565b9091555050600180555050505050505050505050565b6040805160208082018352606082526000848152600d8252839020835181548084028201860186529281018381529394909391928492918491908401828280156120d057602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841161208b5790505b5050505050815250509050919050565b6000546001600160a01b0316331461210a5760405162461bcd60e51b8152600401610b6290614258565b60065433906108fc9061211d9047614432565b6040518115909202916000818181858888f19350505050158015612145573d6000803e3d6000fd5b50565b6000546001600160a01b031633146121725760405162461bcd60e51b8152600401610b6290614258565b600355565b6000546001600160a01b031633146121a15760405162461bcd60e51b8152600401610b6290614258565b6121ab60006137df565b565b60408051606081018252600080825260208083018290528284018290526001600160a01b0386168252600790529190912060020180548390811061199f57634e487b7160e01b600052603260045260246000fd5b60008181526010602090815260409182902060010180548351818402810184019094528084526060939283018282801561189957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116122465750505050509050919050565b60408051606081018252600080825260208201819052918101919091526001600160a01b03831660009081526007602052604081206004018054600a92600192600b92879081106122d057634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020546122f49190614432565b8154811061231257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905092915050565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b038616825260079052919091208054839081106123b057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a081018252600493909302909101805483526001810154938301939093526002830154908201526003909101546001600160a01b0381166060830152600160a01b900460ff16151560808201529392505050565b6000828152600f602052604090205461243f5760405162461bcd60e51b8152600401610b6290614238565b6000828152600f6020526040812054600e9061245d90600190614432565b8154811061247b57634e487b7160e01b600052603260045260246000fd5b600091825260209091206002600890920201908101549091506001600160a01b031633146124d85760405162461bcd60e51b815260206004820152600a6024820152692737ba1029b2b63632b960b11b6044820152606401610b62565b60078101546004600160401b90910463ffffffff161061252d5760405162461bcd60e51b815260206004820152601060248201526f546f6f206d616e79207265706f72747360801b6044820152606401610b62565b600501805460ff191691151591909117905550565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609492939192909184015b828210156126145760008481526020908190206040805160a081018252600486029092018054835260018082015484860152600282015492840192909252600301546001600160a01b0381166060840152600160a01b900460ff161515608083015290835290920191016125a5565b505050509050919050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526001600160a01b0383166000908152600760209081526040808320858452600180820190935292205461267d9190614432565b815481106123b057634e487b7160e01b600052603260045260246000fd5b6000818152600c60205260408120546060918167ffffffffffffffff8111156126d457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561271f57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816126f25790505b50905060005b82811015612882576000858152600c602052604081208054600a92600192600b928690811061276457634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020546127889190614432565b815481106127a657634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508282815181106127fd57634e487b7160e01b600052603260045260246000fd5b602002602001018190525081818151811061282857634e487b7160e01b600052603260045260246000fd5b602002602001015160400151421115612870576000801b82828151811061285f57634e487b7160e01b600052603260045260246000fd5b602002602001015160200181815250505b8061287a816144b5565b915050612725565b509392505050565b6060600e805480602002602001604051908101604052809291908181526020016000905b82821015612970576000848152602090819020604080516101608101825260088602909201805483526001808201548486015260028201546001600160a01b0316928401929092526003810154606084015260048101546080840152600581015460ff16151560a0840152600681015460c08401526007015463ffffffff80821660e085015264010000000082048116610100850152600160401b820416610120840152600160601b900461ffff1661014083015290835290920191016128ae565b50505050905090565b6001600160a01b03811660009081526007602090815260409182902060050180548351818402810184019094528084526060939283018282801561189957602002820191906000526020600020908154815260200190600101908083116118855750505050509050919050565b6000620186a06129f68484614413565b612a0091906143c8565b9392505050565b606060008267ffffffffffffffff811115612a3257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a7d57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181612a505790505b5091506000905080845b6001600160a01b038716600090815260076020526040902060040154811015612bd8576001600160a01b03871660009081526007602052604081206004018054600a91600191600b91859187908110612af057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154815260200190815260200160002054612b149190614432565b81548110612b3257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090508060400151421015612bc55785831015612bbf5780858481518110612ba057634e487b7160e01b600052603260045260246000fd5b602002602001018190525082612bb5906144b5565b9250819350612bc5565b50612bd8565b5080612bd0816144b5565b915050612a87565b5050935093915050565b600082815260026020526040902060010154612bfe813361368e565b611a178383613778565b612c327fc6ff1722ffb1bdb71482122a9b8ca2ca5d75d70ed7d05f5d3174c866c748f82533612542565b612c6d5760405162461bcd60e51b815260206004820152600c60248201526b2737ba102932b837b93a32b960a11b6044820152606401610b62565b6000818152600f6020526040902054612c985760405162461bcd60e51b8152600401610b6290614238565b6000818152600f6020526040812054600e90612cb690600190614432565b81548110612cd457634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020190508060070160089054906101000a900463ffffffff166001612d0591906143a0565b6007820180546bffffffff00000000000000001916600160401b63ffffffff938416810291909117918290556003910490911610610e6757600501805460ff1916905550565b60026001541415612d6e5760405162461bcd60e51b8152600401610b629061428d565b60026001556000828152600f6020526040902054612d9e5760405162461bcd60e51b8152600401610b6290614238565b6000828152600f6020526040812054600e90612dbc90600190614432565b81548110612dda57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201600581015490915060ff16612e2c5760405162461bcd60e51b8152602060048201526008602482015267496e61637469766560c01b6044820152606401610b62565b80600401543414612e6e5760405162461bcd60e51b815260206004820152600c60248201526b56616c7565213d707269636560a01b6044820152606401610b62565b60028101546001600160a01b0316600090815260076020908152604080832081513381850152808301889052606080820188905283518083039091018152608090910183528051908401208085526001820190935292205415612f005760405162461bcd60e51b815260206004820152600a6024820152695265712065786973747360b01b6044820152606401610b62565b60078301805463ffffffff16906000612f18836144d0565b91906101000a81548163ffffffff021916908363ffffffff16021790555050612f686040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b8481523360608201908152845460208084019182526040808501868152875460018181018a5560008a815285812089516004909402019283559551828201559151600282015594516003909501805460808801511515600160a01b026001600160a81b03199091166001600160a01b0397909716969096179590951790945586548684529387019091528120919091556006805434929061300a908490614388565b90915550506040805160608101825260008183018181528583526002978801546001600160a01b03908116602080860191825233855260078152868520808c01805460018082018355828952848920995191909e029098019788559251968c01805495511515600160a01b026001600160a81b03199096169790941696909617939093179091555495825260039092019091522091909155505080555050565b6130b2613c5b565b600e82815481106111de57634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b031633146130fd5760405162461bcd60e51b8152600401610b6290614258565b6001600160a01b0381166131625760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b62565b612145816137df565b6001600160a01b0381166000908152600760209081526040808320600201805482518185028101850190935280835260609492939192909184015b828210156126145760008481526020908190206040805160608101825260028602909201805483526001908101546001600160a01b03811684860152600160a01b900460ff1615159183019190915290835290920191016131a6565b6001600160a01b038216600090815260076020908152604080832084845260018101909252909120546132605760405162461bcd60e51b8152600401610b62906020808252600490820152632152657160e01b604082015260600190565b60008281526001828101602052604082205461327c9190614432565b825490915060009061329090600190614432565b90508181146133be578260000181815481106132bc57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600402018360000183815481106132ed57634e487b7160e01b600052603260045260246000fd5b6000918252602090912082546004909202019081556001808301548183015560028084015490830155600392830180549390920180546001600160a01b031981166001600160a01b039095169485178255925460ff600160a01b91829004161515026001600160a81b031990931690931791909117909155613370908390614388565b83600101600085600001848154811061339957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060040201600201548152602001908152602001600020819055505b82548390806133dd57634e487b7160e01b600052603160045260246000fd5b60008281526020808220600460001990940193840201828155600181810184905560028201849055600390910180546001600160a81b031916905592909355958652939093019092525050604081205550565b6001600160a01b0382166000908152600760209081526040808320848452600381019092529091205461348f5760405162461bcd60e51b81526020600482015260076024820152662161622052657160c81b6044820152606401610b62565b60008281526003820160205260408120546134ac90600190614432565b60028301549091506000906134c390600190614432565b90508181146135d8578260020181815481106134ef57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020183600201838154811061352057634e487b7160e01b600052603260045260246000fd5b6000918252602090912082546002909202019081556001918201805491830180546001600160a01b031981166001600160a01b039094169384178255915460ff600160a01b91829004161515026001600160a81b031990921690921717905561358a908390614388565b8360030160008560020185815481106135b357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600001548152602001908152602001600020819055505b826002018054806135f957634e487b7160e01b600052603160045260246000fd5b6000828152602080822060026000199094019384020182815560010180546001600160a81b03191690559190925594815260039093019093525060408120555050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611a1790849061382f565b6136988282612542565b610e67576136b0816001600160a01b03166014613901565b6136bb836020613901565b6040516020016136cc929190613ff0565b60408051601f198184030181529082905262461bcd60e51b8252610b6291600401614205565b6136fc8282612542565b610e675760008281526002602090815260408083206001600160a01b03851684529091529020805460ff191660011790556137343390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6137828282612542565b15610e675760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000613884826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ae39092919063ffffffff16565b805190915015611a1757808060200190518101906138a29190613d5a565b611a175760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b62565b60606000613910836002614413565b61391b906002614388565b67ffffffffffffffff81111561394157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561396b576020820181803683370190505b509050600360fc1b8160008151811061399457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106139d157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006139f5846002614413565b613a00906001614388565b90505b6001811115613a94576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613a4257634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110613a6657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93613a8d8161449e565b9050613a03565b508315612a005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b62565b6060613af28484600085613afa565b949350505050565b606082471015613b5b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b62565b843b613ba95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b62565b600080866001600160a01b03168587604051613bc59190613fd4565b60006040518083038185875af1925050503d8060008114613c02576040519150601f19603f3d011682016040523d82523d6000602084013e613c07565b606091505b5091509150613c17828286613c22565b979650505050505050565b60608315613c31575081612a00565b825115613c415782518084602001fd5b8160405162461bcd60e51b8152600401610b629190614205565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b80356001600160a01b0381168114613cce57600080fd5b919050565b600060208284031215613ce4578081fd5b612a0082613cb7565b60008060408385031215613cff578081fd5b613d0883613cb7565b946020939093013593505050565b60008060408385031215613cff578182fd5b600080600060608486031215613d3c578081fd5b613d4584613cb7565b95602085013595506040909401359392505050565b600060208284031215613d6b578081fd5b8151612a008161450a565b600060208284031215613d87578081fd5b5035919050565b60008060408385031215613da0578182fd5b82359150613db060208401613cb7565b90509250929050565b60008060408385031215613dcb578182fd5b823591506020830135613ddd8161450a565b809150509250929050565b60008060408385031215613dfa578182fd5b50508035926020909101359150565b60008060008060008060c08789031215613e21578182fd5b86359550602087013594506040870135935060608701359250613e4660808801613cb7565b915060a087013561ffff81168114613e5c578182fd5b809150509295509295509295565b600060208284031215613e7b578081fd5b81356001600160e01b031981168114612a00578182fd5b6000815180845260208085019450808401835b83811015613edf57613ecc8783518051825260208082015190830152604090810151910152565b6060969096019590820190600101613ea5565b509495945050505050565b8051825260208082015190830152604080820151908301526060808201516001600160a01b0316908301526080908101511515910152565b80518252602081015160208301526040810151613f4a60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a0810151613f7260a084018215159052565b5060c081015160c083015260e0810151613f9460e084018263ffffffff169052565b506101008181015163ffffffff81168483015250506101208181015163ffffffff81168483015250506101408181015161ffff8116848301525b50505050565b60008251613fe6818460208701614472565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614028816017850160208801614472565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614059816028840160208801614472565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b818110156140a65783516001600160a01b031683529284019291840191600101614081565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156140a6578351835292840192918401916001016140ce565b6020808252825182820181905260009190848201906040850190845b818110156140a657614138838551805182526020808201516001600160a01b0316908301526040908101511515910152565b9284019260609290920191600101614106565b602081526000612a006020830184613e92565b6040815260006141716040830185613e92565b90508260208301529392505050565b6020808252825182820181905260009190848201906040850190845b818110156140a6576141af838551613eea565b9284019260a0929092019160010161419c565b6020808252825182820181905260009190848201906040850190845b818110156140a6576141f1838551613f22565b9284019261016092909201916001016141de565b6020815260008251806020840152614224816040850160208701614472565b601f01601f19169190910160400192915050565b60208082526006908201526527379029bab160d11b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815181526020808301516001600160a01b03169082015260408083015115159082015260608101610b0a565b6020808252825182820182905280516040840181905260009291820190839060608601905b8083101561433f57835167ffffffffffffffff168252928401926001929092019190840190614315565b509695505050505050565b81518152602080830151908201526040808301519082015260608101610b0a565b60a08101610b0a8284613eea565b6101608101610b0a8284613f22565b6000821982111561439b5761439b6144f4565b500190565b600063ffffffff8083168185168083038211156143bf576143bf6144f4565b01949350505050565b6000826143e357634e487b7160e01b81526012600452602481fd5b500490565b600062ffffff8083168185168183048111821515161561440a5761440a6144f4565b02949350505050565b600081600019048311821515161561442d5761442d6144f4565b500290565b600082821015614444576144446144f4565b500390565b600067ffffffffffffffff8381169083168181101561446a5761446a6144f4565b039392505050565b60005b8381101561448d578181015183820152602001614475565b83811115613fce5750506000910152565b6000816144ad576144ad6144f4565b506000190190565b60006000198214156144c9576144c96144f4565b5060010190565b600063ffffffff808316818114156144ea576144ea6144f4565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b801515811461214557600080fdfea2646970667358221220125da98c0af8997edf16a2e66a59cbf30f5c8a03dddf9b76fe973eb1d881ac3664736f6c63430008040033",
        "deployedBytecode": "0x6080604052600436106102e85760003560e01c80637de2e5e811610190578063b8fb1bac116100dc578063d547741f11610095578063eed5b6e51161006f578063eed5b6e514610a56578063f071db5a14610a76578063f2fde38b14610a8c578063fbc4fc4414610aac57600080fd5b8063d547741f14610a03578063d76ac1d114610a23578063e91dbcb014610a4357600080fd5b8063b8fb1bac146108f0578063c3b4dde914610912578063c6d05aee1461094b578063cddf64ea14610995578063d250185c146109b5578063d3fbc74c146109d557600080fd5b806391d14854116101495780639bde82dc116101235780639bde82dc14610885578063a217fddf146108a5578063b62fe12f146108ba578063b7391341146108da57600080fd5b806391d148541461082557806392b58bc2146108455780639454932c1461087257600080fd5b80637de2e5e81461071857806380dd0d8e1461074557806383102c2b1461077257806384053229146107a657806388ac2917146107d35780638da5cb5b146107f357600080fd5b80632c3ca35a1161024f578063473b084c1161020857806369fe0e2d116101e257806369fe0e2d146106ad578063703a54b5146106cd578063715018a6146106e357806378ba33c6146106f857600080fd5b8063473b084c1461060c5780634e43603a14610639578063567556a4146106a557600080fd5b80632c3ca35a146104cf5780632d5bbf60146104fc5780632da826431461058c5780632f2ff15d146105b957806336568abe146105d95780633ca684e3146105f957600080fd5b80631a937f08116102a15780631a937f08146103dc5780631f9ef490146103ef578063202cff8a1461041c578063224b6b8c1461042f578063248a9ca31461045c578063254e287b1461048c57600080fd5b806301ffc9a7146102f45780630260f912146103295780630357371d1461034b5780630ccf21561461036b5780630e4999941461038f578063131dbd09146103bc57600080fd5b366102ef57005b600080fd5b34801561030057600080fd5b5061031461030f366004613e6a565b610ad9565b60405190151581526020015b60405180910390f35b34801561033557600080fd5b50610349610344366004613d76565b610b10565b005b34801561035757600080fd5b50610349610366366004613d16565b610e4b565b34801561037757600080fd5b5061038160035481565b604051908152602001610320565b34801561039b57600080fd5b506103816103aa366004613d76565b600f6020526000908152604090205481565b3480156103c857600080fd5b506103496103d7366004613d76565b610e6b565b6103496103ea366004613d76565b610e9a565b3480156103fb57600080fd5b5061040f61040a366004613d76565b61119a565b6040516103209190614379565b61034961042a366004613e09565b611294565b34801561043b57600080fd5b5061044f61044a366004613cd3565b61163a565b604051610320919061414b565b34801561046857600080fd5b50610381610477366004613d76565b60009081526002602052604090206001015490565b34801561049857600080fd5b506103816104a7366004613d8e565b60009182526010602090815260408084206001600160a01b0393909316845291905290205490565b3480156104db57600080fd5b506104ef6104ea366004613d76565b611843565b60405161032091906140b2565b34801561050857600080fd5b5061051c610517366004613d76565b6118a5565b604080519b8c5260208c019a909a526001600160a01b03909816988a01989098526060890195909552608088019390935290151560a087015260c086015263ffffffff90811660e086015290811661010085015290911661012083015261ffff1661014082015261016001610320565b34801561059857600080fd5b506105ac6105a7366004613ced565b611931565b60405161032091906142c4565b3480156105c557600080fd5b506103496105d4366004613d8e565b6119f1565b3480156105e557600080fd5b506103496105f4366004613d8e565b611a1c565b610349610607366004613de8565b611a96565b34801561061857600080fd5b5061062c610627366004613d76565b612033565b60405161032091906142f0565b34801561064557600080fd5b50610685610654366004613cd3565b6001600160a01b03166000908152600760205260409020805460048201546002830154600590930154919390929190565b604080519485526020850193909352918301526060820152608001610320565b6103496120e0565b3480156106b957600080fd5b506103496106c8366004613d76565b612148565b3480156106d957600080fd5b5061038160045481565b3480156106ef57600080fd5b50610349612177565b34801561070457600080fd5b506105ac610713366004613d16565b6121ad565b34801561072457600080fd5b50610738610733366004613d76565b612201565b6040516103209190614065565b34801561075157600080fd5b50610765610760366004613d16565b61226f565b604051610320919061434a565b34801561077e57600080fd5b506103817fc6ff1722ffb1bdb71482122a9b8ca2ca5d75d70ed7d05f5d3174c866c748f82581565b3480156107b257600080fd5b506107c66107c1366004613d16565b612351565b604051610320919061436b565b3480156107df57600080fd5b506103496107ee366004613db9565b612414565b3480156107ff57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610320565b34801561083157600080fd5b50610314610840366004613d8e565b612542565b34801561085157600080fd5b50610865610860366004613cd3565b61256d565b6040516103209190614180565b34801561087e57600080fd5b5047610381565b34801561089157600080fd5b506107c66108a0366004613ced565b61261f565b3480156108b157600080fd5b50610381600081565b3480156108c657600080fd5b5061044f6108d5366004613d76565b61269b565b3480156108e657600080fd5b5061038160065481565b3480156108fc57600080fd5b5061090561288a565b60405161032091906141c2565b34801561091e57600080fd5b5061080d61092d366004613cd3565b6001600160a01b039081166000908152600860205260409020541690565b34801561095757600080fd5b50610349610966366004613cd3565b33600090815260086020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b3480156109a157600080fd5b506104ef6109b0366004613cd3565b612979565b3480156109c157600080fd5b506103816109d0366004613de8565b6129e6565b3480156109e157600080fd5b506109f56109f0366004613d28565b612a07565b60405161032092919061415e565b348015610a0f57600080fd5b50610349610a1e366004613d8e565b612be2565b348015610a2f57600080fd5b50610349610a3e366004613d76565b612c08565b610349610a51366004613de8565b612d4b565b348015610a6257600080fd5b5061040f610a71366004613d76565b6130aa565b348015610a8257600080fd5b5061038160055481565b348015610a9857600080fd5b50610349610aa7366004613cd3565b6130d3565b348015610ab857600080fd5b50610acc610ac7366004613cd3565b61316b565b60405161032091906140ea565b60006001600160e01b03198216637965db0b60e01b1480610b0a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360009081526007602090815260408083208484526003810190925290912054610b6b5760405162461bcd60e51b81526020600482015260076024820152662161622052657160c81b60448201526064015b60405180910390fd5b60008281526003820160205260408120546002830190610b8d90600190614432565b81548110610bab57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060408051606081018252600294909402909101805484526001908101546001600160a01b038116858501819052600160a01b90910460ff1615158584015285526007835281852088865290810190925290922054909250610c465760405162461bcd60e51b815260206004820152600b60248201526a2173656c6c65722052657160a81b6044820152606401610b62565b6000848152600180830160205260408220548391610c6391614432565b81548110610c8157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600402019050600f6000826001015481526020019081526020016000205460001415610ce25760405162461bcd60e51b8152600401610b629060208082526004908201526310b9bab160e11b604082015260600190565b6001818101546000908152600f60205260408120549091600e91610d069190614432565b81548110610d2457634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101608101825260089093029091018054835260018101549383019390935260028301546001600160a01b031690820152600380830154606083015260048301546080830152600583015460ff908116151560a0840152600684015460c084015260079093015463ffffffff80821660e085015264010000000082048116610100850152600160401b82041661012084015261ffff600160601b90910416610140830152840154909250600160a01b900416158015610df457506040840151155b15610e2b576080810151604051339180156108fc02916000818181858888f19350505050158015610e29573d6000803e3d6000fd5b505b610e39846020015187613202565b610e433387613430565b505050505050565b610e6782610e616000546001600160a01b031690565b8361363c565b5050565b6000546001600160a01b03163314610e955760405162461bcd60e51b8152600401610b6290614258565b600455565b60026001541415610ebd5760405162461bcd60e51b8152600401610b629061428d565b60026001818155336000908152600760209081526040808320868452600381019092528220549093919291840191610ef491614432565b81548110610f1257634e487b7160e01b600052603260045260246000fd5b6000918252602090912060016002909202018181015490925060ff600160a01b90910416151514610f715760405162461bcd60e51b81526020600482015260096024820152681858881cd95c9d995960ba1b6044820152606401610b62565b6001808201546001600160a01b0316600090815260076020908152604080832087845280850190925282205490928391610fab9190614432565b81548110610fc957634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020190508260010160149054906101000a900460ff161515600115151461102a5760405162461bcd60e51b81526020600482015260096024820152681cdc881cd95c9d995960ba1b6044820152606401610b62565b6001818101546000908152600f60205260408120549091600e9161104e9190614432565b8154811061106c57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101608101825260089093029091018054835260018101549383019390935260028301546001600160a01b03169082015260038201546060820152600482015460808201819052600583015460ff16151560a0830152600683015460c083015260079092015463ffffffff80821660e084015264010000000082048116610100840152600160401b82041661012083015261ffff600160601b90910416610140820152915034146111575760405162461bcd60e51b815260206004820152600660248201526521707269636560d01b6044820152606401610b62565b60038201805460ff60a01b19908116909155600185018054909116905560068054349190600090611189908490614388565b909155505060018055505050505050565b6111a2613c5b565b6000828152600f6020526040902054600e906111c090600190614432565b815481106111de57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101608101825260089093029091018054835260018101549383019390935260028301546001600160a01b0316908201526003820154606082015260048201546080820152600582015460ff16151560a0820152600682015460c082015260079091015463ffffffff80821660e084015264010000000082048116610100840152600160401b82041661012083015261ffff600160601b9091041661014082015292915050565b6004543410156112cf5760405162461bcd60e51b81526020600482015260066024820152656d696e46656560d01b6044820152606401610b62565b60018161ffff16101580156112ea575061016d8161ffff1611155b6113225760405162461bcd60e51b815260206004820152600960248201526819185e5cd5985b1a5960ba1b6044820152606401610b62565b604080513360208201529081018790526001600160a01b038316606082015260009060800160408051601f1981840301815291815281516020928301206000818152600f909352912054909150156113a85760405162461bcd60e51b815260206004820152600960248201526853756245786973747360b81b6044820152606401610b62565b6000604051806101600160405280838152602001898152602001336001600160a01b0316815260200188815260200187815260200160011515815260200160008152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020018461ffff168152509050600e819080600181540180825580915050600190039060005260206000209060080201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c0820151816006015560e08201518160070160006101000a81548163ffffffff021916908363ffffffff1602179055506101008201518160070160046101000a81548163ffffffff021916908363ffffffff1602179055506101208201518160070160086101000a81548163ffffffff021916908363ffffffff16021790555061014082015181600701600c6101000a81548161ffff021916908361ffff1602179055505050600e80549050600f6000848152602001908152602001600020819055506000600d60008781526020019081526020016000209050806000016001600e805490506115b09190614449565b815460018082018455600093845260208085206004840401805460039094166008026101000a67ffffffffffffffff818102199095169590941693909302939093179091553383526007825260408320600580820180549384018155855292842090910186905581549092349291611629908490614388565b909155505050505050505050505050565b6001600160a01b0381166000908152600760205260408120600401546060919067ffffffffffffffff81111561168057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156116cb57816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161169e5790505b50905060005b815181101561183c576001600160a01b03841660009081526007602052604081206004018054600a92600192600b928690811061171e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020546117429190614432565b8154811061176057634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508282815181106117b757634e487b7160e01b600052603260045260246000fd5b60200260200101819052508181815181106117e257634e487b7160e01b600052603260045260246000fd5b60200260200101516040015142111561182a576000801b82828151811061181957634e487b7160e01b600052603260045260246000fd5b602002602001015160200181815250505b80611834816144b5565b9150506116d1565b5092915050565b6000818152600c602090815260409182902080548351818402810184019094528084526060939283018282801561189957602002820191906000526020600020905b815481526020019060010190808311611885575b50505050509050919050565b600e81815481106118b557600080fd5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600687015460079097015495975093956001600160a01b03909316949193909260ff9091169163ffffffff808216916401000000008104821691600160401b82041690600160601b900461ffff168b565b60408051606081018252600080825260208083018290528284018290526001600160a01b038616825260078152838220858352600381019091529290205490916002019061198190600190614432565b8154811061199f57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160608101825260029390930290910180548352600101546001600160a01b03811693830193909352600160a01b90920460ff161515918101919091529392505050565b600082815260026020526040902060010154611a0d813361368e565b611a1783836136f2565b505050565b6001600160a01b0381163314611a8c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610b62565b610e678282613778565b60026001541415611ab95760405162461bcd60e51b8152600401610b629061428d565b60026001908155336000908152600760209081526040808320868452938401909152902054611b135760405162461bcd60e51b81526020600482015260066024820152654e6f2052657160d01b6044820152606401610b62565b6000838152600180830160205260408220548391611b3091614432565b81548110611b4e57634e487b7160e01b600052603260045260246000fd5b600091825260209091206004909102016003810154909150600160a01b900460ff1615611ba65760405162461bcd60e51b81526020600482015260066024820152651cd95c9d995960d21b6044820152606401610b62565b60018101546000908152600f6020526040902054611bd65760405162461bcd60e51b8152600401610b6290614238565b6001818101546000908152600f60205260408120549091600e91611bfa9190614432565b81548110611c1857634e487b7160e01b600052603260045260246000fd5b6000918252602090912060089091020160028101549091506001600160a01b03163314611c785760405162461bcd60e51b815260206004820152600e60248201526d2737ba1029bab11029b2b63632b960911b6044820152606401610b62565b60038201546001600160a01b03166000908152600760205260409020611cb7604080516060810182526000808252602082018190529181019190915290565b60018401548152602081018690526007830154611ce290600160601b900461ffff16620151806143e8565b611cf19062ffffff1642614388565b6040828101828152600387810154855160208088018051875133818501526001600160a01b03909516858901526060850193909352608084019790975260a0808401929092528551808403909201825260c09092018552805190820120600a80546001808201835560008381528a517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a89388029384015598517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a983015595517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa9091015554818752600b83528587205560048801805480860182559087528287200181905589548652600c825284862080548086018255908752828720018190558c86529187019052918320549192916002860191611e2f91614432565b81548110611e4d57634e487b7160e01b600052603260045260246000fd5b60009182526020822060029190910201600181018054600160a01b60ff60a01b19918216811790925560038a810180549092169092179055546004880154919350611e97916129e6565b90506000818760040154611eab9190614432565b604051909150339082156108fc029083906000818181858888f19350505050158015611edb573d6000803e3d6000fd5b50866004015460066000828254611ef29190614432565b925050819055508160056000828254611f0b9190614388565b9091555050600787018054640100000000900463ffffffff16906004611f30836144d0565b91906101000a81548163ffffffff021916908363ffffffff1602179055505080876006016000828254611f639190614388565b90915550506001880154600090815260106020908152604080832060038c01546001600160a01b03168452909152902054611fe2576001808901546000908152601060209081526040822060038c0154908401805494850181558352912090910180546001600160a01b0319166001600160a01b039092169190911790555b6001880154600090815260106020908152604080832060038c01546001600160a01b031684529091528120805483929061201d908490614388565b9091555050600180555050505050505050505050565b6040805160208082018352606082526000848152600d8252839020835181548084028201860186529281018381529394909391928492918491908401828280156120d057602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841161208b5790505b5050505050815250509050919050565b6000546001600160a01b0316331461210a5760405162461bcd60e51b8152600401610b6290614258565b60065433906108fc9061211d9047614432565b6040518115909202916000818181858888f19350505050158015612145573d6000803e3d6000fd5b50565b6000546001600160a01b031633146121725760405162461bcd60e51b8152600401610b6290614258565b600355565b6000546001600160a01b031633146121a15760405162461bcd60e51b8152600401610b6290614258565b6121ab60006137df565b565b60408051606081018252600080825260208083018290528284018290526001600160a01b0386168252600790529190912060020180548390811061199f57634e487b7160e01b600052603260045260246000fd5b60008181526010602090815260409182902060010180548351818402810184019094528084526060939283018282801561189957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116122465750505050509050919050565b60408051606081018252600080825260208201819052918101919091526001600160a01b03831660009081526007602052604081206004018054600a92600192600b92879081106122d057634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020546122f49190614432565b8154811061231257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905092915050565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b038616825260079052919091208054839081106123b057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a081018252600493909302909101805483526001810154938301939093526002830154908201526003909101546001600160a01b0381166060830152600160a01b900460ff16151560808201529392505050565b6000828152600f602052604090205461243f5760405162461bcd60e51b8152600401610b6290614238565b6000828152600f6020526040812054600e9061245d90600190614432565b8154811061247b57634e487b7160e01b600052603260045260246000fd5b600091825260209091206002600890920201908101549091506001600160a01b031633146124d85760405162461bcd60e51b815260206004820152600a6024820152692737ba1029b2b63632b960b11b6044820152606401610b62565b60078101546004600160401b90910463ffffffff161061252d5760405162461bcd60e51b815260206004820152601060248201526f546f6f206d616e79207265706f72747360801b6044820152606401610b62565b600501805460ff191691151591909117905550565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609492939192909184015b828210156126145760008481526020908190206040805160a081018252600486029092018054835260018082015484860152600282015492840192909252600301546001600160a01b0381166060840152600160a01b900460ff161515608083015290835290920191016125a5565b505050509050919050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526001600160a01b0383166000908152600760209081526040808320858452600180820190935292205461267d9190614432565b815481106123b057634e487b7160e01b600052603260045260246000fd5b6000818152600c60205260408120546060918167ffffffffffffffff8111156126d457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561271f57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816126f25790505b50905060005b82811015612882576000858152600c602052604081208054600a92600192600b928690811061276457634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020546127889190614432565b815481106127a657634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508282815181106127fd57634e487b7160e01b600052603260045260246000fd5b602002602001018190525081818151811061282857634e487b7160e01b600052603260045260246000fd5b602002602001015160400151421115612870576000801b82828151811061285f57634e487b7160e01b600052603260045260246000fd5b602002602001015160200181815250505b8061287a816144b5565b915050612725565b509392505050565b6060600e805480602002602001604051908101604052809291908181526020016000905b82821015612970576000848152602090819020604080516101608101825260088602909201805483526001808201548486015260028201546001600160a01b0316928401929092526003810154606084015260048101546080840152600581015460ff16151560a0840152600681015460c08401526007015463ffffffff80821660e085015264010000000082048116610100850152600160401b820416610120840152600160601b900461ffff1661014083015290835290920191016128ae565b50505050905090565b6001600160a01b03811660009081526007602090815260409182902060050180548351818402810184019094528084526060939283018282801561189957602002820191906000526020600020908154815260200190600101908083116118855750505050509050919050565b6000620186a06129f68484614413565b612a0091906143c8565b9392505050565b606060008267ffffffffffffffff811115612a3257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a7d57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181612a505790505b5091506000905080845b6001600160a01b038716600090815260076020526040902060040154811015612bd8576001600160a01b03871660009081526007602052604081206004018054600a91600191600b91859187908110612af057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154815260200190815260200160002054612b149190614432565b81548110612b3257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090508060400151421015612bc55785831015612bbf5780858481518110612ba057634e487b7160e01b600052603260045260246000fd5b602002602001018190525082612bb5906144b5565b9250819350612bc5565b50612bd8565b5080612bd0816144b5565b915050612a87565b5050935093915050565b600082815260026020526040902060010154612bfe813361368e565b611a178383613778565b612c327fc6ff1722ffb1bdb71482122a9b8ca2ca5d75d70ed7d05f5d3174c866c748f82533612542565b612c6d5760405162461bcd60e51b815260206004820152600c60248201526b2737ba102932b837b93a32b960a11b6044820152606401610b62565b6000818152600f6020526040902054612c985760405162461bcd60e51b8152600401610b6290614238565b6000818152600f6020526040812054600e90612cb690600190614432565b81548110612cd457634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020190508060070160089054906101000a900463ffffffff166001612d0591906143a0565b6007820180546bffffffff00000000000000001916600160401b63ffffffff938416810291909117918290556003910490911610610e6757600501805460ff1916905550565b60026001541415612d6e5760405162461bcd60e51b8152600401610b629061428d565b60026001556000828152600f6020526040902054612d9e5760405162461bcd60e51b8152600401610b6290614238565b6000828152600f6020526040812054600e90612dbc90600190614432565b81548110612dda57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201600581015490915060ff16612e2c5760405162461bcd60e51b8152602060048201526008602482015267496e61637469766560c01b6044820152606401610b62565b80600401543414612e6e5760405162461bcd60e51b815260206004820152600c60248201526b56616c7565213d707269636560a01b6044820152606401610b62565b60028101546001600160a01b0316600090815260076020908152604080832081513381850152808301889052606080820188905283518083039091018152608090910183528051908401208085526001820190935292205415612f005760405162461bcd60e51b815260206004820152600a6024820152695265712065786973747360b01b6044820152606401610b62565b60078301805463ffffffff16906000612f18836144d0565b91906101000a81548163ffffffff021916908363ffffffff16021790555050612f686040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b8481523360608201908152845460208084019182526040808501868152875460018181018a5560008a815285812089516004909402019283559551828201559151600282015594516003909501805460808801511515600160a01b026001600160a81b03199091166001600160a01b0397909716969096179590951790945586548684529387019091528120919091556006805434929061300a908490614388565b90915550506040805160608101825260008183018181528583526002978801546001600160a01b03908116602080860191825233855260078152868520808c01805460018082018355828952848920995191909e029098019788559251968c01805495511515600160a01b026001600160a81b03199096169790941696909617939093179091555495825260039092019091522091909155505080555050565b6130b2613c5b565b600e82815481106111de57634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b031633146130fd5760405162461bcd60e51b8152600401610b6290614258565b6001600160a01b0381166131625760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b62565b612145816137df565b6001600160a01b0381166000908152600760209081526040808320600201805482518185028101850190935280835260609492939192909184015b828210156126145760008481526020908190206040805160608101825260028602909201805483526001908101546001600160a01b03811684860152600160a01b900460ff1615159183019190915290835290920191016131a6565b6001600160a01b038216600090815260076020908152604080832084845260018101909252909120546132605760405162461bcd60e51b8152600401610b62906020808252600490820152632152657160e01b604082015260600190565b60008281526001828101602052604082205461327c9190614432565b825490915060009061329090600190614432565b90508181146133be578260000181815481106132bc57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600402018360000183815481106132ed57634e487b7160e01b600052603260045260246000fd5b6000918252602090912082546004909202019081556001808301548183015560028084015490830155600392830180549390920180546001600160a01b031981166001600160a01b039095169485178255925460ff600160a01b91829004161515026001600160a81b031990931690931791909117909155613370908390614388565b83600101600085600001848154811061339957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060040201600201548152602001908152602001600020819055505b82548390806133dd57634e487b7160e01b600052603160045260246000fd5b60008281526020808220600460001990940193840201828155600181810184905560028201849055600390910180546001600160a81b031916905592909355958652939093019092525050604081205550565b6001600160a01b0382166000908152600760209081526040808320848452600381019092529091205461348f5760405162461bcd60e51b81526020600482015260076024820152662161622052657160c81b6044820152606401610b62565b60008281526003820160205260408120546134ac90600190614432565b60028301549091506000906134c390600190614432565b90508181146135d8578260020181815481106134ef57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020183600201838154811061352057634e487b7160e01b600052603260045260246000fd5b6000918252602090912082546002909202019081556001918201805491830180546001600160a01b031981166001600160a01b039094169384178255915460ff600160a01b91829004161515026001600160a81b031990921690921717905561358a908390614388565b8360030160008560020185815481106135b357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600001548152602001908152602001600020819055505b826002018054806135f957634e487b7160e01b600052603160045260246000fd5b6000828152602080822060026000199094019384020182815560010180546001600160a81b03191690559190925594815260039093019093525060408120555050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611a1790849061382f565b6136988282612542565b610e67576136b0816001600160a01b03166014613901565b6136bb836020613901565b6040516020016136cc929190613ff0565b60408051601f198184030181529082905262461bcd60e51b8252610b6291600401614205565b6136fc8282612542565b610e675760008281526002602090815260408083206001600160a01b03851684529091529020805460ff191660011790556137343390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6137828282612542565b15610e675760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000613884826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ae39092919063ffffffff16565b805190915015611a1757808060200190518101906138a29190613d5a565b611a175760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b62565b60606000613910836002614413565b61391b906002614388565b67ffffffffffffffff81111561394157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561396b576020820181803683370190505b509050600360fc1b8160008151811061399457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106139d157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006139f5846002614413565b613a00906001614388565b90505b6001811115613a94576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613a4257634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110613a6657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93613a8d8161449e565b9050613a03565b508315612a005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b62565b6060613af28484600085613afa565b949350505050565b606082471015613b5b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b62565b843b613ba95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b62565b600080866001600160a01b03168587604051613bc59190613fd4565b60006040518083038185875af1925050503d8060008114613c02576040519150601f19603f3d011682016040523d82523d6000602084013e613c07565b606091505b5091509150613c17828286613c22565b979650505050505050565b60608315613c31575081612a00565b825115613c415782518084602001fd5b8160405162461bcd60e51b8152600401610b629190614205565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b80356001600160a01b0381168114613cce57600080fd5b919050565b600060208284031215613ce4578081fd5b612a0082613cb7565b60008060408385031215613cff578081fd5b613d0883613cb7565b946020939093013593505050565b60008060408385031215613cff578182fd5b600080600060608486031215613d3c578081fd5b613d4584613cb7565b95602085013595506040909401359392505050565b600060208284031215613d6b578081fd5b8151612a008161450a565b600060208284031215613d87578081fd5b5035919050565b60008060408385031215613da0578182fd5b82359150613db060208401613cb7565b90509250929050565b60008060408385031215613dcb578182fd5b823591506020830135613ddd8161450a565b809150509250929050565b60008060408385031215613dfa578182fd5b50508035926020909101359150565b60008060008060008060c08789031215613e21578182fd5b86359550602087013594506040870135935060608701359250613e4660808801613cb7565b915060a087013561ffff81168114613e5c578182fd5b809150509295509295509295565b600060208284031215613e7b578081fd5b81356001600160e01b031981168114612a00578182fd5b6000815180845260208085019450808401835b83811015613edf57613ecc8783518051825260208082015190830152604090810151910152565b6060969096019590820190600101613ea5565b509495945050505050565b8051825260208082015190830152604080820151908301526060808201516001600160a01b0316908301526080908101511515910152565b80518252602081015160208301526040810151613f4a60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a0810151613f7260a084018215159052565b5060c081015160c083015260e0810151613f9460e084018263ffffffff169052565b506101008181015163ffffffff81168483015250506101208181015163ffffffff81168483015250506101408181015161ffff8116848301525b50505050565b60008251613fe6818460208701614472565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614028816017850160208801614472565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614059816028840160208801614472565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b818110156140a65783516001600160a01b031683529284019291840191600101614081565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156140a6578351835292840192918401916001016140ce565b6020808252825182820181905260009190848201906040850190845b818110156140a657614138838551805182526020808201516001600160a01b0316908301526040908101511515910152565b9284019260609290920191600101614106565b602081526000612a006020830184613e92565b6040815260006141716040830185613e92565b90508260208301529392505050565b6020808252825182820181905260009190848201906040850190845b818110156140a6576141af838551613eea565b9284019260a0929092019160010161419c565b6020808252825182820181905260009190848201906040850190845b818110156140a6576141f1838551613f22565b9284019261016092909201916001016141de565b6020815260008251806020840152614224816040850160208701614472565b601f01601f19169190910160400192915050565b60208082526006908201526527379029bab160d11b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815181526020808301516001600160a01b03169082015260408083015115159082015260608101610b0a565b6020808252825182820182905280516040840181905260009291820190839060608601905b8083101561433f57835167ffffffffffffffff168252928401926001929092019190840190614315565b509695505050505050565b81518152602080830151908201526040808301519082015260608101610b0a565b60a08101610b0a8284613eea565b6101608101610b0a8284613f22565b6000821982111561439b5761439b6144f4565b500190565b600063ffffffff8083168185168083038211156143bf576143bf6144f4565b01949350505050565b6000826143e357634e487b7160e01b81526012600452602481fd5b500490565b600062ffffff8083168185168183048111821515161561440a5761440a6144f4565b02949350505050565b600081600019048311821515161561442d5761442d6144f4565b500290565b600082821015614444576144446144f4565b500390565b600067ffffffffffffffff8381169083168181101561446a5761446a6144f4565b039392505050565b60005b8381101561448d578181015183820152602001614475565b83811115613fce5750506000910152565b6000816144ad576144ad6144f4565b506000190190565b60006000198214156144c9576144c96144f4565b5060010190565b600063ffffffff808316818114156144ea576144ea6144f4565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b801515811461214557600080fdfea2646970667358221220125da98c0af8997edf16a2e66a59cbf30f5c8a03dddf9b76fe973eb1d881ac3664736f6c63430008040033",
        "devdoc": {
          "kind": "dev",
          "methods": {
            "getRoleAdmin(bytes32)": {
              "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
            },
            "grantRole(bytes32,address)": {
              "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
            },
            "hasRole(bytes32,address)": {
              "details": "Returns `true` if `account` has been granted `role`."
            },
            "owner()": {
              "details": "Returns the address of the current owner."
            },
            "renounceOwnership()": {
              "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
            },
            "renounceRole(bytes32,address)": {
              "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
            },
            "revokeRole(bytes32,address)": {
              "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
            },
            "supportsInterface(bytes4)": {
              "details": "See {IERC165-supportsInterface}."
            },
            "transferOwnership(address)": {
              "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
          },
          "version": 1
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        },
        "storageLayout": {
          "storage": [
            {
              "astId": 389,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address"
            },
            {
              "astId": 497,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256"
            },
            {
              "astId": 24,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "_roles",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
            },
            {
              "astId": 1404,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "marketFee",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256"
            },
            {
              "astId": 1407,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "minListingFee",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256"
            },
            {
              "astId": 1410,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "feesCollected",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256"
            },
            {
              "astId": 1413,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "inEscrow",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256"
            },
            {
              "astId": 1471,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "users",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(User)1466_storage)"
            },
            {
              "astId": 1475,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "userToPortable",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_address)"
            },
            {
              "astId": 1479,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "nameHashToUser",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_bytes32,t_address)"
            },
            {
              "astId": 1483,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "allSubItems",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_struct(SubItem)1443_storage)dyn_storage"
            },
            {
              "astId": 1487,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "allSubItemIds",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_bytes32,t_uint256)"
            },
            {
              "astId": 1492,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "nameHashToSubItems",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)"
            },
            {
              "astId": 1501,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "categories",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_bytes32,t_struct(Category)1496_storage)"
            },
            {
              "astId": 1528,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "subscriptions",
              "offset": 0,
              "slot": "14",
              "type": "t_array(t_struct(Sub)1524_storage)dyn_storage"
            },
            {
              "astId": 1532,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "subscriptionIds",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_bytes32,t_uint256)"
            },
            {
              "astId": 1545,
              "contract": "contracts/DataHub.sol:DataHub",
              "label": "subInfos",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_bytes32,t_struct(SubInfo)1540_storage)"
            }
          ],
          "types": {
            "t_address": {
              "encoding": "inplace",
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "base": "t_address",
              "encoding": "dynamic_array",
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_bytes32)dyn_storage": {
              "base": "t_bytes32",
              "encoding": "dynamic_array",
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(ActiveBid)1436_storage)dyn_storage": {
              "base": "t_struct(ActiveBid)1436_storage",
              "encoding": "dynamic_array",
              "label": "struct DataHub.ActiveBid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Sub)1524_storage)dyn_storage": {
              "base": "t_struct(Sub)1524_storage",
              "encoding": "dynamic_array",
              "label": "struct DataHub.Sub[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(SubItem)1443_storage)dyn_storage": {
              "base": "t_struct(SubItem)1443_storage",
              "encoding": "dynamic_array",
              "label": "struct DataHub.SubItem[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(SubRequest)1429_storage)dyn_storage": {
              "base": "t_struct(SubRequest)1429_storage",
              "encoding": "dynamic_array",
              "label": "struct DataHub.SubRequest[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint64)dyn_storage": {
              "base": "t_uint64",
              "encoding": "dynamic_array",
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "encoding": "inplace",
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "encoding": "inplace",
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => address)",
              "numberOfBytes": "32",
              "value": "t_address"
            },
            "t_mapping(t_address,t_bool)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => bool)",
              "numberOfBytes": "32",
              "value": "t_bool"
            },
            "t_mapping(t_address,t_struct(User)1466_storage)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => struct DataHub.User)",
              "numberOfBytes": "32",
              "value": "t_struct(User)1466_storage"
            },
            "t_mapping(t_address,t_uint256)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32",
              "value": "t_uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "encoding": "mapping",
              "key": "t_bytes32",
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32",
              "value": "t_address"
            },
            "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)": {
              "encoding": "mapping",
              "key": "t_bytes32",
              "label": "mapping(bytes32 => bytes32[])",
              "numberOfBytes": "32",
              "value": "t_array(t_bytes32)dyn_storage"
            },
            "t_mapping(t_bytes32,t_struct(Category)1496_storage)": {
              "encoding": "mapping",
              "key": "t_bytes32",
              "label": "mapping(bytes32 => struct DataHub.Category)",
              "numberOfBytes": "32",
              "value": "t_struct(Category)1496_storage"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "encoding": "mapping",
              "key": "t_bytes32",
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32",
              "value": "t_struct(RoleData)19_storage"
            },
            "t_mapping(t_bytes32,t_struct(SubInfo)1540_storage)": {
              "encoding": "mapping",
              "key": "t_bytes32",
              "label": "mapping(bytes32 => struct DataHub.SubInfo)",
              "numberOfBytes": "32",
              "value": "t_struct(SubInfo)1540_storage"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "encoding": "mapping",
              "key": "t_bytes32",
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32",
              "value": "t_uint256"
            },
            "t_struct(ActiveBid)1436_storage": {
              "encoding": "inplace",
              "label": "struct DataHub.ActiveBid",
              "members": [
                {
                  "astId": 1431,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "requestHash",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_bytes32"
                },
                {
                  "astId": 1433,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "seller",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_address"
                },
                {
                  "astId": 1435,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "served",
                  "offset": 20,
                  "slot": "1",
                  "type": "t_bool"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Category)1496_storage": {
              "encoding": "inplace",
              "label": "struct DataHub.Category",
              "members": [
                {
                  "astId": 1495,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "subIdxs",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_array(t_uint64)dyn_storage"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "encoding": "inplace",
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "astId": 16,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "members",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "astId": 18,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "adminRole",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_bytes32"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Sub)1524_storage": {
              "encoding": "inplace",
              "label": "struct DataHub.Sub",
              "members": [
                {
                  "astId": 1503,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "subHash",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_bytes32"
                },
                {
                  "astId": 1505,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "fdpSellerNameHash",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_bytes32"
                },
                {
                  "astId": 1507,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "seller",
                  "offset": 0,
                  "slot": "2",
                  "type": "t_address"
                },
                {
                  "astId": 1509,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "swarmLocation",
                  "offset": 0,
                  "slot": "3",
                  "type": "t_bytes32"
                },
                {
                  "astId": 1511,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "price",
                  "offset": 0,
                  "slot": "4",
                  "type": "t_uint256"
                },
                {
                  "astId": 1513,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "active",
                  "offset": 0,
                  "slot": "5",
                  "type": "t_bool"
                },
                {
                  "astId": 1515,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "earned",
                  "offset": 0,
                  "slot": "6",
                  "type": "t_uint256"
                },
                {
                  "astId": 1517,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "bids",
                  "offset": 0,
                  "slot": "7",
                  "type": "t_uint32"
                },
                {
                  "astId": 1519,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "sells",
                  "offset": 4,
                  "slot": "7",
                  "type": "t_uint32"
                },
                {
                  "astId": 1521,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "reports",
                  "offset": 8,
                  "slot": "7",
                  "type": "t_uint32"
                },
                {
                  "astId": 1523,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "daysValid",
                  "offset": 12,
                  "slot": "7",
                  "type": "t_uint16"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_struct(SubInfo)1540_storage": {
              "encoding": "inplace",
              "label": "struct DataHub.SubInfo",
              "members": [
                {
                  "astId": 1536,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "perSubscriberBalance",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "astId": 1539,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "subscribers",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_array(t_address)dyn_storage"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(SubItem)1443_storage": {
              "encoding": "inplace",
              "label": "struct DataHub.SubItem",
              "members": [
                {
                  "astId": 1438,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "subHash",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_bytes32"
                },
                {
                  "astId": 1440,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "unlockKeyLocation",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_bytes32"
                },
                {
                  "astId": 1442,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "validTill",
                  "offset": 0,
                  "slot": "2",
                  "type": "t_uint256"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(SubRequest)1429_storage": {
              "encoding": "inplace",
              "label": "struct DataHub.SubRequest",
              "members": [
                {
                  "astId": 1420,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "fdpBuyerNameHash",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_bytes32"
                },
                {
                  "astId": 1422,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "subHash",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_bytes32"
                },
                {
                  "astId": 1424,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "requestHash",
                  "offset": 0,
                  "slot": "2",
                  "type": "t_bytes32"
                },
                {
                  "astId": 1426,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "buyer",
                  "offset": 0,
                  "slot": "3",
                  "type": "t_address"
                },
                {
                  "astId": 1428,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "served",
                  "offset": 20,
                  "slot": "3",
                  "type": "t_bool"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(User)1466_storage": {
              "encoding": "inplace",
              "label": "struct DataHub.User",
              "members": [
                {
                  "astId": 1447,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "subRequests",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_array(t_struct(SubRequest)1429_storage)dyn_storage"
                },
                {
                  "astId": 1451,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "subRequestIds",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                },
                {
                  "astId": 1455,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "activeBids",
                  "offset": 0,
                  "slot": "2",
                  "type": "t_array(t_struct(ActiveBid)1436_storage)dyn_storage"
                },
                {
                  "astId": 1459,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "activeBidIds",
                  "offset": 0,
                  "slot": "3",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                },
                {
                  "astId": 1462,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "subItemHashes",
                  "offset": 0,
                  "slot": "4",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "astId": 1465,
                  "contract": "contracts/DataHub.sol:DataHub",
                  "label": "listedSubs",
                  "offset": 0,
                  "slot": "5",
                  "type": "t_array(t_bytes32)dyn_storage"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint16": {
              "encoding": "inplace",
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "encoding": "inplace",
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "encoding": "inplace",
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "encoding": "inplace",
              "label": "uint64",
              "numberOfBytes": "8"
            }
          }
        }
      },
      "Calendar": {
        "address": "0x74cBc80eAe985292D24eb97B39837c67500b23B9",
        "abi": [
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_time",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_duration",
                "type": "uint64"
              },
              {
                "internalType": "bytes32",
                "name": "_swarmLocation",
                "type": "bytes32"
              }
            ],
            "name": "addEvent",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_address",
                "type": "address"
              },
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_time",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_duration",
                "type": "uint64"
              },
              {
                "internalType": "bytes32",
                "name": "_swarmLocation",
                "type": "bytes32"
              }
            ],
            "name": "addEventForAddress",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_time",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_duration",
                "type": "uint64"
              },
              {
                "internalType": "bytes32",
                "name": "_swarmLocation",
                "type": "bytes32"
              },
              {
                "internalType": "address[]",
                "name": "_participants",
                "type": "address[]"
              }
            ],
            "name": "addInvite",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_address",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "allow",
                "type": "bool"
              }
            ],
            "name": "allowAddress",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_index",
                "type": "uint64"
              }
            ],
            "name": "confirmInvite",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              }
            ],
            "name": "getEventsByDate",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "location",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint64",
                    "name": "time",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "duration",
                    "type": "uint64"
                  }
                ],
                "internalType": "struct Calendar.Event[]",
                "name": "",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "uint64[]",
                "name": "_dates",
                "type": "uint64[]"
              }
            ],
            "name": "getEventsByDates",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "location",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint64",
                    "name": "time",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "duration",
                    "type": "uint64"
                  }
                ],
                "internalType": "struct Calendar.Event[]",
                "name": "",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_duration",
                "type": "uint64"
              }
            ],
            "name": "getFreeSlot",
            "outputs": [
              {
                "internalType": "uint64",
                "name": "",
                "type": "uint64"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              }
            ],
            "name": "getInvitesByDate",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "creator",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "location",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint64",
                    "name": "time",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "duration",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "date",
                    "type": "uint64"
                  },
                  {
                    "internalType": "address[]",
                    "name": "participants",
                    "type": "address[]"
                  },
                  {
                    "internalType": "address[]",
                    "name": "accepted",
                    "type": "address[]"
                  }
                ],
                "internalType": "struct Calendar.Invite[]",
                "name": "",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "uint64[]",
                "name": "_dates",
                "type": "uint64[]"
              }
            ],
            "name": "getInvitesByDates",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "creator",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "location",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint64",
                    "name": "time",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "duration",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "date",
                    "type": "uint64"
                  },
                  {
                    "internalType": "address[]",
                    "name": "participants",
                    "type": "address[]"
                  },
                  {
                    "internalType": "address[]",
                    "name": "accepted",
                    "type": "address[]"
                  }
                ],
                "internalType": "struct Calendar.Invite[]",
                "name": "",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_time",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_duration",
                "type": "uint64"
              }
            ],
            "name": "isOwnerAvailable",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_index",
                "type": "uint64"
              }
            ],
            "name": "removeEventByIndex",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_index",
                "type": "uint64"
              }
            ],
            "name": "removeInviteByIndex",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_index",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_newTime",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_newDuration",
                "type": "uint64"
              },
              {
                "internalType": "bytes32",
                "name": "_swarmLocation",
                "type": "bytes32"
              }
            ],
            "name": "updateEventsByDate",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "location",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint64",
                    "name": "time",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "duration",
                    "type": "uint64"
                  }
                ],
                "internalType": "struct Calendar.Event",
                "name": "",
                "type": "tuple"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "transactionHash": "0x10504cee4b9040ed643ab2c704d43d6cad6ed2e07de5f01431e5d843441a50f3",
        "receipt": {
          "to": null,
          "from": "0xd27ffA0e47Fca8D3E757B4d2C408169859B8c419",
          "contractAddress": "0x74cBc80eAe985292D24eb97B39837c67500b23B9",
          "transactionIndex": 66,
          "gasUsed": "1975517",
          "logsBloom": "0x
          "blockHash": "0xc7071f1146fe72231cd2023c382b7610783bbd9b6ed136bc1577b0e82e16c95e",
          "transactionHash": "0x10504cee4b9040ed643ab2c704d43d6cad6ed2e07de5f01431e5d843441a50f3",
          "logs": [],
          "blockNumber": 8863103,
          "cumulativeGasUsed": "15472574",
          "status": 1,
          "byzantium": true
        },
        "args": [],
        "numDeployments": 1,
        "solcInputHash": "73e833b4efab7caac102c90ac4c374a2",
        "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"addEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"addEventForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"addInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"allowAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_index\",\"type\":\"uint64\"}],\"name\":\"confirmInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"}],\"name\":\"getEventsByDate\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"internalType\":\"struct Calendar.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_dates\",\"type\":\"uint64[]\"}],\"name\":\"getEventsByDates\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"internalType\":\"struct Calendar.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"getFreeSlot\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"}],\"name\":\"getInvitesByDate\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"date\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"accepted\",\"type\":\"address[]\"}],\"internalType\":\"struct Calendar.Invite[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_dates\",\"type\":\"uint64[]\"}],\"name\":\"getInvitesByDates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"date\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"accepted\",\"type\":\"address[]\"}],\"internalType\":\"struct Calendar.Invite[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"isOwnerAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_index\",\"type\":\"uint64\"}],\"name\":\"removeEventByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_index\",\"type\":\"uint64\"}],\"name\":\"removeInviteByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_newTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_newDuration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"updateEventsByDate\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"internalType\":\"struct Calendar.Event\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Calendar.sol\":\"Calendar\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Calendar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// written by @tfius \\r\\npragma solidity ^0.8.0;\\r\\n/*\\r\\n Expected JSON format for event\\r\\n   [{\\r\\n        \\\"eventName\\\": \\\"string\\\",\\r\\n        \\\"description\\\": \\\"string\\\",\\r\\n        \\\"category\\\": \\\"string\\\",\\r\\n        \\\"location\\\": \\\"string\\\",\\r\\n        \\\"participants\\\": [\\\"string\\\"],\\r\\n        \\\"date\\\": \\\"uint64\\\",\\r\\n        \\\"duration\\\": \\\"uint64\\\",\\r\\n        \\\"time\\\": \\\"uint64\\\"\\r\\n    }]\\r\\n*/ \\r\\n/*\\r\\nstruct Event {\\r\\n        bytes eventName;\\r\\n        bytes description;\\r\\n        bytes category;\\r\\n        bytes32 location;\\r\\n        bytes32[] participants;\\r\\n        uint64 duration;\\r\\n        uint64 date;\\r\\n        uint64 time;\\r\\n    }\\r\\n*/ \\r\\n\\r\\ncontract Calendar {\\r\\n    \\r\\n    struct Event {\\r\\n        bytes32 location; // swarm location\\r\\n        uint64 time;\\r\\n        uint64 duration;       \\r\\n    }\\r\\n    struct Invite {\\r\\n        address creator;\\r\\n        bytes32 location; // swarm location\\r\\n        uint64 time;\\r\\n        uint64 duration;\\r\\n        uint64 date;\\r\\n        address[] participants;\\r\\n        address[] accepted;\\r\\n    }\\r\\n    \\r\\n    Event[] private _events;\\r\\n    mapping(address => mapping(uint64 => uint256[])) private _userEvents; // user to date to event index\\r\\n\\r\\n    Invite[] private _invites;\\r\\n    mapping(address => mapping(uint64 => uint256[])) private _userInvites; // user to date to invite index\\r\\n\\r\\n    mapping(address => mapping(address => bool)) private _userAllowList; // allow list per address -> address -> bool\\r\\n    \\r\\n    /*  1. The function takes 4 parameters: date, time, duration, swarmLocation.\\r\\n        2. The first line creates a new Event struct and stores it in the memory variable e. The parameters are passed to the Event struct constructor.\\r\\n        3. The second line pushes the newly created Event struct to the _events array.\\r\\n        4. The third line pushes the index of the newly created Event struct to the _userEvents mapping. */\\r\\n    function addEvent(uint64 _date, uint64 _time, uint64 _duration, bytes32 _swarmLocation) public {\\r\\n        Event memory e = Event(_swarmLocation, _time, _duration);\\r\\n        _events.push(e);\\r\\n        _userEvents[msg.sender][_date].push(_events.length);\\r\\n    }\\r\\n\\r\\n    function allowAddress(address _address, bool allow) public {\\r\\n        _userAllowList[msg.sender][_address] = allow;\\r\\n    }\\r\\n\\r\\n    function addEventForAddress(address _address, uint64 _date, uint64 _time, uint64 _duration, bytes32 _swarmLocation) public {\\r\\n        require(_userAllowList[_address][msg.sender], \\\"Not allowed to add event\\\");\\r\\n        require(_duration >= 900, \\\"Duration too small > 900s\\\");\\r\\n\\r\\n        //uint256 _end = _time + _duration;\\r\\n        //require(_end % 86400 == _time % 86400, \\\"Event must start and end on the same day\\\");\\r\\n\\r\\n        Event memory e = Event(_swarmLocation, _time, _duration);\\r\\n        _events.push(e);\\r\\n        _userEvents[_address][_date].push(_events.length);\\r\\n    }\\r\\n    /* 1. We use the keyword 'require' to check if the index is valid. \\r\\n       2. We use the keyword 'storage' to indicate that we are modifying the existing event. \\r\\n       3. We use the keyword 'memory' to indicate that we are returning a copy of the event.\\r\\n    */\\r\\n    function updateEventsByDate(uint64 _date, uint64 _index, uint64 _newTime, uint64 _newDuration, bytes32 _swarmLocation) public returns (Event memory) {\\r\\n        require(_index < _userEvents[msg.sender][_date].length, \\\"Invalid index\\\");\\r\\n        Event storage e =  _events[_userEvents[msg.sender][_date][_index]];\\r\\n        e.time = _newTime;\\r\\n        e.duration = _newDuration;\\r\\n        e.location = _swarmLocation;\\r\\n        return e;\\r\\n    }\\r\\n    /* 1. We require that the index is less than the length of the array. Otherwise we will get an out-of-bounds error.\\r\\n       2. We loop over the array and shift the elements to the left. We start from the index that we want to remove and end at the second-to-last element.\\r\\n       3. We then use the pop function to remove the last element of the array.\\r\\n    */\\r\\n    function removeEventByIndex(uint64 _date, uint64 _index) public  {\\r\\n        require(_index < _userEvents[msg.sender][_date].length, \\\"Invalid index\\\");\\r\\n        \\r\\n        for (uint i = _index; i < _userEvents[msg.sender][_date].length - 1; i++) {\\r\\n            _userEvents[msg.sender][_date][i] =_userEvents[msg.sender][_date][i+1];\\r\\n        }\\r\\n        _userEvents[msg.sender][_date].pop();\\r\\n    }\\r\\n\\r\\n    /*  1. The first line creates an array of type Event and sets it's size to the length of the array of event IDs for the user and date passed in.\\r\\n        2. The for loop iterates through the array of event IDs and sets the array of events to the actual event data.\\r\\n        3. The function then returns the array of events. */\\r\\n    function getEventsByDate(address owner, uint64 _date) public view returns (Event[] memory) {\\r\\n        Event[] memory events = new Event[](_userEvents[owner][_date].length);\\r\\n        for (uint256 i=0; i < events.length; i++) {\\r\\n            events[i] = _events[_userEvents[owner][_date][i]-1];\\r\\n        }\\r\\n        return events;\\r\\n    }\\r\\n\\r\\n    /*  1. _dates is an array of timestamps\\r\\n        2. We get the length of the array and loop through it\\r\\n        3. For each date we get the length of the events array and we add it to a variable called totalLength\\r\\n        4. We initialize the c variable to 0\\r\\n        5. We initialize an array of events with the length of totalLength\\r\\n        6. We loop through the _dates array again\\r\\n        7. For each date we loop through the array of events for that date\\r\\n        8. We set the events array at index c to the event at index j\\r\\n        9. We increment c by 1\\r\\n        10. We return the events array */\\r\\n    function getEventsByDates(address owner, uint64[] memory _dates) public view returns (Event[] memory) {\\r\\n        uint totalLength = 0;\\r\\n        for(uint i = 0; i < _dates.length; i++) {\\r\\n            totalLength += _userEvents[owner][_dates[i]].length;\\r\\n        }\\r\\n        uint c = 0;\\r\\n        Event[] memory events = new Event[](totalLength);\\r\\n        for(uint i = 0; i < _dates.length; i++) {\\r\\n            for (uint64 j=0; j < _userEvents[owner][_dates[i]].length; j++) {\\r\\n                events[c] = _events[_userEvents[owner][_dates[i]][j]-1];\\r\\n                c++;\\r\\n            }\\r\\n        }\\r\\n        return events;\\r\\n    }\\r\\n\\r\\n    function isOwnerAvailable(address owner, uint64 _date, uint64 _time, uint64 _duration) public view returns (bool) {\\r\\n        Event[] memory events = getEventsByDate(owner, _date);\\r\\n        for (uint256 i=0; i < events.length; i++) {\\r\\n            if (_time > events[i].time && _time < events[i].time + events[i].duration) {\\r\\n                return false;\\r\\n            }\\r\\n            if (_time + _duration > events[i].time && _time + _duration < events[i].time + events[i].duration) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getFreeSlot(address owner, uint64 _date, uint64 _duration) public view returns (uint64) {\\r\\n        Event[] memory events = getEventsByDate(owner, _date);\\r\\n        uint64 time = 0;\\r\\n        for (uint256 i=0; i < events.length; i++) {\\r\\n            if (events[i].time - time >= _duration) {\\r\\n                return time;\\r\\n            }\\r\\n            time = events[i].time + events[i].duration;\\r\\n        }\\r\\n        return time;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    /* function that adds invites to the calendar */\\r\\n    function addInvite(uint64 _date, uint64 _time, uint64 _duration, bytes32 _swarmLocation, address[] memory _participants) public {\\r\\n        address[] memory accepted = new address[](0);\\r\\n        Invite memory i = Invite(msg.sender, _swarmLocation, _time, _duration, _date, _participants, accepted);\\r\\n        _invites.push(i);\\r\\n\\r\\n        // for all participants, add invite to their invites\\r\\n        for (uint256 j=0; j < _participants.length; j++) {\\r\\n            _userInvites[_participants[j]][_date].push(_invites.length);\\r\\n        }\\r\\n        _userInvites[msg.sender][_date].push(_invites.length);\\r\\n    }\\r\\n\\r\\n    /* function to get invites for date */\\r\\n    function getInvitesByDate(address owner, uint64 _date) public view returns (Invite[] memory) {\\r\\n        Invite[] memory invites = new Invite[](_userInvites[owner][_date].length);\\r\\n        for (uint256 i=0; i < invites.length; i++) {\\r\\n            invites[i] = _invites[_userInvites[owner][_date][i]-1];\\r\\n        }\\r\\n        return invites;\\r\\n    }\\r\\n    /* function to get invites for dates */\\r\\n    function getInvitesByDates(address owner, uint64[] memory _dates) public view returns (Invite[] memory) {\\r\\n        uint totalLength = 0;\\r\\n        for(uint i = 0; i < _dates.length; i++) {\\r\\n            totalLength += _userInvites[owner][_dates[i]].length;\\r\\n        }\\r\\n        uint c = 0;\\r\\n        Invite[] memory invites = new Invite[](totalLength);\\r\\n        for(uint i = 0; i < _dates.length; i++) {\\r\\n            for (uint64 j=0; j < _userInvites[owner][_dates[i]].length; j++) {\\r\\n                invites[c] = _invites[_userInvites[owner][_dates[i]][j]-1];\\r\\n                c++;\\r\\n            }\\r\\n        }\\r\\n        return invites;\\r\\n    }\\r\\n\\r\\n    /* function to confirm invite, add event to calendar and remove invite from user invites */\\r\\n    function confirmInvite(uint64 _date, uint64 _index) public {\\r\\n        require(_index < _userInvites[msg.sender][_date].length, \\\"Invalid index\\\");\\r\\n        Invite storage i = _invites[_userInvites[msg.sender][_date][_index]];\\r\\n        i.accepted.push(msg.sender);\\r\\n        addEvent(_date, i.time, i.duration, i.location);\\r\\n        removeInviteByIndex(_date, _index);\\r\\n    }\\r\\n\\r\\n    function removeInviteByIndex(uint64 _date, uint64 _index) public  {\\r\\n        require(_index < _userInvites[msg.sender][_date].length, \\\"Invalid index\\\");\\r\\n        \\r\\n        for (uint i = _index; i < _userInvites[msg.sender][_date].length - 1; i++) {\\r\\n            _userInvites[msg.sender][_date][i] =_userInvites[msg.sender][_date][i+1];\\r\\n        }\\r\\n        _userInvites[msg.sender][_date].pop();\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc785e515a8cfce4776589829034bd23d1ad2027519f4eb1123674d4165c636a0\",\"license\":\"MIT\"}},\"version\":1}",
        "bytecode": "",
        "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063644f872f1161008c578063b289551111610066578063b289551114610229578063baa097eb1461023c578063c455643b1461024f578063f988491d1461026257600080fd5b8063644f872f146101be5780636e81d53d146101e95780637ae485c91461020957600080fd5b806338511650116100c8578063385116501461013f57806339113166146101525780634edc689d14610165578063585af311146101ab57600080fd5b806302e3dff6146100ef57806305daf59014610117578063162276a91461012c575b600080fd5b6101026100fd366004611d4c565b610282565b60405190151581526020015b60405180910390f35b61012a610125366004611dfa565b61046e565b005b61012a61013a366004611dfa565b61060e565b61012a61014d366004611d9f565b61078c565b61012a610160366004611dfa565b61093c565b61012a610173366004611c9e565b3360009081526004602090815260408083206001600160a01b0395909516835293905291909120805460ff1916911515919091179055565b61012a6101b9366004611e5f565b610a62565b6101d16101cc366004611d0a565b610cc4565b6040516001600160401b03909116815260200161010e565b6101fc6101f7366004611bed565b610dbb565b60405161010e919061200a565b61021c610217366004611bed565b6111c5565b60405161010e9190611f99565b6101fc610237366004611cd8565b6114c6565b61021c61024a366004611cd8565b61177d565b61012a61025d366004611e15565b61192c565b610275610270366004611f36565b611a06565b60405161010e919061211b565b60008061028f868661177d565b905060005b815181101561045f578181815181106102bd57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160401b0316856001600160401b031611801561035b575081818151811061030457634e487b7160e01b600052603260045260246000fd5b60200260200101516040015182828151811061033057634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161034691906121b7565b6001600160401b0316856001600160401b0316105b1561036b57600092505050610466565b81818151811061038b57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160401b031684866103ac91906121b7565b6001600160401b031611801561043d57508181815181106103dd57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015182828151811061040957634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161041f91906121b7565b6001600160401b031661043285876121b7565b6001600160401b0316105b1561044d57600092505050610466565b8061045781612221565b915050610294565b5060019150505b949350505050565b3360009081526003602090815260408083206001600160401b038087168552925290912054908216106104bc5760405162461bcd60e51b81526004016104b3906120f4565b60405180910390fd5b6001600160401b0381165b3360009081526003602090815260408083206001600160401b03871684529091529020546104f7906001906121e2565b8110156105b3573360009081526003602090815260408083206001600160401b0387168452909152902061052c82600161219f565b8154811061054a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101543383526003825260408084206001600160401b0388168552909252912080548390811061059557634e487b7160e01b600052603260045260246000fd5b600091825260209091200155806105ab81612221565b9150506104c7565b503360009081526003602090815260408083206001600160401b038616845290915290208054806105f457634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590555050565b3360009081526001602090815260408083206001600160401b038087168552925290912054908216106106535760405162461bcd60e51b81526004016104b3906120f4565b6001600160401b0381165b3360009081526001602081815260408084206001600160401b03881685529091529091205461068d91906121e2565b81101561074b573360009081526001602081815260408084206001600160401b0388168552909152909120906106c490839061219f565b815481106106e257634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101543383526001825260408084206001600160401b0388168552909252912080548390811061072d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001558061074381612221565b91505061065e565b503360009081526001602090815260408083206001600160401b038616845290915290208054806105f457634e487b7160e01b600052603160045260246000fd5b6001600160a01b038516600090815260046020908152604080832033845290915290205460ff166107ff5760405162461bcd60e51b815260206004820152601860248201527f4e6f7420616c6c6f77656420746f20616464206576656e74000000000000000060448201526064016104b3565b610384826001600160401b0316101561085a5760405162461bcd60e51b815260206004820152601960248201527f4475726174696f6e20746f6f20736d616c6c203e20393030730000000000000060448201526064016104b3565b604080516060810182529182526001600160401b0393841660208084019182529385168383019081526000805460018181018355828052955160029091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56381019190915592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564909301805492518816600160401b026001600160801b031990931693881693909317919091179091556001600160a01b03909616865281835280862094909316855292815290832083548154938401825590845292200155565b3360009081526003602090815260408083206001600160401b038087168552925290912054908216106109815760405162461bcd60e51b81526004016104b3906120f4565b3360009081526003602090815260408083206001600160401b03808716855292528220805460029285169081106109c857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154815481106109f157634e487b7160e01b600052603260045260246000fd5b600091825260208083206004600590930201918201805460018181018355918552919093200180546001600160a01b03191633179055600281015491810154909250610a539185916001600160401b0380831692600160401b9004169061192c565b610a5d838361046e565b505050565b604080516000808252610100820183523360208084019182529383018681526001600160401b0389811660608601908152898216608087019081528c831660a0880190815260c088018a815260e08901899052600280546001810182559852865160059098027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace810180546001600160a01b03909a166001600160a01b0319909a1699909917895595517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf87015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad086018054935192518616600160801b0267ffffffffffffffff60801b19938716600160401b026001600160801b0319909516929096169190911792909217169290921790915551805194959294859493610bd1937f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad101920190611b40565b5060c08201518051610bed916004840191602090910190611b40565b50505060005b8351811015610c7f5760036000858381518110610c2057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0316825281810192909252604090810160009081206001600160401b038c1682528352908120600254815460018101835591835292909120015580610c7781612221565b915050610bf3565b50503360009081526003602090815260408083206001600160401b03909916835297815296812060025481546001810183559183529790912001959095555050505050565b600080610cd1858561177d565b90506000805b8251811015610daf57846001600160401b031682848381518110610d0b57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151610d2191906121f9565b6001600160401b031610610d3957509150610db49050565b828181518110610d5957634e487b7160e01b600052603260045260246000fd5b602002602001015160400151838281518110610d8557634e487b7160e01b600052603260045260246000fd5b602002602001015160200151610d9b91906121b7565b915080610da781612221565b915050610cd7565b509150505b9392505050565b60606000805b8351811015610e52576001600160a01b03851660009081526003602052604081208551909190869084908110610e0757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b031681526020019081526020016000208054905082610e3e919061219f565b915080610e4a81612221565b915050610dc1565b50600080826001600160401b03811115610e7c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ee557816020015b6040805160e081018252600080825260208083018290529282018190526060808301829052608083019190915260a0820181905260c08201528252600019909201910181610e9a5790505b50905060005b85518110156111b95760005b6001600160a01b03881660009081526003602052604081208851909190899085908110610f3457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b0316815260200190815260200160002080549050816001600160401b031610156111a6576001600160a01b03881660009081526003602052604081208851600292600192918b9087908110610fb157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b03168152602001908152602001600020836001600160401b03168154811061100157634e487b7160e01b600052603260045260246000fd5b906000526020600020015461101691906121e2565b8154811061103457634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160e081018252600590930290910180546001600160a01b0316835260018101548385015260028101546001600160401b0380821685850152600160401b820481166060860152600160801b9091041660808401526003810180548351818702810187019094528084529394919360a0860193928301828280156110ef57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110d1575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561115157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611133575b50505050508152505083858151811061117a57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250838061119090612221565b945050808061119e9061223c565b915050610ef7565b50806111b181612221565b915050610eeb565b50925050505b92915050565b60606000805b835181101561125c576001600160a01b0385166000908152600160205260408120855190919086908490811061121157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b031681526020019081526020016000208054905082611248919061219f565b91508061125481612221565b9150506111cb565b50600080826001600160401b0381111561128657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112d157816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816112a45790505b50905060005b85518110156111b95760005b6001600160a01b0388166000908152600160205260408120885190919089908590811061132057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b0316815260200190815260200160002080549050816001600160401b031610156114b3576001600160a01b03881660009081526001602081905260408220895183908b908790811061139a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b03168152602001908152602001600020836001600160401b0316815481106113ea57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546113ff91906121e2565b8154811061141d57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051606081018252600290930290910180548352600101546001600160401b0380821694840194909452600160401b900490921691810191909152835184908690811061148757634e487b7160e01b600052603260045260246000fd5b6020026020010181905250838061149d90612221565b94505080806114ab9061223c565b9150506112e3565b50806114be81612221565b9150506112d7565b6001600160a01b03821660009081526003602090815260408083206001600160401b03808616855292528220546060929181111561151457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561157d57816020015b6040805160e081018252600080825260208083018290529282018190526060808301829052608083019190915260a0820181905260c082015282526000199092019101816115325790505b50905060005b8151811015611775576001600160a01b03851660009081526003602090815260408083206001600160401b038816845290915290208054600291600191849081106115de57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546115f391906121e2565b8154811061161157634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160e081018252600590930290910180546001600160a01b0316835260018101548385015260028101546001600160401b0380821685850152600160401b820481166060860152600160801b9091041660808401526003810180548351818702810187019094528084529394919360a0860193928301828280156116cc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116ae575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561172e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611710575b50505050508152505082828151811061175757634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061176d90612221565b915050611583565b509392505050565b6001600160a01b03821660009081526001602090815260408083206001600160401b0380861685529252822054606092918111156117cb57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561181657816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816117e95790505b50905060005b8151811015611775576001600160a01b03851660009081526001602081815260408084206001600160401b0389168552909152822080548490811061187157634e487b7160e01b600052603260045260246000fd5b906000526020600020015461188691906121e2565b815481106118a457634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051606081018252600290930290910180548352600101546001600160401b0380821694840194909452600160401b900490921691810191909152825183908390811061190e57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061192490612221565b91505061181c565b604080516060810182529182526001600160401b0393841660208084019182529385168383019081526000805460018181018355828052955160029091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56381019190915592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564909301805492518816600160401b026001600160801b03199093169388169390931791909117909155338152828452818120959094168452938252928220825481549485018255908352912090910155565b6040805160608101825260008082526020808301829052828401829052338252600181528382206001600160401b038a811684529152929020549091861610611a615760405162461bcd60e51b81526004016104b3906120f4565b3360009081526001602090815260408083206001600160401b03808b16855292528220805483928916908110611aa757634e487b7160e01b600052603260045260246000fd5b906000526020600020015481548110611ad057634e487b7160e01b600052603260045260246000fd5b6000918252602091829020600291909102016001810180546001600160401b039889166001600160801b031990911617600160401b978916880217908190559085905560408051606081018252958652818816928601929092529490940490941692820192909252949350505050565b828054828255906000526020600020908101928215611b95579160200282015b82811115611b9557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611b60565b50611ba1929150611ba5565b5090565b5b80821115611ba15760008155600101611ba6565b80356001600160a01b0381168114611bd157600080fd5b919050565b80356001600160401b0381168114611bd157600080fd5b60008060408385031215611bff578182fd5b611c0883611bba565b91506020808401356001600160401b03811115611c23578283fd5b8401601f81018613611c33578283fd5b8035611c46611c418261217c565b61214c565b80828252848201915084840189868560051b8701011115611c65578687fd5b8694505b83851015611c8e57611c7a81611bd6565b835260019490940193918501918501611c69565b5080955050505050509250929050565b60008060408385031215611cb0578182fd5b611cb983611bba565b915060208301358015158114611ccd578182fd5b809150509250929050565b60008060408385031215611cea578182fd5b611cf383611bba565b9150611d0160208401611bd6565b90509250929050565b600080600060608486031215611d1e578081fd5b611d2784611bba565b9250611d3560208501611bd6565b9150611d4360408501611bd6565b90509250925092565b60008060008060808587031215611d61578081fd5b611d6a85611bba565b9350611d7860208601611bd6565b9250611d8660408601611bd6565b9150611d9460608601611bd6565b905092959194509250565b600080600080600060a08688031215611db6578081fd5b611dbf86611bba565b9450611dcd60208701611bd6565b9350611ddb60408701611bd6565b9250611de960608701611bd6565b949793965091946080013592915050565b60008060408385031215611e0c578182fd5b611cf383611bd6565b60008060008060808587031215611e2a578384fd5b611e3385611bd6565b9350611e4160208601611bd6565b9250611e4f60408601611bd6565b9396929550929360600135925050565b600080600080600060a08688031215611e76578081fd5b611e7f86611bd6565b94506020611e8e818801611bd6565b9450611e9c60408801611bd6565b93506060870135925060808701356001600160401b03811115611ebd578283fd5b8701601f81018913611ecd578283fd5b8035611edb611c418261217c565b8082825284820191508484018c868560051b8701011115611efa578687fd5b8694505b83851015611f2357611f0f81611bba565b835260019490940193918501918501611efe565b5080955050505050509295509295909350565b600080600080600060a08688031215611f4d578283fd5b611dbf86611bd6565b6000815180845260208085019450808401835b83811015611f8e5781516001600160a01b031687529582019590820190600101611f69565b509495945050505050565b6020808252825182820181905260009190848201906040850190845b81811015611ffe57611feb838551805182526020808201516001600160401b039081169184019190915260409182015116910152565b9284019260609290920191600101611fb5565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b870101848801865b838110156120e657888303603f19018552815180516001600160a01b031684528781015188850152868101516001600160401b03168785015260608082015160e09190612087828801826001600160401b03169052565b50506080828101516001600160401b03169086015260a0808301518187018390526120b483880182611f56565b9250505060c080830151925085820381870152506120d28183611f56565b968901969450505090860190600101612030565b509098975050505050505050565b6020808252600d908201526c092dcecc2d8d2c840d2dcc8caf609b1b604082015260600190565b606081016111bf8284805182526020808201516001600160401b039081169184019190915260409182015116910152565b604051601f8201601f191681016001600160401b038111828210171561217457612174612279565b604052919050565b60006001600160401b0382111561219557612195612279565b5060051b60200190565b600082198211156121b2576121b2612263565b500190565b60006001600160401b038083168185168083038211156121d9576121d9612263565b01949350505050565b6000828210156121f4576121f4612263565b500390565b60006001600160401b038381169083168181101561221957612219612263565b039392505050565b600060001982141561223557612235612263565b5060010190565b60006001600160401b038083168181141561225957612259612263565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220013d8d0b81d1b3c2b7ae1c80b07ee57997da2b1b4117798c568bf0d88134a9b164736f6c63430008040033",
        "devdoc": {
          "kind": "dev",
          "methods": {},
          "version": 1
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        },
        "storageLayout": {
          "storage": [
            {
              "astId": 29,
              "contract": "contracts/Calendar.sol:Calendar",
              "label": "_events",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_struct(Event)8_storage)dyn_storage"
            },
            {
              "astId": 36,
              "contract": "contracts/Calendar.sol:Calendar",
              "label": "_userEvents",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_uint64,t_array(t_uint256)dyn_storage))"
            },
            {
              "astId": 40,
              "contract": "contracts/Calendar.sol:Calendar",
              "label": "_invites",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Invite)25_storage)dyn_storage"
            },
            {
              "astId": 47,
              "contract": "contracts/Calendar.sol:Calendar",
              "label": "_userInvites",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_uint64,t_array(t_uint256)dyn_storage))"
            },
            {
              "astId": 53,
              "contract": "contracts/Calendar.sol:Calendar",
              "label": "_userAllowList",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
            }
          ],
          "types": {
            "t_address": {
              "encoding": "inplace",
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "base": "t_address",
              "encoding": "dynamic_array",
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Event)8_storage)dyn_storage": {
              "base": "t_struct(Event)8_storage",
              "encoding": "dynamic_array",
              "label": "struct Calendar.Event[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Invite)25_storage)dyn_storage": {
              "base": "t_struct(Invite)25_storage",
              "encoding": "dynamic_array",
              "label": "struct Calendar.Invite[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "base": "t_uint256",
              "encoding": "dynamic_array",
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "encoding": "inplace",
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "encoding": "inplace",
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => bool)",
              "numberOfBytes": "32",
              "value": "t_bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32",
              "value": "t_mapping(t_address,t_bool)"
            },
            "t_mapping(t_address,t_mapping(t_uint64,t_array(t_uint256)dyn_storage))": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => mapping(uint64 => uint256[]))",
              "numberOfBytes": "32",
              "value": "t_mapping(t_uint64,t_array(t_uint256)dyn_storage)"
            },
            "t_mapping(t_uint64,t_array(t_uint256)dyn_storage)": {
              "encoding": "mapping",
              "key": "t_uint64",
              "label": "mapping(uint64 => uint256[])",
              "numberOfBytes": "32",
              "value": "t_array(t_uint256)dyn_storage"
            },
            "t_struct(Event)8_storage": {
              "encoding": "inplace",
              "label": "struct Calendar.Event",
              "members": [
                {
                  "astId": 3,
                  "contract": "contracts/Calendar.sol:Calendar",
                  "label": "location",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_bytes32"
                },
                {
                  "astId": 5,
                  "contract": "contracts/Calendar.sol:Calendar",
                  "label": "time",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_uint64"
                },
                {
                  "astId": 7,
                  "contract": "contracts/Calendar.sol:Calendar",
                  "label": "duration",
                  "offset": 8,
                  "slot": "1",
                  "type": "t_uint64"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Invite)25_storage": {
              "encoding": "inplace",
              "label": "struct Calendar.Invite",
              "members": [
                {
                  "astId": 10,
                  "contract": "contracts/Calendar.sol:Calendar",
                  "label": "creator",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_address"
                },
                {
                  "astId": 12,
                  "contract": "contracts/Calendar.sol:Calendar",
                  "label": "location",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_bytes32"
                },
                {
                  "astId": 14,
                  "contract": "contracts/Calendar.sol:Calendar",
                  "label": "time",
                  "offset": 0,
                  "slot": "2",
                  "type": "t_uint64"
                },
                {
                  "astId": 16,
                  "contract": "contracts/Calendar.sol:Calendar",
                  "label": "duration",
                  "offset": 8,
                  "slot": "2",
                  "type": "t_uint64"
                },
                {
                  "astId": 18,
                  "contract": "contracts/Calendar.sol:Calendar",
                  "label": "date",
                  "offset": 16,
                  "slot": "2",
                  "type": "t_uint64"
                },
                {
                  "astId": 21,
                  "contract": "contracts/Calendar.sol:Calendar",
                  "label": "participants",
                  "offset": 0,
                  "slot": "3",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "astId": 24,
                  "contract": "contracts/Calendar.sol:Calendar",
                  "label": "accepted",
                  "offset": 0,
                  "slot": "4",
                  "type": "t_array(t_address)dyn_storage"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "encoding": "inplace",
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "encoding": "inplace",
              "label": "uint64",
              "numberOfBytes": "8"
            }
          }
        }
      },
      "Scheduler": {
        "address": "0xB4447212804f6Da0225C042D71F2d434B260a763",
        "abi": [
          {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "feesCollected",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "fundsBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "fundsTransfer",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              }
            ],
            "name": "getEventsByDate",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "location",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint64",
                    "name": "time",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "duration",
                    "type": "uint64"
                  }
                ],
                "internalType": "struct Scheduler.Event[]",
                "name": "",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "uint64[]",
                "name": "_dates",
                "type": "uint64[]"
              }
            ],
            "name": "getEventsByDates",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "location",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint64",
                    "name": "time",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "duration",
                    "type": "uint64"
                  }
                ],
                "internalType": "struct Scheduler.Event[]",
                "name": "",
                "type": "tuple[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "getFee",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_address",
                "type": "address"
              },
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_duration",
                "type": "uint64"
              }
            ],
            "name": "getFreeSlot",
            "outputs": [
              {
                "internalType": "uint64",
                "name": "",
                "type": "uint64"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_address",
                "type": "address"
              },
              {
                "internalType": "uint64",
                "name": "_duration",
                "type": "uint64"
              }
            ],
            "name": "getPriceForEvent",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_address",
                "type": "address"
              }
            ],
            "name": "getUser",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "uint256",
                    "name": "payment",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "balance",
                    "type": "uint256"
                  },
                  {
                    "internalType": "bool",
                    "name": "isAway",
                    "type": "bool"
                  },
                  {
                    "internalType": "uint64",
                    "name": "startTime",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "endTime",
                    "type": "uint64"
                  }
                ],
                "internalType": "struct Scheduler.User",
                "name": "",
                "type": "tuple"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_address",
                "type": "address"
              },
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_time",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_duration",
                "type": "uint64"
              }
            ],
            "name": "isOwnerAvailable",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "release",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_index",
                "type": "uint64"
              }
            ],
            "name": "removeEventByIndex",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_address",
                "type": "address"
              },
              {
                "internalType": "uint64",
                "name": "_date",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_time",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_duration",
                "type": "uint64"
              },
              {
                "internalType": "bytes32",
                "name": "_swarmLocation",
                "type": "bytes32"
              }
            ],
            "name": "scheduleEvent",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "schedulerFee",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bool",
                "name": "_away",
                "type": "bool"
              }
            ],
            "name": "setAway",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_address",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "allow",
                "type": "bool"
              }
            ],
            "name": "setBlockAddress",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "newFee",
                "type": "uint256"
              }
            ],
            "name": "setFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_paymentPerS",
                "type": "uint256"
              }
            ],
            "name": "setPayment",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "_startTime",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "_endTime",
                "type": "uint64"
              }
            ],
            "name": "setStartEndTime",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "stateMutability": "payable",
            "type": "receive"
          }
        ],
        "transactionHash": "0xdfd39350c9b82b3b6e1a6cdf399bb8ff7a814ab81a301df3cd70a9183af3d998",
        "receipt": {
          "to": null,
          "from": "0xd27ffA0e47Fca8D3E757B4d2C408169859B8c419",
          "contractAddress": "0xB4447212804f6Da0225C042D71F2d434B260a763",
          "transactionIndex": 61,
          "gasUsed": "1821357",
          "logsBloom": "0x
          "blockHash": "0xfb8289dcd9200f29ab6bd89afef29bab006996ccf5a9d273602150abee24b324",
          "transactionHash": "0xdfd39350c9b82b3b6e1a6cdf399bb8ff7a814ab81a301df3cd70a9183af3d998",
          "logs": [
            {
              "transactionIndex": 61,
              "blockNumber": 8863104,
              "transactionHash": "0xdfd39350c9b82b3b6e1a6cdf399bb8ff7a814ab81a301df3cd70a9183af3d998",
              "address": "0xB4447212804f6Da0225C042D71F2d434B260a763",
              "topics": [
                "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                "0x000000000000000000000000d27ffa0e47fca8d3e757b4d2c408169859b8c419"
              ],
              "data": "0x",
              "logIndex": 155,
              "blockHash": "0xfb8289dcd9200f29ab6bd89afef29bab006996ccf5a9d273602150abee24b324"
            }
          ],
          "blockNumber": 8863104,
          "cumulativeGasUsed": "13222218",
          "status": 1,
          "byzantium": true
        },
        "args": [],
        "numDeployments": 1,
        "solcInputHash": "34108367d9c4da059aa36eb779d34930",
        "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"feesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"}],\"name\":\"getEventsByDate\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"internalType\":\"struct Scheduler.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_dates\",\"type\":\"uint64[]\"}],\"name\":\"getEventsByDates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"internalType\":\"struct Scheduler.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"getFreeSlot\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"getPriceForEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAway\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"internalType\":\"struct Scheduler.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"isOwnerAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_index\",\"type\":\"uint64\"}],\"name\":\"removeEventByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"scheduleEvent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedulerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_away\",\"type\":\"bool\"}],\"name\":\"setAway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setBlockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentPerS\",\"type\":\"uint256\"}],\"name\":\"setPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_endTime\",\"type\":\"uint64\"}],\"name\":\"setStartEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Scheduler.sol\":\"Scheduler\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Scheduler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// written by @tfius \\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n/*\\r\\n Expected JSON format for event\\r\\n   [{\\r\\n        \\\"eventName\\\": \\\"string\\\",\\r\\n        \\\"description\\\": \\\"string\\\",\\r\\n        \\\"category\\\": \\\"string\\\",\\r\\n        \\\"location\\\": \\\"string\\\",\\r\\n        \\\"participants\\\": [\\\"string\\\"],\\r\\n        \\\"date\\\": \\\"uint64\\\",\\r\\n        \\\"duration\\\": \\\"uint64\\\",\\r\\n        \\\"time\\\": \\\"uint64\\\"\\r\\n    }]\\r\\n*/ \\r\\n\\r\\ncontract Scheduler is Ownable {\\r\\n    \\r\\n    struct Event {\\r\\n        address sender;\\r\\n        bytes32 location; // swarm location\\r\\n        uint64 time;\\r\\n        uint64 duration;       \\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        uint256 payment; // in wei per second\\r\\n        uint256 balance; // in wei\\r\\n        bool    isAway;\\r\\n\\r\\n        uint64  startTime; // 25200; // 7am\\r\\n        uint64    endTime; // 64800; // 6pm\\r\\n    }\\r\\n\\r\\n    uint256 public schedulerFee = 1000; // 1%\\r\\n    uint256 public feesCollected = 0;\\r\\n    uint256 private constant FEE_PRECISION = 1e5;\\r\\n\\r\\n    Event[] private _events;\\r\\n    mapping(address => User) users;\\r\\n    mapping(address => mapping(uint64 => uint256[])) private _userEvents; // user to date to event index\\r\\n    mapping(address => mapping(address => bool)) private _userBlockList;  // block list per address -> address -> bool\\r\\n\\r\\n    constructor() {\\r\\n    }\\r\\n    receive() external payable {}\\r\\n    function getFee(uint256 amount) public view returns (uint256) {\\r\\n        return (amount * schedulerFee) / FEE_PRECISION;\\r\\n    }\\r\\n    function setFee(uint256 newFee) onlyOwner public  {\\r\\n        schedulerFee = newFee; \\r\\n    }\\r\\n    function getUser(address _address) public view returns (User memory) {\\r\\n        return users[_address];\\r\\n    }\\r\\n\\r\\n    function setBlockAddress(address _address, bool allow) public {\\r\\n        _userBlockList[msg.sender][_address] = allow;\\r\\n    }\\r\\n    function setPayment(uint256 _paymentPerS) public {\\r\\n        users[msg.sender].payment = _paymentPerS;\\r\\n    }\\r\\n    function setAway(bool _away) public {\\r\\n        users[msg.sender].isAway = _away;\\r\\n    }\\r\\n    function setStartEndTime(uint64 _startTime, uint64 _endTime) public {\\r\\n        users[msg.sender].startTime = _startTime;\\r\\n        users[msg.sender].endTime = _endTime;\\r\\n    }\\r\\n    function getPriceForEvent(address _address, uint64 _duration) public view returns (uint256) {\\r\\n        return _duration * users[_address].payment;\\r\\n    }\\r\\n\\r\\n    function addEvent(address _address, uint64 _date, uint64 _time, uint64 _duration, bytes32 _swarmLocation) private {\\r\\n        Event memory e = Event(msg.sender, _swarmLocation, _time, _duration);\\r\\n        _events.push(e);\\r\\n        _userEvents[_address][_date].push(_events.length);\\r\\n    }\\r\\n\\r\\n    function scheduleEvent(address _address, uint64 _date, uint64 _time, uint64 _duration, bytes32 _swarmLocation) public payable {\\r\\n        require(_userBlockList[_address][msg.sender]==false, \\\"Not allowed to add event\\\");\\r\\n        //require(_duration >= 900 && <= 3600, \\\"Duration >15 <60 min\\\");\\r\\n        require(users[_address].isAway==false, \\\"User is away\\\");\\r\\n\\r\\n        uint256 _end = _time + _duration;\\r\\n        require(_end <= 86400, \\\"Event must start / end same day\\\");\\r\\n\\r\\n        if(users[_address].startTime != 0 && users[_address].endTime != 0)\\r\\n           require(_time >= users[_address].startTime && _time + _duration <= users[_address].endTime, \\\"Event not between start/end\\\");\\r\\n\\r\\n        uint256 paymentAmount = _duration * users[_address].payment;\\r\\n        require(msg.value >= paymentAmount, \\\"Insufficient payment\\\");\\r\\n\\r\\n        require(isOwnerAvailable(_address, _date, _time, _duration), \\\"Not available\\\");\\r\\n\\r\\n        addEvent(_address, _date, _time, _duration, _swarmLocation);\\r\\n\\r\\n        if(paymentAmount > 0)\\r\\n        {\\r\\n            uint256 fee = getFee(paymentAmount);\\r\\n            uint256 payout = paymentAmount-fee;\\r\\n            feesCollected += fee;\\r\\n            users[_address].balance += payout;\\r\\n            payable(msg.sender).transfer(payout);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* 1. We require that the index is less than the length of the array. Otherwise we will get an out-of-bounds error.\\r\\n       2. We loop over the array and shift the elements to the left. We start from the index that we want to remove and end at the second-to-last element.\\r\\n       3. We then use the pop function to remove the last element of the array.\\r\\n    */\\r\\n    function removeEventByIndex(uint64 _date, uint64 _index) public  {\\r\\n        require(_index < _userEvents[msg.sender][_date].length, \\\"Invalid index\\\");\\r\\n        \\r\\n        for (uint i = _index; i < _userEvents[msg.sender][_date].length - 1; i++) {\\r\\n            _userEvents[msg.sender][_date][i] =_userEvents[msg.sender][_date][i+1];\\r\\n        }\\r\\n        _userEvents[msg.sender][_date].pop();\\r\\n    }\\r\\n\\r\\n    /*  1. The first line creates an array of type Event and sets it's size to the length of the array of event IDs for the user and date passed in.\\r\\n        2. The for loop iterates through the array of event IDs and sets the array of events to the actual event data.\\r\\n        3. The function then returns the array of events. */\\r\\n    function getEventsByDate(address owner, uint64 _date) public view returns (Event[] memory) {\\r\\n        Event[] memory events = new Event[](_userEvents[owner][_date].length);\\r\\n        for (uint256 i=0; i < events.length; i++) {\\r\\n            events[i] = _events[_userEvents[owner][_date][i]-1];\\r\\n        }\\r\\n        return events;\\r\\n    }\\r\\n\\r\\n    /*  1. _dates is an array of timestamps\\r\\n        2. We get the length of the array and loop through it\\r\\n        3. For each date we get the length of the events array and we add it to a variable called totalLength\\r\\n        4. We initialize the c variable to 0\\r\\n        5. We initialize an array of events with the length of totalLength\\r\\n        6. We loop through the _dates array again\\r\\n        7. For each date we loop through the array of events for that date\\r\\n        8. We set the events array at index c to the event at index j\\r\\n        9. We increment c by 1\\r\\n        10. We return the events array */\\r\\n    function getEventsByDates(address owner, uint64[] memory _dates) public view returns (Event[] memory) {\\r\\n        uint totalLength = 0;\\r\\n        for(uint i = 0; i < _dates.length; i++) {\\r\\n            totalLength += _userEvents[owner][_dates[i]].length;\\r\\n        }\\r\\n        uint c = 0;\\r\\n        Event[] memory events = new Event[](totalLength);\\r\\n        for(uint i = 0; i < _dates.length; i++) {\\r\\n            for (uint64 j=0; j < _userEvents[owner][_dates[i]].length; j++) {\\r\\n                events[c] = _events[_userEvents[owner][_dates[i]][j]-1];\\r\\n                c++;\\r\\n            }\\r\\n        }\\r\\n        return events;\\r\\n    }\\r\\n\\r\\n    function isOwnerAvailable(address _address, uint64 _date, uint64 _time, uint64 _duration) public view returns (bool) {\\r\\n        Event[] memory events = getEventsByDate(_address, _date);\\r\\n        for (uint256 i=0; i < events.length; i++) {\\r\\n            if(users[_address].startTime != 0 && users[_address].endTime != 0)\\r\\n            {\\r\\n                if(users[_address].startTime > _time && users[_address].endTime < _time + _duration) {\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n            // find if event is inside or overlaps another event\\r\\n            if(_time > events[i].time && _time < events[i].time + events[i].duration) { // start time inside event\\r\\n                return false;\\r\\n            }\\r\\n            if(_time + _duration > events[i].time && _time + _duration < events[i].time + events[i].duration) { // start time inside event\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getFreeSlot(address _address, uint64 _date, uint64 _duration) public view returns (uint64) {\\r\\n        Event[] memory events = getEventsByDate(_address, _date);\\r\\n        uint64 time = 0;\\r\\n        for (uint256 i=0; i < events.length; i++) {\\r\\n            if (events[i].time - time >= _duration) {\\r\\n                return time;\\r\\n            }\\r\\n            time = events[i].time + events[i].duration;\\r\\n        }\\r\\n        return time;\\r\\n    }\\r\\n\\r\\n    function fundsBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }    \\r\\n    function fundsTransfer() onlyOwner public payable {\\r\\n        payable(msg.sender).transfer((address(this).balance));\\r\\n    }\\r\\n    function release(address token, uint amount) public virtual {\\r\\n        SafeERC20.safeTransfer(IERC20(token), owner(), amount);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4a348c72808085695307153579644b6e68180177778568eece480c69aa56b323\",\"license\":\"MIT\"}},\"version\":1}",
        "bytecode": "0x60806040526103e8600155600060025534801561001b57600080fd5b506100253361002a565b61007a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611f16806100896000396000f3fe6080604052600436106101395760003560e01c80637ae485c9116100ab578063bad055081161006f578063bad05508146104da578063c64070ea146104ed578063ce9bfc9c1461050d578063f071db5a1461054b578063f2fde38b14610561578063fcee45f41461058157600080fd5b80637ae485c9146104325780638da5cb5b1461045f5780639454932c14610487578063b6c33170146104a4578063baa097eb146104ba57600080fd5b80635bca217a116100fd5780635bca217a146101f1578063644f872f1461026d57806366fbcdb1146102a557806369fe0e2d146102f85780636f77926b14610318578063715018a61461041d57600080fd5b806302e3dff6146101455780630357371d1461017a578063162276a91461019c5780632fffa196146101bc578063567556a4146101e957600080fd5b3661014057005b600080fd5b34801561015157600080fd5b50610165610160366004611b5d565b6105a1565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061019a610195366004611ac0565b610878565b005b3480156101a857600080fd5b5061019a6101b7366004611c5b565b610898565b3480156101c857600080fd5b5061019a6101d7366004611c43565b33600090815260046020526040902055565b61019a610a54565b3480156101fd57600080fd5b5061019a61020c366004611c5b565b336000908152600460205260409020600201805470ffffffffffffffffffffffffffffffff0019166101006001600160401b039485160270ffffffffffffffff000000000000000000191617600160481b9290931691909102919091179055565b34801561027957600080fd5b5061028d610288366004611b1b565b610aad565b6040516001600160401b039091168152602001610171565b3480156102b157600080fd5b5061019a6102c0366004611a8a565b3360009081526006602090815260408083206001600160a01b0395909516835293905291909120805460ff1916911515919091179055565b34801561030457600080fd5b5061019a610313366004611c43565b610ba4565b34801561032457600080fd5b506103ca610333366004611997565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b0316600090815260046020908152604091829020825160a081018452815481526001820154928101929092526002015460ff81161515928201929092526001600160401b03610100830481166060830152600160481b909204909116608082015290565b6040516101719190600060a082019050825182526020830151602083015260408301511515604083015260608301516001600160401b038082166060850152806080860151166080850152505092915050565b34801561042957600080fd5b5061019a610bd3565b34801561043e57600080fd5b5061045261044d3660046119b1565b610c09565b6040516101719190611c92565b34801561046b57600080fd5b506000546040516001600160a01b039091168152602001610171565b34801561049357600080fd5b50475b604051908152602001610171565b3480156104b057600080fd5b5061049660015481565b3480156104c657600080fd5b506104526104d5366004611ae9565b610f33565b61019a6104e8366004611bb0565b61110c565b3480156104f957600080fd5b50610496610508366004611ae9565b6115f8565b34801561051957600080fd5b5061019a610528366004611c0b565b336000908152600460205260409020600201805460ff1916911515919091179055565b34801561055757600080fd5b5061049660025481565b34801561056d57600080fd5b5061019a61057c366004611997565b611624565b34801561058d57600080fd5b5061049661059c366004611c43565b6116bc565b6000806105ae8686610f33565b905060005b8151811015610869576001600160a01b03871660009081526004602052604090206002015461010090046001600160401b03161580159061061e57506001600160a01b038716600090815260046020526040902060020154600160481b90046001600160401b031615155b156106a7576001600160a01b0387166000908152600460205260409020600201546001600160401b038087166101009092041611801561069757506106638486611d8b565b6001600160a01b0388166000908152600460205260409020600201546001600160401b03918216600160481b909104909116105b156106a757600092505050610870565b8181815181106106c757634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516001600160401b0316856001600160401b0316118015610765575081818151811061070e57634e487b7160e01b600052603260045260246000fd5b60200260200101516060015182828151811061073a57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516107509190611d8b565b6001600160401b0316856001600160401b0316105b1561077557600092505050610870565b81818151811061079557634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516001600160401b031684866107b69190611d8b565b6001600160401b031611801561084757508181815181106107e757634e487b7160e01b600052603260045260246000fd5b60200260200101516060015182828151811061081357634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516108299190611d8b565b6001600160401b031661083c8587611d8b565b6001600160401b0316105b1561085757600092505050610870565b8061086181611e64565b9150506105b3565b5060019150505b949350505050565b6108948261088e6000546001600160a01b031690565b836116e0565b5050565b3360009081526005602090815260408083206001600160401b038087168552925290912054908216106109025760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064015b60405180910390fd5b6001600160401b0381165b3360009081526005602090815260408083206001600160401b038716845290915290205461093d90600190611df5565b8110156109f9573360009081526005602090815260408083206001600160401b03871684529091529020610972826001611d73565b8154811061099057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101543383526005825260408084206001600160401b038816855290925291208054839081106109db57634e487b7160e01b600052603260045260246000fd5b600091825260209091200155806109f181611e64565b91505061090d565b503360009081526005602090815260408083206001600160401b03861684529091529020805480610a3a57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590555050565b6000546001600160a01b03163314610a7e5760405162461bcd60e51b81526004016108f990611d3e565b60405133904780156108fc02916000818181858888f19350505050158015610aaa573d6000803e3d6000fd5b50565b600080610aba8585610f33565b90506000805b8251811015610b9857846001600160401b031682848381518110610af457634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610b0a9190611e0c565b6001600160401b031610610b2257509150610b9d9050565b828181518110610b4257634e487b7160e01b600052603260045260246000fd5b602002602001015160600151838281518110610b6e57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610b849190611d8b565b915080610b9081611e64565b915050610ac0565b509150505b9392505050565b6000546001600160a01b03163314610bce5760405162461bcd60e51b81526004016108f990611d3e565b600155565b6000546001600160a01b03163314610bfd5760405162461bcd60e51b81526004016108f990611d3e565b610c076000611737565b565b60606000805b8351811015610ca0576001600160a01b03851660009081526005602052604081208551909190869084908110610c5557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b031681526020019081526020016000208054905082610c8c9190611d73565b915080610c9881611e64565b915050610c0f565b50600080826001600160401b03811115610cca57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d1c57816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610ce85790505b50905060005b8551811015610f295760005b6001600160a01b03881660009081526005602052604081208851909190899085908110610d6b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b0316815260200190815260200160002080549050816001600160401b03161015610f16576001600160a01b03881660009081526005602052604081208851600392600192918b9087908110610de857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b03168152602001908152602001600020836001600160401b031681548110610e3857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154610e4d9190611df5565b81548110610e6b57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081018252600390930290910180546001600160a01b031683526001810154938301939093526002909201546001600160401b0380821693830193909352600160401b900490911660608201528351849086908110610eea57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508380610f0090611e64565b9450508080610f0e90611e7f565b915050610d2e565b5080610f2181611e64565b915050610d22565b5095945050505050565b6001600160a01b03821660009081526005602090815260408083206001600160401b038086168552925282205460609291811115610f8157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fd357816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610f9f5790505b50905060005b8151811015611104576001600160a01b03851660009081526005602090815260408083206001600160401b0388168452909152902080546003916001918490811061103457634e487b7160e01b600052603260045260246000fd5b90600052602060002001546110499190611df5565b8154811061106757634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081018252600390930290910180546001600160a01b031683526001810154938301939093526002909201546001600160401b0380821693830193909352600160401b9004909116606082015282518390839081106110e657634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806110fc90611e64565b915050610fd9565b509392505050565b6001600160a01b038516600090815260066020908152604080832033845290915290205460ff16156111805760405162461bcd60e51b815260206004820152601860248201527f4e6f7420616c6c6f77656420746f20616464206576656e74000000000000000060448201526064016108f9565b6001600160a01b03851660009081526004602052604090206002015460ff16156111db5760405162461bcd60e51b815260206004820152600c60248201526b55736572206973206177617960a01b60448201526064016108f9565b60006111e78385611d8b565b6001600160401b03169050620151808111156112455760405162461bcd60e51b815260206004820152601f60248201527f4576656e74206d757374207374617274202f20656e642073616d65206461790060448201526064016108f9565b6001600160a01b03861660009081526004602052604090206002015461010090046001600160401b0316158015906112a757506001600160a01b038616600090815260046020526040902060020154600160481b90046001600160401b031615155b15611372576001600160a01b0386166000908152600460205260409020600201546001600160401b0361010090910481169085161080159061132657506001600160a01b038616600090815260046020526040902060020154600160481b90046001600160401b031661131a8486611d8b565b6001600160401b031611155b6113725760405162461bcd60e51b815260206004820152601b60248201527f4576656e74206e6f74206265747765656e2073746172742f656e64000000000060448201526064016108f9565b6001600160a01b03861660009081526004602052604081205461139e906001600160401b038616611dd6565b9050803410156113e75760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016108f9565b6113f3878787876105a1565b61142f5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420617661696c61626c6560981b60448201526064016108f9565b6040805160808101825233815260208082018681526001600160401b03898116848601908152898216606086019081526003805460018082018355600083815298519183027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810180546001600160a01b039485166001600160a01b031990911617905596517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c88015593517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d909601805493518616600160401b026fffffffffffffffffffffffffffffffff1990941696861696909617929092179094558d16855260058452858520918c16855290835293832090548154948501825590835291209091015580156115ef576000611567826116bc565b905060006115758284611df5565b905081600260008282546115899190611d73565b90915550506001600160a01b038916600090815260046020526040812060010180548392906115b9908490611d73565b9091555050604051339082156108fc029083906000818181858888f193505050501580156115eb573d6000803e3d6000fd5b5050505b50505050505050565b6001600160a01b038216600090815260046020526040812054610b9d906001600160401b038416611dd6565b6000546001600160a01b0316331461164e5760405162461bcd60e51b81526004016108f990611d3e565b6001600160a01b0381166116b35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108f9565b610aaa81611737565b6000620186a0600154836116d09190611dd6565b6116da9190611db6565b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611732908490611787565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006117dc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118599092919063ffffffff16565b80519091501561173257808060200190518101906117fa9190611c27565b6117325760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108f9565b6060610870848460008585843b6118b25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108f9565b600080866001600160a01b031685876040516118ce9190611c76565b60006040518083038185875af1925050503d806000811461190b576040519150601f19603f3d011682016040523d82523d6000602084013e611910565b606091505b509150915061192082828661192b565b979650505050505050565b6060831561193a575081610b9d565b82511561194a5782518084602001fd5b8160405162461bcd60e51b81526004016108f99190611d0b565b80356001600160a01b038116811461197b57600080fd5b919050565b80356001600160401b038116811461197b57600080fd5b6000602082840312156119a8578081fd5b610b9d82611964565b600080604083850312156119c3578081fd5b6119cc83611964565b91506020808401356001600160401b03808211156119e8578384fd5b818601915086601f8301126119fb578384fd5b813581811115611a0d57611a0d611ebc565b8060051b604051601f19603f83011681018181108582111715611a3257611a32611ebc565b604052828152858101935084860182860187018b1015611a50578788fd5b8795505b83861015611a7957611a6581611980565b855260019590950194938601938601611a54565b508096505050505050509250929050565b60008060408385031215611a9c578182fd5b611aa583611964565b91506020830135611ab581611ed2565b809150509250929050565b60008060408385031215611ad2578182fd5b611adb83611964565b946020939093013593505050565b60008060408385031215611afb578182fd5b611b0483611964565b9150611b1260208401611980565b90509250929050565b600080600060608486031215611b2f578081fd5b611b3884611964565b9250611b4660208501611980565b9150611b5460408501611980565b90509250925092565b60008060008060808587031215611b72578081fd5b611b7b85611964565b9350611b8960208601611980565b9250611b9760408601611980565b9150611ba560608601611980565b905092959194509250565b600080600080600060a08688031215611bc7578081fd5b611bd086611964565b9450611bde60208701611980565b9350611bec60408701611980565b9250611bfa60608701611980565b949793965091946080013592915050565b600060208284031215611c1c578081fd5b8135610b9d81611ed2565b600060208284031215611c38578081fd5b8151610b9d81611ed2565b600060208284031215611c54578081fd5b5035919050565b60008060408385031215611c6d578182fd5b611b0483611980565b60008251611c88818460208701611e34565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b82811015611cfe57815180516001600160a01b031685528681015187860152858101516001600160401b0390811687870152606091820151169085015260809093019290850190600101611caf565b5091979650505050505050565b6020815260008251806020840152611d2a816040850160208701611e34565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611d8657611d86611ea6565b500190565b60006001600160401b03808316818516808303821115611dad57611dad611ea6565b01949350505050565b600082611dd157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611df057611df0611ea6565b500290565b600082821015611e0757611e07611ea6565b500390565b60006001600160401b0383811690831681811015611e2c57611e2c611ea6565b039392505050565b60005b83811015611e4f578181015183820152602001611e37565b83811115611e5e576000848401525b50505050565b6000600019821415611e7857611e78611ea6565b5060010190565b60006001600160401b0380831681811415611e9c57611e9c611ea6565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610aaa57600080fdfea2646970667358221220677f6ad2c6d0ea52011319f60d5d6d04f5f2bc7889951ab3ea972c484f85460664736f6c63430008040033",
        "deployedBytecode": "0x6080604052600436106101395760003560e01c80637ae485c9116100ab578063bad055081161006f578063bad05508146104da578063c64070ea146104ed578063ce9bfc9c1461050d578063f071db5a1461054b578063f2fde38b14610561578063fcee45f41461058157600080fd5b80637ae485c9146104325780638da5cb5b1461045f5780639454932c14610487578063b6c33170146104a4578063baa097eb146104ba57600080fd5b80635bca217a116100fd5780635bca217a146101f1578063644f872f1461026d57806366fbcdb1146102a557806369fe0e2d146102f85780636f77926b14610318578063715018a61461041d57600080fd5b806302e3dff6146101455780630357371d1461017a578063162276a91461019c5780632fffa196146101bc578063567556a4146101e957600080fd5b3661014057005b600080fd5b34801561015157600080fd5b50610165610160366004611b5d565b6105a1565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061019a610195366004611ac0565b610878565b005b3480156101a857600080fd5b5061019a6101b7366004611c5b565b610898565b3480156101c857600080fd5b5061019a6101d7366004611c43565b33600090815260046020526040902055565b61019a610a54565b3480156101fd57600080fd5b5061019a61020c366004611c5b565b336000908152600460205260409020600201805470ffffffffffffffffffffffffffffffff0019166101006001600160401b039485160270ffffffffffffffff000000000000000000191617600160481b9290931691909102919091179055565b34801561027957600080fd5b5061028d610288366004611b1b565b610aad565b6040516001600160401b039091168152602001610171565b3480156102b157600080fd5b5061019a6102c0366004611a8a565b3360009081526006602090815260408083206001600160a01b0395909516835293905291909120805460ff1916911515919091179055565b34801561030457600080fd5b5061019a610313366004611c43565b610ba4565b34801561032457600080fd5b506103ca610333366004611997565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b0316600090815260046020908152604091829020825160a081018452815481526001820154928101929092526002015460ff81161515928201929092526001600160401b03610100830481166060830152600160481b909204909116608082015290565b6040516101719190600060a082019050825182526020830151602083015260408301511515604083015260608301516001600160401b038082166060850152806080860151166080850152505092915050565b34801561042957600080fd5b5061019a610bd3565b34801561043e57600080fd5b5061045261044d3660046119b1565b610c09565b6040516101719190611c92565b34801561046b57600080fd5b506000546040516001600160a01b039091168152602001610171565b34801561049357600080fd5b50475b604051908152602001610171565b3480156104b057600080fd5b5061049660015481565b3480156104c657600080fd5b506104526104d5366004611ae9565b610f33565b61019a6104e8366004611bb0565b61110c565b3480156104f957600080fd5b50610496610508366004611ae9565b6115f8565b34801561051957600080fd5b5061019a610528366004611c0b565b336000908152600460205260409020600201805460ff1916911515919091179055565b34801561055757600080fd5b5061049660025481565b34801561056d57600080fd5b5061019a61057c366004611997565b611624565b34801561058d57600080fd5b5061049661059c366004611c43565b6116bc565b6000806105ae8686610f33565b905060005b8151811015610869576001600160a01b03871660009081526004602052604090206002015461010090046001600160401b03161580159061061e57506001600160a01b038716600090815260046020526040902060020154600160481b90046001600160401b031615155b156106a7576001600160a01b0387166000908152600460205260409020600201546001600160401b038087166101009092041611801561069757506106638486611d8b565b6001600160a01b0388166000908152600460205260409020600201546001600160401b03918216600160481b909104909116105b156106a757600092505050610870565b8181815181106106c757634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516001600160401b0316856001600160401b0316118015610765575081818151811061070e57634e487b7160e01b600052603260045260246000fd5b60200260200101516060015182828151811061073a57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516107509190611d8b565b6001600160401b0316856001600160401b0316105b1561077557600092505050610870565b81818151811061079557634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516001600160401b031684866107b69190611d8b565b6001600160401b031611801561084757508181815181106107e757634e487b7160e01b600052603260045260246000fd5b60200260200101516060015182828151811061081357634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516108299190611d8b565b6001600160401b031661083c8587611d8b565b6001600160401b0316105b1561085757600092505050610870565b8061086181611e64565b9150506105b3565b5060019150505b949350505050565b6108948261088e6000546001600160a01b031690565b836116e0565b5050565b3360009081526005602090815260408083206001600160401b038087168552925290912054908216106109025760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064015b60405180910390fd5b6001600160401b0381165b3360009081526005602090815260408083206001600160401b038716845290915290205461093d90600190611df5565b8110156109f9573360009081526005602090815260408083206001600160401b03871684529091529020610972826001611d73565b8154811061099057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101543383526005825260408084206001600160401b038816855290925291208054839081106109db57634e487b7160e01b600052603260045260246000fd5b600091825260209091200155806109f181611e64565b91505061090d565b503360009081526005602090815260408083206001600160401b03861684529091529020805480610a3a57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590555050565b6000546001600160a01b03163314610a7e5760405162461bcd60e51b81526004016108f990611d3e565b60405133904780156108fc02916000818181858888f19350505050158015610aaa573d6000803e3d6000fd5b50565b600080610aba8585610f33565b90506000805b8251811015610b9857846001600160401b031682848381518110610af457634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610b0a9190611e0c565b6001600160401b031610610b2257509150610b9d9050565b828181518110610b4257634e487b7160e01b600052603260045260246000fd5b602002602001015160600151838281518110610b6e57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610b849190611d8b565b915080610b9081611e64565b915050610ac0565b509150505b9392505050565b6000546001600160a01b03163314610bce5760405162461bcd60e51b81526004016108f990611d3e565b600155565b6000546001600160a01b03163314610bfd5760405162461bcd60e51b81526004016108f990611d3e565b610c076000611737565b565b60606000805b8351811015610ca0576001600160a01b03851660009081526005602052604081208551909190869084908110610c5557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b031681526020019081526020016000208054905082610c8c9190611d73565b915080610c9881611e64565b915050610c0f565b50600080826001600160401b03811115610cca57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d1c57816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610ce85790505b50905060005b8551811015610f295760005b6001600160a01b03881660009081526005602052604081208851909190899085908110610d6b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b0316815260200190815260200160002080549050816001600160401b03161015610f16576001600160a01b03881660009081526005602052604081208851600392600192918b9087908110610de857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b03168152602001908152602001600020836001600160401b031681548110610e3857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154610e4d9190611df5565b81548110610e6b57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081018252600390930290910180546001600160a01b031683526001810154938301939093526002909201546001600160401b0380821693830193909352600160401b900490911660608201528351849086908110610eea57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508380610f0090611e64565b9450508080610f0e90611e7f565b915050610d2e565b5080610f2181611e64565b915050610d22565b5095945050505050565b6001600160a01b03821660009081526005602090815260408083206001600160401b038086168552925282205460609291811115610f8157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fd357816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610f9f5790505b50905060005b8151811015611104576001600160a01b03851660009081526005602090815260408083206001600160401b0388168452909152902080546003916001918490811061103457634e487b7160e01b600052603260045260246000fd5b90600052602060002001546110499190611df5565b8154811061106757634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081018252600390930290910180546001600160a01b031683526001810154938301939093526002909201546001600160401b0380821693830193909352600160401b9004909116606082015282518390839081106110e657634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806110fc90611e64565b915050610fd9565b509392505050565b6001600160a01b038516600090815260066020908152604080832033845290915290205460ff16156111805760405162461bcd60e51b815260206004820152601860248201527f4e6f7420616c6c6f77656420746f20616464206576656e74000000000000000060448201526064016108f9565b6001600160a01b03851660009081526004602052604090206002015460ff16156111db5760405162461bcd60e51b815260206004820152600c60248201526b55736572206973206177617960a01b60448201526064016108f9565b60006111e78385611d8b565b6001600160401b03169050620151808111156112455760405162461bcd60e51b815260206004820152601f60248201527f4576656e74206d757374207374617274202f20656e642073616d65206461790060448201526064016108f9565b6001600160a01b03861660009081526004602052604090206002015461010090046001600160401b0316158015906112a757506001600160a01b038616600090815260046020526040902060020154600160481b90046001600160401b031615155b15611372576001600160a01b0386166000908152600460205260409020600201546001600160401b0361010090910481169085161080159061132657506001600160a01b038616600090815260046020526040902060020154600160481b90046001600160401b031661131a8486611d8b565b6001600160401b031611155b6113725760405162461bcd60e51b815260206004820152601b60248201527f4576656e74206e6f74206265747765656e2073746172742f656e64000000000060448201526064016108f9565b6001600160a01b03861660009081526004602052604081205461139e906001600160401b038616611dd6565b9050803410156113e75760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016108f9565b6113f3878787876105a1565b61142f5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420617661696c61626c6560981b60448201526064016108f9565b6040805160808101825233815260208082018681526001600160401b03898116848601908152898216606086019081526003805460018082018355600083815298519183027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810180546001600160a01b039485166001600160a01b031990911617905596517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c88015593517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d909601805493518616600160401b026fffffffffffffffffffffffffffffffff1990941696861696909617929092179094558d16855260058452858520918c16855290835293832090548154948501825590835291209091015580156115ef576000611567826116bc565b905060006115758284611df5565b905081600260008282546115899190611d73565b90915550506001600160a01b038916600090815260046020526040812060010180548392906115b9908490611d73565b9091555050604051339082156108fc029083906000818181858888f193505050501580156115eb573d6000803e3d6000fd5b5050505b50505050505050565b6001600160a01b038216600090815260046020526040812054610b9d906001600160401b038416611dd6565b6000546001600160a01b0316331461164e5760405162461bcd60e51b81526004016108f990611d3e565b6001600160a01b0381166116b35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108f9565b610aaa81611737565b6000620186a0600154836116d09190611dd6565b6116da9190611db6565b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611732908490611787565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006117dc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118599092919063ffffffff16565b80519091501561173257808060200190518101906117fa9190611c27565b6117325760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108f9565b6060610870848460008585843b6118b25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108f9565b600080866001600160a01b031685876040516118ce9190611c76565b60006040518083038185875af1925050503d806000811461190b576040519150601f19603f3d011682016040523d82523d6000602084013e611910565b606091505b509150915061192082828661192b565b979650505050505050565b6060831561193a575081610b9d565b82511561194a5782518084602001fd5b8160405162461bcd60e51b81526004016108f99190611d0b565b80356001600160a01b038116811461197b57600080fd5b919050565b80356001600160401b038116811461197b57600080fd5b6000602082840312156119a8578081fd5b610b9d82611964565b600080604083850312156119c3578081fd5b6119cc83611964565b91506020808401356001600160401b03808211156119e8578384fd5b818601915086601f8301126119fb578384fd5b813581811115611a0d57611a0d611ebc565b8060051b604051601f19603f83011681018181108582111715611a3257611a32611ebc565b604052828152858101935084860182860187018b1015611a50578788fd5b8795505b83861015611a7957611a6581611980565b855260019590950194938601938601611a54565b508096505050505050509250929050565b60008060408385031215611a9c578182fd5b611aa583611964565b91506020830135611ab581611ed2565b809150509250929050565b60008060408385031215611ad2578182fd5b611adb83611964565b946020939093013593505050565b60008060408385031215611afb578182fd5b611b0483611964565b9150611b1260208401611980565b90509250929050565b600080600060608486031215611b2f578081fd5b611b3884611964565b9250611b4660208501611980565b9150611b5460408501611980565b90509250925092565b60008060008060808587031215611b72578081fd5b611b7b85611964565b9350611b8960208601611980565b9250611b9760408601611980565b9150611ba560608601611980565b905092959194509250565b600080600080600060a08688031215611bc7578081fd5b611bd086611964565b9450611bde60208701611980565b9350611bec60408701611980565b9250611bfa60608701611980565b949793965091946080013592915050565b600060208284031215611c1c578081fd5b8135610b9d81611ed2565b600060208284031215611c38578081fd5b8151610b9d81611ed2565b600060208284031215611c54578081fd5b5035919050565b60008060408385031215611c6d578182fd5b611b0483611980565b60008251611c88818460208701611e34565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b82811015611cfe57815180516001600160a01b031685528681015187860152858101516001600160401b0390811687870152606091820151169085015260809093019290850190600101611caf565b5091979650505050505050565b6020815260008251806020840152611d2a816040850160208701611e34565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611d8657611d86611ea6565b500190565b60006001600160401b03808316818516808303821115611dad57611dad611ea6565b01949350505050565b600082611dd157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611df057611df0611ea6565b500290565b600082821015611e0757611e07611ea6565b500390565b60006001600160401b0383811690831681811015611e2c57611e2c611ea6565b039392505050565b60005b83811015611e4f578181015183820152602001611e37565b83811115611e5e576000848401525b50505050565b6000600019821415611e7857611e78611ea6565b5060010190565b60006001600160401b0380831681811415611e9c57611e9c611ea6565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610aaa57600080fdfea2646970667358221220677f6ad2c6d0ea52011319f60d5d6d04f5f2bc7889951ab3ea972c484f85460664736f6c63430008040033",
        "devdoc": {
          "kind": "dev",
          "methods": {
            "owner()": {
              "details": "Returns the address of the current owner."
            },
            "renounceOwnership()": {
              "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
            },
            "transferOwnership(address)": {
              "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
          },
          "version": 1
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        },
        "storageLayout": {
          "storage": [
            {
              "astId": 389,
              "contract": "contracts/Scheduler.sol:Scheduler",
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address"
            },
            {
              "astId": 3321,
              "contract": "contracts/Scheduler.sol:Scheduler",
              "label": "schedulerFee",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256"
            },
            {
              "astId": 3324,
              "contract": "contracts/Scheduler.sol:Scheduler",
              "label": "feesCollected",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 3331,
              "contract": "contracts/Scheduler.sol:Scheduler",
              "label": "_events",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_struct(Event)3307_storage)dyn_storage"
            },
            {
              "astId": 3336,
              "contract": "contracts/Scheduler.sol:Scheduler",
              "label": "users",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(User)3318_storage)"
            },
            {
              "astId": 3343,
              "contract": "contracts/Scheduler.sol:Scheduler",
              "label": "_userEvents",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_uint64,t_array(t_uint256)dyn_storage))"
            },
            {
              "astId": 3349,
              "contract": "contracts/Scheduler.sol:Scheduler",
              "label": "_userBlockList",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
            }
          ],
          "types": {
            "t_address": {
              "encoding": "inplace",
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Event)3307_storage)dyn_storage": {
              "base": "t_struct(Event)3307_storage",
              "encoding": "dynamic_array",
              "label": "struct Scheduler.Event[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "base": "t_uint256",
              "encoding": "dynamic_array",
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "encoding": "inplace",
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "encoding": "inplace",
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => bool)",
              "numberOfBytes": "32",
              "value": "t_bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32",
              "value": "t_mapping(t_address,t_bool)"
            },
            "t_mapping(t_address,t_mapping(t_uint64,t_array(t_uint256)dyn_storage))": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => mapping(uint64 => uint256[]))",
              "numberOfBytes": "32",
              "value": "t_mapping(t_uint64,t_array(t_uint256)dyn_storage)"
            },
            "t_mapping(t_address,t_struct(User)3318_storage)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => struct Scheduler.User)",
              "numberOfBytes": "32",
              "value": "t_struct(User)3318_storage"
            },
            "t_mapping(t_uint64,t_array(t_uint256)dyn_storage)": {
              "encoding": "mapping",
              "key": "t_uint64",
              "label": "mapping(uint64 => uint256[])",
              "numberOfBytes": "32",
              "value": "t_array(t_uint256)dyn_storage"
            },
            "t_struct(Event)3307_storage": {
              "encoding": "inplace",
              "label": "struct Scheduler.Event",
              "members": [
                {
                  "astId": 3300,
                  "contract": "contracts/Scheduler.sol:Scheduler",
                  "label": "sender",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_address"
                },
                {
                  "astId": 3302,
                  "contract": "contracts/Scheduler.sol:Scheduler",
                  "label": "location",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_bytes32"
                },
                {
                  "astId": 3304,
                  "contract": "contracts/Scheduler.sol:Scheduler",
                  "label": "time",
                  "offset": 0,
                  "slot": "2",
                  "type": "t_uint64"
                },
                {
                  "astId": 3306,
                  "contract": "contracts/Scheduler.sol:Scheduler",
                  "label": "duration",
                  "offset": 8,
                  "slot": "2",
                  "type": "t_uint64"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(User)3318_storage": {
              "encoding": "inplace",
              "label": "struct Scheduler.User",
              "members": [
                {
                  "astId": 3309,
                  "contract": "contracts/Scheduler.sol:Scheduler",
                  "label": "payment",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_uint256"
                },
                {
                  "astId": 3311,
                  "contract": "contracts/Scheduler.sol:Scheduler",
                  "label": "balance",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_uint256"
                },
                {
                  "astId": 3313,
                  "contract": "contracts/Scheduler.sol:Scheduler",
                  "label": "isAway",
                  "offset": 0,
                  "slot": "2",
                  "type": "t_bool"
                },
                {
                  "astId": 3315,
                  "contract": "contracts/Scheduler.sol:Scheduler",
                  "label": "startTime",
                  "offset": 1,
                  "slot": "2",
                  "type": "t_uint64"
                },
                {
                  "astId": 3317,
                  "contract": "contracts/Scheduler.sol:Scheduler",
                  "label": "endTime",
                  "offset": 9,
                  "slot": "2",
                  "type": "t_uint64"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "encoding": "inplace",
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "encoding": "inplace",
              "label": "uint64",
              "numberOfBytes": "8"
            }
          }
        }
      }
    }
  },
  "11155111": {
    "sepolia": {
      "name": "sepolia",
      "chainId": "11155111",
      "contracts": {
        "SwarmMail": {
          "address": "0x8144484aaeE441b32F6ff73a8DaC7837f0793543",
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "types",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "emailSwarmLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "swarmThreadLocation",
                  "type": "bytes32"
                }
              ],
              "name": "addThread",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "blackListAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "createThread",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "fundsBalance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "fundsTransfer",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "types",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "length",
                  "type": "uint256"
                }
              ],
              "name": "getEmailRange",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "isEncryption",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "time",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "from",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "swarmLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bool",
                      "name": "signed",
                      "type": "bool"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "threads",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct SwarmMail.Email[]",
                  "name": "messages",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "locker",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "lockerLocation",
                  "type": "bytes32"
                }
              ],
              "name": "getLockerShares",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "withAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "keyLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bool",
                      "name": "revoked",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct SwarmMail.Share[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getPublicKeys",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "registered",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "pubKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "keyLocation",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32[]",
                  "name": "locations",
                  "type": "bytes32[]"
                }
              ],
              "name": "getThreads",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "isEncryption",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "time",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "from",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "swarmLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bool",
                      "name": "signed",
                      "type": "bool"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "threads",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct SwarmMail.Email[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getUserStats",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "numInboxItems",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numSentItems",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numLockers",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numSharedLockers",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numOneWayItems",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numThreads",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "length",
                  "type": "uint256"
                }
              ],
              "name": "getUserThreadsRange",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "isEncryption",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "time",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "from",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "swarmLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bool",
                      "name": "signed",
                      "type": "bool"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "threads",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct SwarmMail.Email[]",
                  "name": "",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "",
                  "type": "bytes32[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "pubKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "keyLocation",
                  "type": "bytes32"
                }
              ],
              "name": "register",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "release",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "types",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "locations",
                  "type": "bytes32[]"
                }
              ],
              "name": "removeEmails",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "idx",
                  "type": "uint256"
                }
              ],
              "name": "removeUserThread",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isEncryption",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "sendEmail",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isEncryption",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "sendOneWayEmail",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "lockerLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "keyLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "withAddress",
                  "type": "address"
                }
              ],
              "name": "shareLockerWith",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "in_types",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sender_types",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "signEmail",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "storeLocker",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "lockerLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "keyLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "withAddress",
                  "type": "address"
                }
              ],
              "name": "unshareLockerWith",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "transactionHash": "0xbc3b8fe952cad6d8a1636bcda702a5d10d7adaf941701f267baeba038cc0646b",
          "receipt": {
            "to": null,
            "from": "0xd27ffA0e47Fca8D3E757B4d2C408169859B8c419",
            "contractAddress": "0x8144484aaeE441b32F6ff73a8DaC7837f0793543",
            "transactionIndex": 27,
            "gasUsed": "3300461",
            "logsBloom": "0x
            "blockHash": "0x32d96388e5751564dc6516e1d945fe34a934d7a60e1481e327f0062effd34e5f",
            "transactionHash": "0xbc3b8fe952cad6d8a1636bcda702a5d10d7adaf941701f267baeba038cc0646b",
            "logs": [
              {
                "transactionIndex": 27,
                "blockNumber": 3470153,
                "transactionHash": "0xbc3b8fe952cad6d8a1636bcda702a5d10d7adaf941701f267baeba038cc0646b",
                "address": "0x8144484aaeE441b32F6ff73a8DaC7837f0793543",
                "topics": [
                  "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                  "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "0x000000000000000000000000d27ffa0e47fca8d3e757b4d2c408169859b8c419"
                ],
                "data": "0x",
                "logIndex": 46,
                "blockHash": "0x32d96388e5751564dc6516e1d945fe34a934d7a60e1481e327f0062effd34e5f"
              }
            ],
            "blockNumber": 3470153,
            "cumulativeGasUsed": "10084026",
            "status": 1,
            "byzantium": true
          },
          "args": [],
          "numDeployments": 1,
          "solcInputHash": "34108367d9c4da059aa36eb779d34930",
          "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"emailSwarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmThreadLocation\",\"type\":\"bytes32\"}],\"name\":\"addThread\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"blackListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"createThread\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getEmailRange\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEncryption\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"threads\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SwarmMail.Email[]\",\"name\":\"messages\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"lockerLocation\",\"type\":\"bytes32\"}],\"name\":\"getLockerShares\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"withAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct SwarmMail.Share[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPublicKeys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"pubKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keyLocation\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"locations\",\"type\":\"bytes32[]\"}],\"name\":\"getThreads\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEncryption\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"threads\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SwarmMail.Email[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numInboxItems\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSentItems\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLockers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSharedLockers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOneWayItems\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numThreads\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getUserThreadsRange\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEncryption\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"threads\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SwarmMail.Email[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pubKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keyLocation\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"types\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"locations\",\"type\":\"bytes32[]\"}],\"name\":\"removeEmails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"removeUserThread\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEncryption\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"sendEmail\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEncryption\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"sendOneWayEmail\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"lockerLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"withAddress\",\"type\":\"address\"}],\"name\":\"shareLockerWith\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"in_types\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sender_types\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"signEmail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"storeLocker\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"lockerLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"withAddress\",\"type\":\"address\"}],\"name\":\"unshareLockerWith\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwarmMail.sol\":\"SwarmMail\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SwarmMail.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n// import \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n//import \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/*\\nuint32\\t\\t10\\t\\t4,294,967,295\\nuint40\\t\\t13\\t\\t1,099,511,627,775\\nuint48\\t\\t15\\t\\t281,474,976,710,655\\nuint56\\t\\t17\\t\\t72,057,594,037,927,935\\nuint64\\t\\t20\\t\\t18,446,744,073,709,551,615\\nuint72\\t\\t22\\t\\t4,722,366,482,869,645,213,695\\nuint80\\t\\t25\\t\\t1,208,925,819,614,629,174,706,175\\nuint88\\t\\t27\\t\\t309,485,009,821,345,068,724,781,055\\nuint96\\t\\t29\\t\\t79,228,162,514,264,337,593,543,950,335\\n*/\\n\\n\\ncontract SwarmMail is Ownable, AccessControl /*, ReentrancyGuard*/ {\\n    struct Share {\\n        address withAddress;\\n        bytes32 keyLocation;\\n        bool    revoked;\\n    }\\n    /*struct Thread {\\n        bytes32  threadHash;\\n        Email[]  emails;\\n    }*/\\n    struct Email {\\n        bool      isEncryption;\\n        uint256   time;\\n        address   from;\\n        address   to;\\n        bytes32   swarmLocation;\\n        bool      signed;\\n        bytes32[] threads; // hashes to threads\\n    }\\n    /*\\n    // subscription request\\n    struct SubRequest {\\n        bytes32 fdpBuyerNameHash;\\n        address buyer;\\n        bytes32 subHash; //which subscription;\\n        bytes32 requestHash; // this is needed when\\n    }\\n    // active Bid\\n    struct ActiveBid {\\n        address seller;\\n        bytes32 requestHash;\\n    }\\n    // subscription items\\n    struct SubItem {\\n        bytes32 subHash;  // what subscription you are entitled to\\n        bytes32 unlockKeyLocation; // where is your key\\n        uint256 validTill; // until it is valid \\n    }*/\\n    struct User {\\n        bytes32 pubKey;\\n        bytes32 keyLocation;\\n        // PublicKey pubkey;\\n        Email[] inboxEmails;\\n        mapping(bytes32 => uint256) inboxEmailIds;\\n        Email[] sentEmails;\\n        mapping(bytes32 => uint256) sentEmailIds;\\n\\n        Email[] oneWayEmails;\\n        mapping(bytes32 => uint256) oneWayEmailIds;\\n\\n        Email[] lockerEmails;\\n        mapping(bytes32 => uint256) lockerEmailIds;\\n        \\n        mapping(bytes32 => Share[]) shares;\\n        mapping(bytes32 => mapping(address => uint256)) shareIds;\\n\\n        Email[] sharedLockerEmails;\\n        mapping(bytes32 => uint256) sharedLockerEmailIds;\\n\\n        //Email[] private threadEmails;\\n        bytes32[] threads;\\n        //mapping(bytes32 => uint256) threadEmailIds;\\n\\n        // // who wants to subscribe to what\\n        // SubRequest[] subRequests;\\n        // mapping(bytes32 => uint256) subRequestIds;\\n        // // what is user subscribed to\\n        // SubItem[] subItems;\\n        // mapping(bytes32 => uint256) subItemIds;\\n\\n        // ActiveBid[] activeBids;\\n        // mapping(bytes32 => uint256) activeBidIds;\\n\\n        // bytes32[] listedSubs; // everything user listed \\n\\n        //address[] contacts;\\n        //mapping(address => uint256) contactsIds;\\n    }\\n\\n    Email[] private Threads;\\n    mapping(bytes32 => uint256) threadHashIds;\\n\\n    mapping(address => User) private users;\\n    // mapping of blacklisted addresses (for spam)\\n    mapping(address => mapping(address => bool)) private blackList;\\n    //mapping(address => address)\\n    // mapping(address => address) userToPortable;\\n\\n    // to do add checkers for blacklisted addresses\\n    function blackListAddress(address addr) public {\\n        blackList[msg.sender][addr] = true;\\n    }\\n \\n    constructor() {\\n    }\\n\\n    receive() external payable {}\\n\\n    modifier isRegistered() { \\n        require(users[msg.sender].pubKey != bytes32(0), \\\"User not registred\\\");\\n        _;\\n    }\\n\\n    function getPublicKeys(address addr) public view returns (bool registered, bytes32 pubKey, bytes32 keyLocation/*, address portable*/) {\\n        registered = users[addr].pubKey != bytes32(0) ;\\n        pubKey = users[addr].pubKey;\\n        keyLocation = users[addr].keyLocation;\\n        //portable = userToPortable[addr];\\n    } \\n    function getUserStats(address addr) public view returns (uint numInboxItems, uint numSentItems, uint numLockers, uint numSharedLockers, uint numOneWayItems, uint numThreads /* uint numSubRequests, uint numSubItems, uint numActiveBids */) {\\n        numInboxItems = users[addr].inboxEmails.length;\\n        numSentItems  = users[addr].sentEmails.length;\\n        numLockers = users[addr].lockerEmails.length;\\n        numSharedLockers = users[addr].sharedLockerEmails.length;\\n        numOneWayItems = users[addr].oneWayEmails.length;\\n        numThreads = users[addr].threads.length;\\n    }\\n    function register(bytes32 pubKey, bytes32 keyLocation) public {\\n        User storage user = users[msg.sender];\\n        require(user.pubKey == bytes32(0), \\\"Already registered\\\");\\n        user.pubKey = pubKey;\\n        user.keyLocation = keyLocation;\\n        //userToPortable[msg.sender] = portable;\\n    }\\n    \\n\\n    /*\\n    function setPortableAddress(address addr) public {\\n        userToPortable[msg.sender] = addr;\\n    }\\n    function getPortableAddress(address addr) public view returns (address) {\\n        return userToPortable[addr];\\n    }\\n    */    \\n\\n    /*\\n    function getInboxCount(address addr) public view returns (uint) {\\n        return users[addr].inboxEmails.length;\\n    }\\n    function getSentCount(address addr) public view returns (uint) {\\n        return users[addr].sentEmails.length;\\n    }\\n    */\\n    /*function getInboxAt(address addr, uint index) public view returns (Email memory) {\\n        return users[addr].inboxEmails[index];\\n    }*/\\n    /*function getSentAt(address addr, uint index) public view returns (Email memory) {\\n        return users[addr].sentEmails[index];\\n    }*/\\n\\n\\n    /*\\n    function getInbox(address addr) public view returns (Email[] memory) {\\n        return users[addr].inboxEmails;\\n    }\\n    function getSent(address addr) public view returns (Email[] memory) {\\n        return users[addr].sentEmails;\\n    } */\\n\\n    /*    \\n    function getActiveSubItemsCount(address addr, uint start) public view returns (uint) {\\n        uint count = 0;\\t\\n        for (uint i = start; i < users[addr].subItems.length; i++) {\\n            if(block.timestamp <= users[addr].subItems[i].validTill) {\\n                ++count;\\n            }\\n        }\\n        return count;\\n    }*/ \\n\\n    // this will work for inbox / outbox \\n    function signEmail(uint in_types, uint sender_types, bytes32 swarmLocation) public {\\n        User storage u = users[msg.sender];\\n        Email memory e = getEmailByType(u, in_types, swarmLocation); \\n        // require(e.to == msg.sender, \\\"only receiver can sign\\\");\\n        \\n        if(e.to==msg.sender) { // receiver signs\\n            User storage sender = users[e.from]; // get sender\\n            Email storage e2 = getEmailByType(sender, sender_types, swarmLocation); \\n            e2.signed = true;\\n        }\\n        if(e.from==msg.sender) { // sender signs\\n            User storage receiver = users[e.from]; // get sender\\n            Email storage e2 = getEmailByType(receiver, sender_types, swarmLocation); \\n            e2.signed = true;\\n        }\\n    }\\n\\n    function sendEmail( address toAddress, bool isEncryption, bytes32 swarmLocation ) public payable {\\n        require(blackList[toAddress][msg.sender]==false, \\\"denied\\\");\\n\\n        User storage receiver = users[toAddress];\\n        require(!isEncryption || receiver.pubKey != bytes32(0), \\\"receiver not registered\\\");\\n        User storage sender = users[msg.sender];\\n        // create email\\n        Email memory email;\\n        email.isEncryption = isEncryption;\\n        email.time = block.timestamp;\\n        email.from = msg.sender;\\n        email.to = toAddress;\\n        email.swarmLocation = swarmLocation;\\n\\n        // add email\\n        sender.sentEmails.push(email);\\n        sender.sentEmailIds[swarmLocation] = sender.sentEmails.length;\\n        receiver.inboxEmails.push(email);\\n        receiver.inboxEmailIds[swarmLocation] = receiver.inboxEmails.length;\\n    }\\n\\n    function sendOneWayEmail( address toAddress, bool isEncryption, bytes32 swarmLocation ) public payable {\\n        require(blackList[toAddress][msg.sender]==false, \\\"denied\\\");\\n\\n        User storage receiver = users[toAddress];\\n        require(!isEncryption || receiver.pubKey != bytes32(0), \\\"receiver not registered\\\");\\n        \\n        // create email\\n        Email memory email;\\n        email.isEncryption = isEncryption;\\n        email.time = block.timestamp;\\n        email.from = msg.sender;\\n        email.to = toAddress;\\n        email.swarmLocation = swarmLocation;\\n\\n        // add email\\n        receiver.oneWayEmails.push(email);\\n        receiver.oneWayEmailIds[swarmLocation] = receiver.oneWayEmails.length;\\n    }\\n\\n    // try to do generif delete from array using ref to array and mapping \\n    function removeGenericEmail(bytes32 location, mapping(bytes32=>uint256) storage ids, Email[] storage array) private {\\n        require(ids[location] != 0, \\\"!Req\\\");\\n\\n        uint256 removeIndex = ids[location] - 1;\\n        // remove info\\n        uint256 lastIndex = array.length - 1;\\n        if (lastIndex != removeIndex) {\\n            array[removeIndex] = array[lastIndex];\\n            ids[array[lastIndex].swarmLocation] = removeIndex + 1;\\n        }\\n        array.pop();\\n        delete ids[location];\\n    }\\n\\n    function removeEmails(uint32 types, bytes32[] memory locations) public {\\n        User storage u = users[msg.sender];\\n        if(types == 0) {\\n            for (uint256 i; i < locations.length; i++) {\\n                removeGenericEmail(locations[i], u.inboxEmailIds, u.inboxEmails);\\n            }\\n        }\\n        else if(types == 1) {\\n            for (uint256 i; i < locations.length; i++) {\\n                removeGenericEmail(locations[i], u.sentEmailIds, u.sentEmails);\\n            }\\n        } \\n        else if(types == 2) {\\n            for (uint256 i; i < locations.length; i++) {\\n                removeGenericEmail(locations[i], u.lockerEmailIds, u.lockerEmails);\\n            }\\n        }\\n        else if(types == 3) {\\n            for (uint256 i; i < locations.length; i++) {\\n                removeGenericEmail(locations[i], u.oneWayEmailIds, u.oneWayEmails);\\n            }\\n        }\\n        // TODO remove threads \\n        /*else if(types == 5) {\\n            for (uint256 i; i < locations.length; i++) {\\n                removeGenericEmail(locations[i], u.threadEmailIds, u.threadEmails);\\n            }\\n        }*/\\n    }\\n\\n    function genEmailRange(uint start, uint length, Email[] memory array) private pure returns (Email[] memory) {\\n        Email[] memory emails = new Email[](length);\\n        //require(start + length <= array.length, \\\"Out of bounds\\\");\\n        uint count = 0;\\n        for(uint i = start; i < start + length; i++)\\n        {\\n            if(i<array.length)\\n            {\\n                emails[count] = array[i];\\n                ++count;\\n            }\\n        }\\n        return emails;\\n    }\\n\\n    function getEmailRange(address addr, uint types, uint start, uint length) public view returns (Email[] memory messages) {\\n        User storage u = users[addr];\\n        if(types == 0) {\\n            messages = genEmailRange(start, length, u.inboxEmails);\\n        } else if(types == 1) {\\n            messages = genEmailRange(start, length, u.sentEmails);\\n        } else if(types == 2) {\\n            messages = genEmailRange(start, length, u.lockerEmails);\\n        } else if(types == 3) {\\n            messages = genEmailRange(start, length, u.oneWayEmails);\\n        } else if(types == 4) {\\n            messages = genEmailRange(start, length, u.sharedLockerEmails);\\n        } /*else if(types == 5) {\\n            messages = genEmailRange(start, length, u.threadEmails);\\n        }*/\\n    }\\n\\n    function storeLocker(bytes32 swarmLocation) public payable {\\n        User storage sender = users[msg.sender];\\n        require(sender.lockerEmailIds[swarmLocation] == 0, \\\"!exist\\\");\\n        Email memory email;\\n        email.isEncryption = true;\\n        email.time = block.timestamp;\\n        email.from = msg.sender;\\n        email.to = msg.sender;\\n        email.swarmLocation = swarmLocation;\\n\\n        sender.lockerEmails.push(email);\\n        sender.lockerEmailIds[swarmLocation] = sender.lockerEmails.length;\\n    }\\n\\n    function shareLockerWith(bytes32 lockerLocation, bytes32 keyLocation, address withAddress) public payable {\\n        require(blackList[withAddress][msg.sender]==false, \\\"denied\\\");\\n\\n        User storage u = users[msg.sender];\\n\\n        // TODO storage fee for locker\\n        if(u.shareIds[lockerLocation][withAddress]==0) {\\n            Share memory share = Share(withAddress, keyLocation, false);\\n            u.shares[lockerLocation].push(share);\\n            u.shareIds[lockerLocation][withAddress] = u.shares[lockerLocation].length;\\n        } else {\\n            // update keyLocation\\n            Share storage sr = u.shares[lockerLocation] [u.shareIds[lockerLocation][withAddress]-1];\\n            sr.keyLocation = keyLocation;\\n        } \\n\\n        User storage u2 = users[withAddress];\\n        require(u2.sharedLockerEmailIds[keyLocation] == 0, \\\"exists\\\");\\n        Email memory email; \\n        email.isEncryption = true;\\n        email.time = block.timestamp;\\n        email.from = msg.sender;\\n        email.to = withAddress;\\n        email.swarmLocation = keyLocation;\\n        //u2.sharedLockerEmails.push(email);\\n        u2.sharedLockerEmails.push(email); // u.lockerEmails[u.lockerEmailIds[keyLocation]]);\\n        u2.sharedLockerEmailIds[keyLocation] = u2.sharedLockerEmails.length;\\n    }\\n    function unshareLockerWith(bytes32 lockerLocation, bytes32 keyLocation, address withAddress) public {\\n        User storage u = users[msg.sender];\\n        require(u.lockerEmailIds[lockerLocation] != 0, \\\"!exist\\\");\\n        require(u.shareIds[lockerLocation][withAddress] != 0, \\\"!noshare\\\");\\n        // you revoked share to withAddress\\n        u.shares[lockerLocation][u.shareIds[lockerLocation][withAddress]-1].revoked = true;\\n\\n        User storage u2 = users[withAddress];\\n        require(u2.sharedLockerEmailIds[keyLocation] != 0, \\\"!exist\\\");\\n        // needs to be owner to remove shared locker \\n        require(u2.lockerEmails[u2.lockerEmailIds[keyLocation]].from == msg.sender, \\\"!owner\\\");\\n        // u2.lockerEmails[u2.lockerEmailIds[keyLocation]].to == msg.sender\\n\\n        removeGenericEmail(keyLocation, u2.sharedLockerEmailIds, u2.sharedLockerEmails);\\n    }\\n    function getLockerShares(address locker, bytes32 lockerLocation) public view returns (Share[] memory) {\\n        return users[locker].shares[lockerLocation];\\n    }\\n    // End of Locker parts of SwarmMail contract\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    function getEmailByType(User storage u, uint types, bytes32 swarmLocation) private view returns (Email storage e) {\\n        if(types == 0) {\\n            e = u.inboxEmails[u.inboxEmailIds[swarmLocation]-1];\\n            return e;\\n        }\\n        else if(types == 1) {\\n            e = u.sentEmails[u.sentEmailIds[swarmLocation]-1];\\n            return e;\\n        } \\n        else if(types == 2) {\\n            e = u.lockerEmails[u.lockerEmailIds[swarmLocation]-1];\\n            return e;\\n        }\\n        else if(types == 3) {\\n            e = u.oneWayEmails[u.oneWayEmailIds[swarmLocation]-1];\\n            return e;\\n        }\\n        /*else if(types == 5) {\\n            return e;\\n        }*/ \\n        e = Threads[threadHashIds[swarmLocation]-1];\\n    }\\n\\n    function createThread(address to, bytes32 swarmLocation) public payable\\n    {\\n        require(blackList[to][msg.sender]==false, \\\"denied\\\");\\n\\n        Email memory email; \\n        email.isEncryption = true;\\n        email.time = block.timestamp;\\n        email.from = msg.sender;\\n        email.to = to;\\n        email.swarmLocation = swarmLocation;\\n\\n        User storage sender   = users[msg.sender];\\n        User storage receiver = users[to];\\n        \\n        bytes32 threadHash = keccak256(abi.encode(msg.sender, to, swarmLocation));\\n\\n        Threads.push(email);\\n        sender.threads.push(threadHash);\\n        receiver.threads.push(threadHash);\\n\\n        threadHashIds[threadHash] = Threads.length;\\n    }\\n\\n    function addThread(uint types, bytes32 emailSwarmLocation, address to, bytes32 swarmThreadLocation) public payable {\\n        User  storage sender = users[msg.sender];\\n        Email storage e = getEmailByType(sender, types, emailSwarmLocation);\\n        require(e.from == msg.sender || e.to == msg.sender, \\\"!owner\\\");\\n\\n        Email memory email; \\n        email.isEncryption = e.isEncryption;\\n        email.time = block.timestamp;\\n        email.from = msg.sender;\\n        email.to = to;\\n        email.swarmLocation = swarmThreadLocation;\\n\\n        Threads.push(email); \\n        bytes32 threadHash = keccak256(abi.encode(email.from, email.to, swarmThreadLocation));\\n        threadHashIds[threadHash] = Threads.length;\\n        //sender.threadEmailIds[swarmThreadLocation] = Threads.length;\\n        //sender.threadEmailIds[threadHash] = Threads.length;\\n        e.threads.push(threadHash);\\n    }\\n\\n    function getThreads(bytes32[] memory locations) public view returns (Email[] memory) {\\n        Email[] memory messages = new Email[](locations.length);\\n        for (uint256 i=0; i < locations.length; i++) {\\n            if(threadHashIds[locations[i]]!=0)\\n               messages[i] = Threads[threadHashIds[locations[i]]-1];\\n        }\\n        return messages;\\n    }\\n\\n    function getUserThreadsRange(address addr, uint start, uint length) public view returns (Email[] memory, bytes32[] memory) {\\n        Email[] memory emails = new Email[](length);\\n        bytes32[] memory locations = new bytes32[](length);\\n        uint count = 0;\\n        uint len = users[addr].threads.length;\\n        for(uint i = start; i < start + length; i++)\\n        {\\n            if(i<len)\\n            {\\n                bytes32 location = users[addr].threads[i];\\n                if(threadHashIds[location]!=0)\\n                {\\n                    emails[count] = Threads[threadHashIds[location]-1];\\n                    locations[count] = location;\\n                    ++count;\\n                }\\n            }\\n        }\\n        return (emails,locations);\\n    }\\n\\n    function removeUserThread(uint idx) public {\\n        User storage u = users[msg.sender];\\n        uint256 removeIndex = idx;\\n        // remove info\\n        uint256 lastIndex = u.threads.length - 1;\\n        if (lastIndex != removeIndex) {\\n            u.threads[removeIndex] = u.threads[lastIndex];\\n        }\\n        u.threads.pop();\\n    }\\n    /*\\n    function getUserThreads(address addr) public view returns (bytes32[] memory) {\\n        return users[addr].threads;\\n    }*/\\n    /*\\n    function getUserThreadEmails(address addr) public view returns (Email[] memory) {\\n        return getThreads(getUserThreads(addr));\\n    }*/ \\n    \\n    //uint256 public inEscrow = 0;\\n\\n\\n/*\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    uint256 private constant FEE_PRECISION = 1e5;  \\n    uint256 public marketFee = 1000; // 1%\\n    uint256 public minListingFee = 1000000 gwei; // min listing fee - 0.0001000 ETH\\n    uint256 public feesCollected = 0;\\n    uint256 public inEscrow = 0;\\n    bytes32 public constant ROLE_REPORTER = keccak256(\\\"ROLE_REPORTER\\\");\\n\\n    function getFee(uint256 _fee, uint256 amount) public pure returns (uint256) {\\n        return (amount * _fee) / FEE_PRECISION;\\n    }\\n    function setFee(uint256 newFee) public  {\\n        require(msg.sender==_owner, \\\"!\\\");\\n        marketFee = newFee; \\n    }\\n    function setListingFee(uint256 newListingFee) public  {\\n        require(msg.sender==_owner, \\\"!\\\");\\n        minListingFee = newListingFee; \\n    }      \\n\\n    struct Category {\\n        uint64[]     subIdxs;\\n    }\\n    mapping(bytes32 => Category) categories; // where is category in categories array\\n\\n    // Sub listings\\n    struct Sub {\\n        bytes32 subHash;\\n        bytes32 fdpSellerNameHash; //\\n        address seller;\\n        bytes32 swarmLocation; // metadata location\\n        uint256 price;\\n        bool    active; // is subscription active\\n        uint256 earned;  \\n        uint32  bids;\\n        uint32  sells;\\n        uint32  reports; // TODO add method to report for OWNERS\\n        uint16  daysValid;\\n    }\\n    Sub[] public  subscriptions;\\n    mapping(bytes32 => uint256) public subscriptionIds; \\n\\n    struct SubInfo {\\n        mapping(address => uint256) perSubscriberBalance; // balance per subscriber\\n        address[] subscribers; \\n    }\\n    mapping(bytes32 => SubInfo) subInfos; // where is sub in subscriptions array\\n\\n    function getSubRequestAt(address addr, uint index) public view returns (SubRequest memory) {\\n        return users[addr].subRequests[index];\\n    }\\n    function getSubItemAt(address addr, uint index) public view returns (SubItem memory) {\\n        return users[addr].subItems[index];\\n    }\\n    function getActiveBidAt(address addr, uint index) public view returns (ActiveBid memory) {\\n        return users[addr].activeBids[index];\\n    }    \\n    // todo remove \\n    function getSubItems(address addr, uint start, uint length) public view returns (SubItem[] memory items, uint last) {\\n        // either we  iterate through all items and return only those that are active\\n        // or we return all items and let the client filter them\\n        // iterate through active subItems\\n        items = new SubItem[](length);\\n        uint count = 0;\\n        last = 0; // init to 0\\n        \\n        for (uint i = start; i < users[addr].subItems.length; i++) {\\n            if(block.timestamp < users[addr].subItems[i].validTill) {\\n                if(count < length)\\n                {\\n                   items[count] = users[addr].subItems[i];\\n                   //items.push(users[addr].subItems[i]);\\n                   ++count;\\n                   last = i;\\n                } else \\n                    break;\\n            }\\n        }\\n        //return items;\\n    }\\n    function getSubItemBy(address addr, bytes32 subHash) public view returns (SubItem memory) {\\n        // check if subHash subItem is active\\n        require(block.timestamp <= users[addr].subItems[users[addr].subItemIds[subHash]-1].validTill, \\\"SubItem expired\\\");\\n        return users[addr].subItems[users[addr].subItemIds[subHash]-1];\\n    }\\n    function getAllSubItems(address addr) public view returns (SubItem[] memory) {\\n        // TODO return non active without keyLockLocation\\n        SubItem[] memory items = new SubItem[](users[addr].subItems.length);\\n        for (uint i = 0; i < users[addr].subItems.length; i++) {\\n            items[i] = users[addr].subItems[i];\\n            if(block.timestamp > items[i].validTill) {\\n                items[i].unlockKeyLocation = bytes32(0);\\n            }\\n        }\\n        return items; //users[addr].subItems;\\n    }\\n    function getListedSubs(address addr) public view returns (bytes32[] memory) {\\n        return users[addr].listedSubs;\\n    }\\n    function getActiveBids(address addr) public view returns (ActiveBid[] memory) {\\n        return users[addr].activeBids;\\n    }\\n    function getSubRequestByHash(address addr, bytes32 requestHash) public view returns (SubRequest memory) {\\n        return users[addr].subRequests[users[addr].subRequestIds[requestHash]-1];\\n    }\\n    function getSubRequests(address addr) public view returns (SubRequest[] memory) {\\n        return users[addr].subRequests;\\n    }\\n    function getSubSubscribers(bytes32 subHash) public view returns (address[] memory) {\\n        return subInfos[subHash].subscribers;\\n    }\\n    function getSubInfoBalance(bytes32 subHash, address forAddress) public view returns (uint256) {\\n        return subInfos[subHash].perSubscriberBalance[forAddress];\\n    }\\n    function getSubs() public view returns (Sub[] memory) {\\n        return subscriptions;\\n    }\\n    function getCategory(bytes32 category) public view returns (Category memory) {\\n        return categories[category];\\n    }\\n    function getSubByIndex(uint index) public view returns (Sub memory) {\\n        return subscriptions[index];\\n    }\\n    function getSubBy(bytes32 subHash) public view returns (Sub memory) {\\n        return subscriptions[subscriptionIds[subHash]-1];\\n    }\\n    function enableSub(bytes32 subHash, bool active) public {\\n        require(subscriptionIds[subHash] != 0, \\\"No Sub\\\"); // must exists\\n        Sub storage s = subscriptions[subscriptionIds[subHash] - 1]; \\n        require(s.seller == msg.sender, \\\"Not Seller\\\"); // only seller can enable subscription\\n        require(s.reports<4, \\\"Too many reports\\\"); // only seller can enable subscription\\n\\n        s.active = active;\\n    }\\n    function reportSub(bytes32 subHash) public {\\n        require(hasRole(ROLE_REPORTER, msg.sender),\\\"Not Reporter\\\");\\n        require(subscriptionIds[subHash] != 0, \\\"No Sub\\\"); // must exists\\n        Sub storage s = subscriptions[subscriptionIds[subHash] - 1]; \\n        s.reports = s.reports + 1;\\n        if(s.reports >= 3) {\\n            s.active = false;\\n        }\\n    }\\n    // Market to sell encrypted swarmLocation\\n    function listSub(bytes32 fdpSellerNameHash, bytes32 dataSwarmLocation, uint price, bytes32 category, address podAddress, uint16 daysValid) public payable {\\n        //bytes32 subHash = keccak256(abi.encode(msg.sender, fdpSeller, dataSwarmLocation, price, category, podIndex));\\n        require(msg.value>=minListingFee, \\\"minFee\\\"); // sent value must be equal to price\\n        require(daysValid>=1 && daysValid<=365, \\\"daysValid\\\"); // must not exists\\n\\n        bytes32 subHash = keccak256(abi.encode(msg.sender, fdpSellerNameHash, podAddress));// user can list same pod only once\\n        require(subscriptionIds[subHash] == 0, \\\"SubExists\\\"); // must not exists\\n\\n        Sub memory s = Sub(subHash, fdpSellerNameHash, msg.sender, dataSwarmLocation, price, true, 0, 0, 0, 0, daysValid);\\n        \\n        subscriptions.push(s);\\n        subscriptionIds[subHash] = subscriptions.length; // will point to 1 more than index\\n\\n        Category storage c = categories[category];\\n        c.subIdxs.push(uint64(subscriptions.length) - 1); // point to index\\n\\n        User storage seller = users[msg.sender];\\n        seller.listedSubs.push(subHash);\\n\\n        feesCollected+=msg.value;\\n    }\\n    function bidSub(bytes32 subHash, bytes32 fdpBuyerNameHash) public nonReentrant payable {\\n        // marketplace does not require user to be registred with smail -- TODO on front end and check \\n        // require(users[msg.sender].key != bytes32(0), \\\"Not reg\\\"); // user can not receive encrypted data\\n        require(subscriptionIds[subHash] != 0, \\\"No Sub\\\"); // must exists\\n        Sub storage s = subscriptions[subscriptionIds[subHash] - 1]; \\n\\n        require(s.active, \\\"Inactive\\\"); // must be active\\n        require(msg.value==s.price, \\\"Value!=price\\\"); // sent value must be equal to price\\n\\n        User storage seller = users[s.seller];\\n        bytes32 requestHash = keccak256(abi.encode(msg.sender, subHash, fdpBuyerNameHash)); //, block.timestamp));\\n        require(seller.subRequestIds[requestHash] == 0, \\\"Req exists\\\");\\n\\n        s.bids++;\\n\\n        SubRequest memory sr;\\n        sr.fdpBuyerNameHash = fdpBuyerNameHash;\\n        sr.buyer = msg.sender;\\n        sr.subHash = s.subHash;\\n        sr.requestHash = requestHash;\\n\\n        seller.subRequests.push(sr);\\n        seller.subRequestIds[requestHash] = seller.subRequests.length; // +1 of index\\n        \\n        inEscrow += msg.value;\\n\\n        ActiveBid memory ab;\\n        ab.requestHash = requestHash;\\n        ab.seller = msg.sender;\\n\\n        User storage buyer = users[msg.sender];\\n        buyer.activeBids.push(ab);      \\n        buyer.activeBidIds[requestHash] = buyer.activeBids.length; // +1 of index\\n    }\\n    // encryptedSecret is podReference encrypited with sharedSecret - podAddress, seller.address, buyer.address, encryptedSecret\\n    function sellSub(bytes32 requestHash, bytes32 encryptedKeyLocation) public payable {\\n        User storage seller = users[msg.sender];\\n        require(seller.subRequestIds[requestHash] != 0, \\\"No Req\\\");\\n\\n        SubRequest memory br = seller.subRequests[seller.subRequestIds[requestHash]-1];\\n        require(subscriptionIds[br.subHash] != 0, \\\"No Sub\\\"); // must exists\\n\\n        Sub storage s = subscriptions[subscriptionIds[br.subHash]-1]; \\n        require(msg.sender==s.seller, \\\"Not Sub Seller\\\"); // sent value must be equal to price\\n\\n        uint256 fee = getFee(marketFee, s.price);\\n        payable(msg.sender).transfer(s.price-fee);\\n        inEscrow -= s.price;\\n        feesCollected += fee;\\n\\n        s.sells++;\\n        s.earned += (s.price-fee);\\n\\n        User storage buyer = users[br.buyer];\\n        SubItem memory si;\\n        si.subHash = br.subHash;\\n        si.unlockKeyLocation = encryptedKeyLocation;\\n        si.validTill = block.timestamp + (s.daysValid * 86400); //(daysValid * 60*60*24) // days;\\n\\n        buyer.subItems.push(si);\\n        buyer.subItemIds[br.subHash] = buyer.subItems.length; // +1 of index (so call subHash -1)\\n\\n        if(subInfos[br.subHash].perSubscriberBalance[br.buyer]==0) // only add subscriber if not already added\\n           subInfos[br.subHash].subscribers.push(br.buyer);\\n\\n        subInfos[br.subHash].perSubscriberBalance[br.buyer] += (s.price-fee);\\n\\n        // seller removes request from his list\\n        removeSubRequest(msg.sender, requestHash); // remove from seller \\n        removeActiveBid(br.buyer, requestHash);\\n    }\\n    // removes active bids from SubRequests of seller and from Active bids of buyer\\n    function removeUserActiveBid(bytes32 requestHash) public {\\n        User storage u = users[msg.sender];\\n        require(u.activeBidIds[requestHash] != 0, \\\"!ab Req\\\");\\n        ActiveBid memory ab = u.activeBids[u.activeBidIds[requestHash]-1];\\n\\n        User storage seller = users[ab.seller];\\n        require(seller.subRequestIds[requestHash] != 0, \\\"!seller Req\\\");\\n\\n        SubRequest storage br = seller.subRequests[seller.subRequestIds[requestHash]-1];\\n        require(subscriptionIds[br.subHash] != 0, \\\"!sub\\\");\\n\\n        Sub memory s = subscriptions[subscriptionIds[br.subHash]-1];\\n        payable(msg.sender).transfer(s.price);\\n\\n        removeSubRequest(ab.seller, requestHash); // remove from seller \\n        removeActiveBid(msg.sender, requestHash);\\n    }\\n    function removeActiveBid(address user, bytes32 requestHash) private {\\n        User storage u = users[user];\\n        require(u.activeBidIds[requestHash] != 0, \\\"!ab Req\\\");\\n\\n        uint256 removeIndex = u.activeBidIds[requestHash] - 1;       \\n        uint256 lastIndex = u.activeBids.length - 1; // replace removeIndex with last item and pop last item\\n        if (lastIndex != removeIndex) {\\n            u.activeBids[removeIndex] = u.activeBids[lastIndex];\\n            u.activeBidIds[u.activeBids[removeIndex].requestHash] = removeIndex + 1;\\n        }\\n        u.activeBids.pop();\\n        delete u.activeBidIds[requestHash];\\n    }\\n    // user can remove subItem from his list if wishes to do so\\n    function removeSubItem(uint256 index) private {\\n        User storage u = users[msg.sender];\\n        require(index < u.subItems.length, \\\"!Index\\\");\\n\\n        uint256 lastIndex = u.subItems.length - 1;\\n        if (lastIndex != index) {\\n            u.subItems[index] = u.subItems[lastIndex];\\n        }\\n        u.subItems.pop();\\n    }\\n    // remove subRequest from seller needs to return money to bidder \\n    function removeSubRequest(address owner, bytes32 requestHash) private {\\n        User storage u = users[owner]; //msg.sender];\\n        require(u.subRequestIds[requestHash] != 0, \\\"!Req\\\");\\n\\n        uint256 removeIndex = u.subRequestIds[requestHash] - 1;\\n        uint256 lastIndex = u.subRequests.length - 1; // replace removeIndex with last item and pop last item\\n        if (lastIndex != removeIndex) {\\n            u.subRequests[removeIndex] = u.subRequests[lastIndex];\\n            u.subRequestIds[u.subRequests[lastIndex].requestHash] = removeIndex + 1;\\n        }\\n        u.subRequests.pop();\\n        delete u.subRequestIds[requestHash];\\n        //delete u.subRequests[lastIndex];\\n    }\\n*/\\n    function fundsBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }    \\n    function fundsTransfer() onlyOwner public payable {\\n        payable(msg.sender).transfer((address(this).balance));\\n    }\\n    function release(address token, uint amount) public virtual {\\n        SafeERC20.safeTransfer(IERC20(token), owner(), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc1e00894095a3cd907126a455bb8e5bd40d702eac669df4b0ab966e992cb6b0f\",\"license\":\"MIT\"}},\"version\":1}",
          "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000023565b62000073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613a4380620000836000396000f3fe6080604052600436106101dc5760003560e01c80636cd9fea011610102578063a217fddf11610095578063d2df294f11610064578063d2df294f14610608578063d547741f14610628578063da305b2014610648578063f2fde38b1461065b57600080fd5b8063a217fddf146105ad578063a3101d05146105c2578063b44407d9146105d5578063d2465fab146105f557600080fd5b80638da5cb5b116100d15780638da5cb5b146105325780638f138ced1461055a57806391d148541461057a5780639454932c1461059a57600080fd5b80636cd9fea0146104c9578063715018a6146104dc57806377226ccb146104f15780637d51f5f81461051f57600080fd5b806336568abe1161017a5780634e43603a116101495780634e43603a146103aa57806355e3a1d414610437578063567556a4146104645780635fcbb7d61461046c57600080fd5b806336568abe1461030b57806338b62de91461032b578063394737a21461033e5780633b0e01331461035e57600080fd5b8063248a9ca3116101b6578063248a9ca31461025f5780632e920a281461029e5780632f2ff15d146102cb5780632f926732146102eb57600080fd5b806301ffc9a7146101e85780630357371d1461021d578063140e67021461023f57600080fd5b366101e357005b600080fd5b3480156101f457600080fd5b5061020861020336600461357c565b61067b565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b5061023d610238366004613402565b6106b2565b005b34801561024b57600080fd5b5061023d61025a3660046135e0565b6106d2565b34801561026b57600080fd5b5061029061027a3660046134e4565b6000908152600160208190526040909120015490565b604051908152602001610214565b3480156102aa57600080fd5b506102be6102b9366004613495565b61084d565b60405161021491906137da565b3480156102d757600080fd5b5061023d6102e63660046134fc565b610a6d565b3480156102f757600080fd5b5061023d610306366004613527565b610a99565b34801561031757600080fd5b5061023d6103263660046134fc565b610afc565b61023d6103393660046133c4565b610b76565b34801561034a57600080fd5b5061023d61035936600461360b565b610d16565b34801561036a57600080fd5b5061023d6103793660046133aa565b3360009081526005602090815260408083206001600160a01b0394909416835292905220805460ff19166001179055565b3480156103b657600080fd5b5061040a6103c53660046133aa565b6001600160a01b031660009081526004602081905260409091206002810154918101546008820154600c8301546006840154600e909401549495929491939092909190565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610214565b34801561044357600080fd5b50610457610452366004613402565b610ebb565b604051610214919061381b565b61023d610f64565b34801561047857600080fd5b506104ac6104873660046133aa565b6001600160a01b03166000908152600460205260409020805460019091015481151592565b604080519315158452602084019290925290820152606001610214565b61023d6104d7366004613548565b610fbd565b3480156104e857600080fd5b5061023d611290565b3480156104fd57600080fd5b5061051161050c36600461342b565b6112c6565b6040516102149291906137ed565b61023d61052d366004613402565b6115a0565b34801561053e57600080fd5b506000546040516001600160a01b039091168152602001610214565b34801561056657600080fd5b5061023d6105753660046134e4565b611830565b34801561058657600080fd5b506102086105953660046134fc565b6118f8565b3480156105a657600080fd5b5047610290565b3480156105b957600080fd5b50610290600081565b61023d6105d03660046135a4565b611923565b3480156105e157600080fd5b5061023d6105f0366004613548565b611bc4565b61023d6106033660046133c4565b611db6565b34801561061457600080fd5b506102be61062336600461345d565b612030565b34801561063457600080fd5b5061023d6106433660046134fc565b612581565b61023d6106563660046134e4565b6125a8565b34801561066757600080fd5b5061023d6106763660046133aa565b6126ce565b60006001600160e01b03198216637965db0b60e01b14806106ac57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6106ce826106c86000546001600160a01b031690565b83612766565b5050565b336000908152600460205260408120906106ed8286856127b8565b6040805160e081018252825460ff90811615158252600184015460208084019190915260028501546001600160a01b03908116848601526003860154166060840152600485015460808401526005850154909116151560a083015260068401805484518184028101840190955280855292949360c0860193909283018282801561079657602002820191906000526020600020905b815481526020019060010190808311610782575b5050505050815250509050336001600160a01b031681606001516001600160a01b031614156107f8576040808201516001600160a01b031660009081526004602052908120906107e78287876127b8565b600501805460ff1916600117905550505b60408101516001600160a01b0316331415610846576040808201516001600160a01b031660009081526004602052908120906108358287876127b8565b600501805460ff1916600117905550505b5050505050565b60606000825167ffffffffffffffff81111561087957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108b257816020015b61089f6131f8565b8152602001906001900390816108975790505b50905060005b8351811015610a6657600360008583815181106108e557634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054600014610a5457600260016003600087858151811061092b57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000205461094c919061395e565b8154811061096a57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160e0810182526007909302909101805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c086019392830182828015610a1f57602002820191906000526020600020905b815481526020019060010190808311610a0b575b505050505081525050828281518110610a4857634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b80610a5e816139b8565b9150506108b8565b5092915050565b60008281526001602081905260409091200154610a8a81336128e9565b610a94838361294d565b505050565b336000908152600460205260409020805415610af15760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064015b60405180910390fd5b918255600190910155565b6001600160a01b0381163314610b6c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610ae8565b6106ce82826129b8565b6001600160a01b038316600090815260056020908152604080832033845290915290205460ff1615610bba5760405162461bcd60e51b8152600401610ae8906138b2565b6001600160a01b0383166000908152600460205260409020821580610bdf5750805415155b610c255760405162461bcd60e51b81526020600482015260176024820152761c9958d95a5d995c881b9bdd081c9959da5cdd195c9959604a1b6044820152606401610ae8565b610c2d6131f8565b831515815242602080830191825233604084019081526001600160a01b03888116606086019081526080860188815260068089018054600181810183556000928352918890208a51600790920201805491151560ff1992831617815598519189019190915594516002880180549186166001600160a01b03199283161790559251600388018054919095169316929092179092559051600485015560a0850151600585018054911515919093161790915560c08401518051859493610cf6938501920190613236565b505050600682015460009384526007909201602052506040909120555050565b33600090815260046020526040902063ffffffff8316610d8c5760005b8251811015610d8657610d74838281518110610d5f57634e487b7160e01b600052603260045260246000fd5b60200260200101518360030184600201612a1f565b80610d7e816139b8565b915050610d33565b50505050565b8263ffffffff1660011415610df15760005b8251811015610d8657610ddf838281518110610dca57634e487b7160e01b600052603260045260246000fd5b60200260200101518360050184600401612a1f565b80610de9816139b8565b915050610d9e565b8263ffffffff1660021415610e565760005b8251811015610d8657610e44838281518110610e2f57634e487b7160e01b600052603260045260246000fd5b60200260200101518360090184600801612a1f565b80610e4e816139b8565b915050610e03565b8263ffffffff1660031415610a945760005b8251811015610d8657610ea9838281518110610e9457634e487b7160e01b600052603260045260246000fd5b60200260200101518360070184600601612a1f565b80610eb3816139b8565b915050610e68565b6001600160a01b0382166000908152600460209081526040808320848452600a018252808320805482518185028101850190935280835260609492939192909184015b82821015610f58576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015460ff161515918301919091529083529092019101610efe565b50505050905092915050565b6000546001600160a01b03163314610f8e5760405162461bcd60e51b8152600401610ae8906138f2565b60405133904780156108fc02916000818181858888f19350505050158015610fba573d6000803e3d6000fd5b50565b6001600160a01b038116600090815260056020908152604080832033845290915290205460ff16156110015760405162461bcd60e51b8152600401610ae8906138b2565b336000908152600460209081526040808320868452600b810183528184206001600160a01b0386168552909252909120546110d257604080516060810182526001600160a01b03848116808352602080840188815260008587018181528b8252600a890184528782208054600180820183558285528685209951600390920290990180546001600160a01b0319169190981617875592519686019690965594516002909401805460ff1916941515949094179093558884529154600b86018352848420918452915291902055611142565b6000848152600a820160209081526040808320600b850183528184206001600160a01b038716855290925282205461110c9060019061395e565b8154811061112a57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600160039092020101849055505b6001600160a01b0382166000908152600460209081526040808320868452600d810190925290912054156111a15760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b6044820152606401610ae8565b6111a96131f8565b600180825242602080840191825233604085019081526001600160a01b0388811660608701908152608087018b8152600c8901805480890182556000918252908690208951600790920201805491151560ff1992831617815596519787019790975592516002860180549184166001600160a01b0319928316179055905160038601805491909316911617905551600483015560a0840151600583018054911515919094161790925560c08301518051849361126c926006850192910190613236565b505050600c8201546000958652600d90920160205250604090932092909255505050565b6000546001600160a01b031633146112ba5760405162461bcd60e51b8152600401610ae8906138f2565b6112c46000612c7a565b565b60608060008367ffffffffffffffff8111156112f257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561132b57816020015b6113186131f8565b8152602001906001900390816113105790505b50905060008467ffffffffffffffff81111561135757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611380578160200160208202803683370190505b506001600160a01b0388166000908152600460205260408120600e015491925090875b6113ad888a613927565b811015611590578181101561157e576001600160a01b038a166000908152600460205260408120600e018054839081106113f757634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050600360008281526020019081526020016000205460001461157c5760008181526003602052604090205460029061143d9060019061395e565b8154811061145b57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160e0810182526007909302909101805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c08601939283018282801561151057602002820191906000526020600020905b8154815260200190600101908083116114fc575b50505050508152505086858151811061153957634e487b7160e01b600052603260045260246000fd5b60200260200101819052508085858151811061156557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611579846139b8565b93505b505b80611588816139b8565b9150506113a3565b5092989197509095505050505050565b6001600160a01b038216600090815260056020908152604080832033845290915290205460ff16156115e45760405162461bcd60e51b8152600401610ae8906138b2565b6115ec6131f8565b60018152426020808301919091523360408084018290526001600160a01b0386166060808601829052608080870188905260008581526004875284812084825285822086519889019790975294870193909352908501879052919390910160408051601f19818403018152918152815160209283012060028054600181018255600091909152875160079091027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace8101805492151560ff19938416178155898601517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830155938901517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0820180546001600160a01b039283166001600160a01b03199182161790915560608b01517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad18401805491909316911617905560808901517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad282015560a08901517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad382018054911515919093161790915560c0880151805192955088946117e4937f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad490930192910190613236565b505050600e928301805460018181018355600092835260208084209092018490559390940180549384018155815283812090920181905560025490825260039092526040902055505050565b336000908152600460205260408120600e810154909183916118549060019061395e565b90508181146118bb5782600e01818154811061188057634e487b7160e01b600052603260045260246000fd5b906000526020600020015483600e0183815481106118ae57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001555b82600e018054806118dc57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3360009081526004602052604081209061193e8287876127b8565b60028101549091506001600160a01b0316331480611968575060038101546001600160a01b031633145b61199d5760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b6044820152606401610ae8565b6119a56131f8565b815460ff161515815242602080830191825233604084019081526001600160a01b03888116606086019081526080860189815260028054600181018255600091909152875160079091027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace8101805492151560ff1993841617815597517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0860180549186166001600160a01b031992831617905592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad1860180549190951693169290921790925590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad283015560a08501517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad3830180549115159190921617905560c08401518051859493611b45937f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad401920190613236565b50505060408082015160608084015183516001600160a01b03938416602082015292169282019290925290810185905260009060800160408051601f1981840301815291815281516020928301206002546000828152600385529283205560069095018054600181018255908252919020019290925550505050505050565b3360009081526004602090815260408083208684526009810190925290912054611c005760405162461bcd60e51b8152600401610ae8906138d2565b6000848152600b8201602090815260408083206001600160a01b0386168452909152902054611c5c5760405162461bcd60e51b8152602060048201526008602482015267216e6f736861726560c01b6044820152606401610ae8565b6000848152600a820160209081526040808320600b850183528184206001600160a01b03871685529092529091205460019190611c9a90839061395e565b81548110611cb857634e487b7160e01b600052603260045260246000fd5b60009182526020808320600392909202909101600201805460ff1916931515939093179092556001600160a01b0384168152600482526040808220868352600d8101909352902054611d1c5760405162461bcd60e51b8152600401610ae8906138d2565b60008481526009820160205260409020546008820180543392908110611d5257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600260079092020101546001600160a01b031614611da55760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b6044820152606401610ae8565b6108468482600d0183600c01612a1f565b6001600160a01b038316600090815260056020908152604080832033845290915290205460ff1615611dfa5760405162461bcd60e51b8152600401610ae8906138b2565b6001600160a01b0383166000908152600460205260409020821580611e1f5750805415155b611e655760405162461bcd60e51b81526020600482015260176024820152761c9958d95a5d995c881b9bdd081c9959da5cdd195c9959604a1b6044820152606401610ae8565b336000908152600460205260409020611e7c6131f8565b841515815242602080830191825233604084019081526001600160a01b03898116606086019081526080860189815260048089018054600181810183556000928352918890208a51600790920201805491151560ff1992831617815598519189019190915594516002880180549186166001600160a01b031992831617905592516003880180549190951693169290921790925590519084015560a08401516005840180549115159190921617905560c08301518051849392611f46926006850192910190613236565b5050506004808301546000868152600580860160209081526040808420949094556002808901805460018181018355918652948390208851600790960201805495151560ff1996871617815588840151918101919091559487015190850180546001600160a01b039283166001600160a01b031991821617909155606088015160038701805491909316911617905560808601519484019490945560a085015190830180549115159190921617905560c08301518051849361200f926006850192910190613236565b50505060028301546000948552600390930160205250506040909120555050565b6001600160a01b03841660009081526004602052604090206060908461215d57612156848483600201805480602002602001604051908101604052809291908181526020016000905b8282101561214d5760008481526020908190206040805160e08101825260078602909201805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c08601939283018282801561213557602002820191906000526020600020905b815481526020019060010190808311612121575b50505050508152505081526020019060010190612079565b50505050612cca565b9150612578565b846001141561226357612156848483600401805480602002602001604051908101604052809291908181526020016000905b8282101561214d5760008481526020908190206040805160e08101825260078602909201805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c08601939283018282801561224b57602002820191906000526020600020905b815481526020019060010190808311612237575b5050505050815250508152602001906001019061218f565b846002141561236957612156848483600801805480602002602001604051908101604052809291908181526020016000905b8282101561214d5760008481526020908190206040805160e08101825260078602909201805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c08601939283018282801561235157602002820191906000526020600020905b81548152602001906001019080831161233d575b50505050508152505081526020019060010190612295565b846003141561246f57612156848483600601805480602002602001604051908101604052809291908181526020016000905b8282101561214d5760008481526020908190206040805160e08101825260078602909201805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c08601939283018282801561245757602002820191906000526020600020905b815481526020019060010190808311612443575b5050505050815250508152602001906001019061239b565b846004141561257857612575848483600c01805480602002602001604051908101604052809291908181526020016000905b8282101561214d5760008481526020908190206040805160e08101825260078602909201805460ff9081161515845260018201548486015260028201546001600160a01b0390811685850152600383015416606085015260048201546080850152600582015416151560a08401526006810180548351818702810187019094528084529394919360c08601939283018282801561255d57602002820191906000526020600020905b815481526020019060010190808311612549575b505050505081525050815260200190600101906124a1565b91505b50949350505050565b6000828152600160208190526040909120015461259e81336128e9565b610a9483836129b8565b3360009081526004602090815260408083208484526009810190925290912054156125e55760405162461bcd60e51b8152600401610ae8906138d2565b6125ed6131f8565b60018082524260208084019182523360408501818152606086019182526080860188815260088801805480880182556000918252908590208851600790920201805460ff1990811692151592909217815595519686019690965590516002850180546001600160a01b03199081166001600160a01b0393841617909155925160038601805490941691161790915551600483015560a08401516005830180549094169015151790925560c0830151805184936126b0926006850192910190613236565b50505060088201546000938452600990920160205250604090912055565b6000546001600160a01b031633146126f85760405162461bcd60e51b8152600401610ae8906138f2565b6001600160a01b03811661275d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ae8565b610fba81612c7a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a94908490612dcc565b60008261281457600082815260038501602052604090205460028501906127e19060019061395e565b815481106127ff57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020190506128e2565b826001141561283f57600082815260058501602052604090205460048501906127e19060019061395e565b826002141561286a57600082815260098501602052604090205460088501906127e19060019061395e565b826003141561289557600082815260078501602052604090205460068501906127e19060019061395e565b6000828152600360205260409020546002906128b39060019061395e565b815481106128d157634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020190505b9392505050565b6128f382826118f8565b6106ce5761290b816001600160a01b03166014612e9e565b612916836020612e9e565b604051602001612927929190613765565b60408051601f198184030181529082905262461bcd60e51b8252610ae89160040161387f565b61295782826118f8565b6106ce5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6129c282826118f8565b156106ce5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600083815260208390526040902054612a635760405162461bcd60e51b8152600401610ae8906020808252600490820152632152657160e01b604082015260600190565b600083815260208390526040812054612a7e9060019061395e565b8254909150600090612a929060019061395e565b9050818114612be057828181548110612abb57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201838381548110612ae957634e487b7160e01b600052603260045260246000fd5b600091825260209091208254600790920201805460ff928316151560ff199182161782556001808501549083015560028085015490830180546001600160a01b03199081166001600160a01b03938416179091556003808701549085018054909216921691909117905560048085015490830155600580850154908301805491909416151591161790915560068083018054612b889284019190613281565b50612b9891508390506001613927565b846000858481548110612bbb57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600401548152602001908152602001600020819055505b82805480612bfe57634e487b7160e01b600052603160045260246000fd5b600082815260208120600760001990930192830201805460ff199081168255600182018390556002820180546001600160a01b0319908116909155600383018054909116905560048201839055600582018054909116905590612c6460068301826132c1565b5050905550505060009182526020526040812055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060008367ffffffffffffffff811115612cf557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612d2e57816020015b612d1b6131f8565b815260200190600190039081612d135790505b5090506000855b612d3f8688613927565b811015612dc1578451811015612daf57848181518110612d6f57634e487b7160e01b600052603260045260246000fd5b6020026020010151838381518110612d9757634e487b7160e01b600052603260045260246000fd5b602002602001018190525081612dac906139b8565b91505b80612db9816139b8565b915050612d35565b509095945050505050565b6000612e21826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130809092919063ffffffff16565b805190915015610a945780806020019051810190612e3f91906134c8565b610a945760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ae8565b60606000612ead83600261393f565b612eb8906002613927565b67ffffffffffffffff811115612ede57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612f08576020820181803683370190505b509050600360fc1b81600081518110612f3157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612f6e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612f9284600261393f565b612f9d906001613927565b90505b6001811115613031576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612fdf57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061300357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361302a816139a1565b9050612fa0565b5083156128e25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ae8565b606061308f8484600085613097565b949350505050565b6060824710156130f85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ae8565b843b6131465760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ae8565b600080866001600160a01b031685876040516131629190613749565b60006040518083038185875af1925050503d806000811461319f576040519150601f19603f3d011682016040523d82523d6000602084013e6131a4565b606091505b50915091506131b48282866131bf565b979650505050505050565b606083156131ce5750816128e2565b8251156131de5782518084602001fd5b8160405162461bcd60e51b8152600401610ae8919061387f565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c081019190915290565b828054828255906000526020600020908101928215613271579160200282015b82811115613271578251825591602001919060010190613256565b5061327d9291506132db565b5090565b8280548282559060005260206000209081019282156132715760005260206000209182015b828111156132715782548255916001019190600101906132a6565b5080546000825590600052602060002090810190610fba91905b5b8082111561327d57600081556001016132dc565b80356001600160a01b038116811461330757600080fd5b919050565b600082601f83011261331c578081fd5b8135602067ffffffffffffffff80831115613339576133396139e9565b8260051b604051601f19603f8301168101818110848211171561335e5761335e6139e9565b6040528481528381019250868401828801850189101561337c578687fd5b8692505b8583101561339e578035845292840192600192909201918401613380565b50979650505050505050565b6000602082840312156133bb578081fd5b6128e2826132f0565b6000806000606084860312156133d8578182fd5b6133e1846132f0565b925060208401356133f1816139ff565b929592945050506040919091013590565b60008060408385031215613414578182fd5b61341d836132f0565b946020939093013593505050565b60008060006060848603121561343f578283fd5b613448846132f0565b95602085013595506040909401359392505050565b60008060008060808587031215613472578081fd5b61347b856132f0565b966020860135965060408601359560600135945092505050565b6000602082840312156134a6578081fd5b813567ffffffffffffffff8111156134bc578182fd5b61308f8482850161330c565b6000602082840312156134d9578081fd5b81516128e2816139ff565b6000602082840312156134f5578081fd5b5035919050565b6000806040838503121561350e578182fd5b8235915061351e602084016132f0565b90509250929050565b60008060408385031215613539578182fd5b50508035926020909101359150565b60008060006060848603121561355c578283fd5b8335925060208401359150613573604085016132f0565b90509250925092565b60006020828403121561358d578081fd5b81356001600160e01b0319811681146128e2578182fd5b600080600080608085870312156135b9578182fd5b84359350602085013592506135d0604086016132f0565b9396929550929360600135925050565b6000806000606084860312156135f4578081fd5b505081359360208301359350604090920135919050565b6000806040838503121561361d578182fd5b823563ffffffff81168114613630578283fd5b9150602083013567ffffffffffffffff81111561364b578182fd5b6136578582860161330c565b9150509250929050565b6000815180845260208085019450808401835b8381101561369057815187529582019590820190600101613674565b509495945050505050565b6000815180845260208085019450848260051b8601828601855b8581101561373c578383038952815180511515845285810151868501526040808201516001600160a01b0390811691860191909152606080830151909116908501526080808201519085015260a08082015115159085015260c09081015160e09185018290529061372881860183613661565b9a87019a94505050908401906001016136b5565b5090979650505050505050565b6000825161375b818460208701613975565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161379d816017850160208801613975565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516137ce816028840160208801613975565b01602801949350505050565b6020815260006128e2602083018461369b565b604081526000613800604083018561369b565b82810360208401526138128185613661565b95945050505050565b602080825282518282018190526000919060409081850190868401855b8281101561387257815180516001600160a01b03168552868101518786015285015115158585015260609093019290850190600101613838565b5091979650505050505050565b602081526000825180602084015261389e816040850160208701613975565b601f01601f19169190910160400192915050565b60208082526006908201526519195b9a595960d21b604082015260600190565b60208082526006908201526508595e1a5cdd60d21b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561393a5761393a6139d3565b500190565b6000816000190483118215151615613959576139596139d3565b500290565b600082821015613970576139706139d3565b500390565b60005b83811015613990578181015183820152602001613978565b83811115610d865750506000910152565b6000816139b0576139b06139d3565b506000190190565b60006000198214156139cc576139cc6139d3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610fba57600080fdfea26469706673582212206c5408974749811e2c56b4cdd87da89a7a6ee0498210a89cfe7e06bc48d9f08f64736f6c63430008040033",
          "deployedBytecode": "",
          "devdoc": {
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          },
          "storageLayout": {
            "storage": [
              {
                "astId": 389,
                "contract": "contracts/SwarmMail.sol:SwarmMail",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 24,
                "contract": "contracts/SwarmMail.sol:SwarmMail",
                "label": "_roles",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
              },
              {
                "astId": 4254,
                "contract": "contracts/SwarmMail.sol:SwarmMail",
                "label": "Threads",
                "offset": 0,
                "slot": "2",
                "type": "t_array(t_struct(Email)4190_storage)dyn_storage"
              },
              {
                "astId": 4258,
                "contract": "contracts/SwarmMail.sol:SwarmMail",
                "label": "threadHashIds",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_bytes32,t_uint256)"
              },
              {
                "astId": 4263,
                "contract": "contracts/SwarmMail.sol:SwarmMail",
                "label": "users",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_address,t_struct(User)4250_storage)"
              },
              {
                "astId": 4269,
                "contract": "contracts/SwarmMail.sol:SwarmMail",
                "label": "blackList",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_bytes32)dyn_storage": {
                "base": "t_bytes32",
                "encoding": "dynamic_array",
                "label": "bytes32[]",
                "numberOfBytes": "32"
              },
              "t_array(t_struct(Email)4190_storage)dyn_storage": {
                "base": "t_struct(Email)4190_storage",
                "encoding": "dynamic_array",
                "label": "struct SwarmMail.Email[]",
                "numberOfBytes": "32"
              },
              "t_array(t_struct(Share)4174_storage)dyn_storage": {
                "base": "t_struct(Share)4174_storage",
                "encoding": "dynamic_array",
                "label": "struct SwarmMail.Share[]",
                "numberOfBytes": "32"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              },
              "t_mapping(t_address,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
              },
              "t_mapping(t_address,t_struct(User)4250_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct SwarmMail.User)",
                "numberOfBytes": "32",
                "value": "t_struct(User)4250_storage"
              },
              "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_mapping(t_bytes32,t_array(t_struct(Share)4174_storage)dyn_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => struct SwarmMail.Share[])",
                "numberOfBytes": "32",
                "value": "t_array(t_struct(Share)4174_storage)dyn_storage"
              },
              "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(address => uint256))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_uint256)"
              },
              "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => struct AccessControl.RoleData)",
                "numberOfBytes": "32",
                "value": "t_struct(RoleData)19_storage"
              },
              "t_mapping(t_bytes32,t_uint256)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_struct(Email)4190_storage": {
                "encoding": "inplace",
                "label": "struct SwarmMail.Email",
                "members": [
                  {
                    "astId": 4176,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "isEncryption",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_bool"
                  },
                  {
                    "astId": 4178,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "time",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 4180,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "from",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_address"
                  },
                  {
                    "astId": 4182,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "to",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_address"
                  },
                  {
                    "astId": 4184,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "swarmLocation",
                    "offset": 0,
                    "slot": "4",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 4186,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "signed",
                    "offset": 0,
                    "slot": "5",
                    "type": "t_bool"
                  },
                  {
                    "astId": 4189,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "threads",
                    "offset": 0,
                    "slot": "6",
                    "type": "t_array(t_bytes32)dyn_storage"
                  }
                ],
                "numberOfBytes": "224"
              },
              "t_struct(RoleData)19_storage": {
                "encoding": "inplace",
                "label": "struct AccessControl.RoleData",
                "members": [
                  {
                    "astId": 16,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "members",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_mapping(t_address,t_bool)"
                  },
                  {
                    "astId": 18,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "adminRole",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_bytes32"
                  }
                ],
                "numberOfBytes": "64"
              },
              "t_struct(Share)4174_storage": {
                "encoding": "inplace",
                "label": "struct SwarmMail.Share",
                "members": [
                  {
                    "astId": 4169,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "withAddress",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_address"
                  },
                  {
                    "astId": 4171,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "keyLocation",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 4173,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "revoked",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_bool"
                  }
                ],
                "numberOfBytes": "96"
              },
              "t_struct(User)4250_storage": {
                "encoding": "inplace",
                "label": "struct SwarmMail.User",
                "members": [
                  {
                    "astId": 4192,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "pubKey",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 4194,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "keyLocation",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 4198,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "inboxEmails",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_array(t_struct(Email)4190_storage)dyn_storage"
                  },
                  {
                    "astId": 4202,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "inboxEmailIds",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_mapping(t_bytes32,t_uint256)"
                  },
                  {
                    "astId": 4206,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "sentEmails",
                    "offset": 0,
                    "slot": "4",
                    "type": "t_array(t_struct(Email)4190_storage)dyn_storage"
                  },
                  {
                    "astId": 4210,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "sentEmailIds",
                    "offset": 0,
                    "slot": "5",
                    "type": "t_mapping(t_bytes32,t_uint256)"
                  },
                  {
                    "astId": 4214,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "oneWayEmails",
                    "offset": 0,
                    "slot": "6",
                    "type": "t_array(t_struct(Email)4190_storage)dyn_storage"
                  },
                  {
                    "astId": 4218,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "oneWayEmailIds",
                    "offset": 0,
                    "slot": "7",
                    "type": "t_mapping(t_bytes32,t_uint256)"
                  },
                  {
                    "astId": 4222,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "lockerEmails",
                    "offset": 0,
                    "slot": "8",
                    "type": "t_array(t_struct(Email)4190_storage)dyn_storage"
                  },
                  {
                    "astId": 4226,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "lockerEmailIds",
                    "offset": 0,
                    "slot": "9",
                    "type": "t_mapping(t_bytes32,t_uint256)"
                  },
                  {
                    "astId": 4232,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "shares",
                    "offset": 0,
                    "slot": "10",
                    "type": "t_mapping(t_bytes32,t_array(t_struct(Share)4174_storage)dyn_storage)"
                  },
                  {
                    "astId": 4238,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "shareIds",
                    "offset": 0,
                    "slot": "11",
                    "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
                  },
                  {
                    "astId": 4242,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "sharedLockerEmails",
                    "offset": 0,
                    "slot": "12",
                    "type": "t_array(t_struct(Email)4190_storage)dyn_storage"
                  },
                  {
                    "astId": 4246,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "sharedLockerEmailIds",
                    "offset": 0,
                    "slot": "13",
                    "type": "t_mapping(t_bytes32,t_uint256)"
                  },
                  {
                    "astId": 4249,
                    "contract": "contracts/SwarmMail.sol:SwarmMail",
                    "label": "threads",
                    "offset": 0,
                    "slot": "14",
                    "type": "t_array(t_bytes32)dyn_storage"
                  }
                ],
                "numberOfBytes": "480"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          }
        },
        "DataHub": {
          "address": "0xbF38b92a9baE1e23e150A66c7A44412828210371",
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ROLE_REPORTER",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "fdpBuyerNameHash",
                  "type": "bytes32"
                }
              ],
              "name": "bidSub",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "active",
                  "type": "bool"
                }
              ],
              "name": "enableSub",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "feesCollected",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "fundsBalance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "fundsTransfer",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getActiveBidAt",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "requestHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "served",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataHub.ActiveBid",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getActiveBids",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "requestHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "served",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataHub.ActiveBid[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "requestHash",
                  "type": "bytes32"
                }
              ],
              "name": "getActiveBidsByHash",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "requestHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "served",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataHub.ActiveBid",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getAllSubItems",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "unlockKeyLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "validTill",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct DataHub.SubItem[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "nameHash",
                  "type": "bytes32"
                }
              ],
              "name": "getAllSubItemsForNameHash",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "unlockKeyLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "validTill",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct DataHub.SubItem[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "category",
                  "type": "bytes32"
                }
              ],
              "name": "getCategory",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint64[]",
                      "name": "subIdxs",
                      "type": "uint64[]"
                    }
                  ],
                  "internalType": "struct DataHub.Category",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_fee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "getFee",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getListedSubs",
              "outputs": [
                {
                  "internalType": "bytes32[]",
                  "name": "",
                  "type": "bytes32[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "nameHash",
                  "type": "bytes32"
                }
              ],
              "name": "getNameHashSubItems",
              "outputs": [
                {
                  "internalType": "bytes32[]",
                  "name": "",
                  "type": "bytes32[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getPortableAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                }
              ],
              "name": "getSubBy",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "fdpSellerNameHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "swarmLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "price",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "active",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "earned",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "bids",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "sells",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "reports",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint16",
                      "name": "daysValid",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct DataHub.Sub",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getSubByIndex",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "fdpSellerNameHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "swarmLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "price",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "active",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "earned",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "bids",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "sells",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "reports",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint16",
                      "name": "daysValid",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct DataHub.Sub",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "forAddress",
                  "type": "address"
                }
              ],
              "name": "getSubInfoBalance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getSubItemAt",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "unlockKeyLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "validTill",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct DataHub.SubItem",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "length",
                  "type": "uint256"
                }
              ],
              "name": "getSubItems",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "unlockKeyLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "validTill",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct DataHub.SubItem[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint256",
                  "name": "last",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getSubRequestAt",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "fdpBuyerNameHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "requestHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "served",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataHub.SubRequest",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "requestHash",
                  "type": "bytes32"
                }
              ],
              "name": "getSubRequestByHash",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "fdpBuyerNameHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "requestHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "served",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataHub.SubRequest",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getSubRequests",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "fdpBuyerNameHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "requestHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "served",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataHub.SubRequest[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                }
              ],
              "name": "getSubSubscribers",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "",
                  "type": "address[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getSubs",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "subHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "fdpSellerNameHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "swarmLocation",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "price",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "active",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "earned",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "bids",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "sells",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "reports",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint16",
                      "name": "daysValid",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct DataHub.Sub[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "getUserStats",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "numSubRequests",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numSubItems",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numActiveBids",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numListedSubs",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "inEscrow",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "fdpSellerNameHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "dataSwarmLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "category",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "podAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint16",
                  "name": "daysValid",
                  "type": "uint16"
                }
              ],
              "name": "listSub",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "marketFee",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "minListingFee",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "release",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "requestHash",
                  "type": "bytes32"
                }
              ],
              "name": "removeUserActiveBid",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                }
              ],
              "name": "reportSub",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "requestHash",
                  "type": "bytes32"
                }
              ],
              "name": "requestAgain",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "requestHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "encryptedKeyLocation",
                  "type": "bytes32"
                }
              ],
              "name": "sellSub",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "newFee",
                  "type": "uint256"
                }
              ],
              "name": "setFee",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "newListingFee",
                  "type": "uint256"
                }
              ],
              "name": "setListingFee",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "setPortableAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "name": "subscriptionIds",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "subscriptions",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "subHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "fdpSellerNameHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "seller",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "swarmLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "active",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "earned",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "bids",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "sells",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "reports",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "daysValid",
                  "type": "uint16"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "transactionHash": "0x59201b2be3bf99e95eec05e853bda3c5c5bf695dd107e590cefe4ed4f90880df",
          "receipt": {
            "to": null,
            "from": "0xd27ffA0e47Fca8D3E757B4d2C408169859B8c419",
            "contractAddress": "0xbF38b92a9baE1e23e150A66c7A44412828210371",
            "transactionIndex": 24,
            "gasUsed": "3981185",
            "logsBloom": "0x
            "blockHash": "0xa6ed62a65caea63d74929bbc4a36153026371000109d14bb94bf89ce6b3c68f2",
            "transactionHash": "0x59201b2be3bf99e95eec05e853bda3c5c5bf695dd107e590cefe4ed4f90880df",
            "logs": [
              {
                "transactionIndex": 24,
                "blockNumber": 3470154,
                "transactionHash": "0x59201b2be3bf99e95eec05e853bda3c5c5bf695dd107e590cefe4ed4f90880df",
                "address": "0xbF38b92a9baE1e23e150A66c7A44412828210371",
                "topics": [
                  "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                  "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "0x000000000000000000000000d27ffa0e47fca8d3e757b4d2c408169859b8c419"
                ],
                "data": "0x",
                "logIndex": 37,
                "blockHash": "0xa6ed62a65caea63d74929bbc4a36153026371000109d14bb94bf89ce6b3c68f2"
              }
            ],
            "blockNumber": 3470154,
            "cumulativeGasUsed": "9838812",
            "status": 1,
            "byzantium": true
          },
          "args": [],
          "numDeployments": 1,
          "solcInputHash": "34108367d9c4da059aa36eb779d34930",
          "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_REPORTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fdpBuyerNameHash\",\"type\":\"bytes32\"}],\"name\":\"bidSub\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"enableSub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getActiveBidAt\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"served\",\"type\":\"bool\"}],\"internalType\":\"struct DataHub.ActiveBid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getActiveBids\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"served\",\"type\":\"bool\"}],\"internalType\":\"struct DataHub.ActiveBid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"getActiveBidsByHash\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"served\",\"type\":\"bool\"}],\"internalType\":\"struct DataHub.ActiveBid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAllSubItems\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"unlockKeyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validTill\",\"type\":\"uint256\"}],\"internalType\":\"struct DataHub.SubItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nameHash\",\"type\":\"bytes32\"}],\"name\":\"getAllSubItemsForNameHash\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"unlockKeyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validTill\",\"type\":\"uint256\"}],\"internalType\":\"struct DataHub.SubItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"category\",\"type\":\"bytes32\"}],\"name\":\"getCategory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64[]\",\"name\":\"subIdxs\",\"type\":\"uint64[]\"}],\"internalType\":\"struct DataHub.Category\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getListedSubs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nameHash\",\"type\":\"bytes32\"}],\"name\":\"getNameHashSubItems\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPortableAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"}],\"name\":\"getSubBy\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fdpSellerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"bids\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sells\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reports\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"daysValid\",\"type\":\"uint16\"}],\"internalType\":\"struct DataHub.Sub\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSubByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fdpSellerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"bids\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sells\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reports\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"daysValid\",\"type\":\"uint16\"}],\"internalType\":\"struct DataHub.Sub\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"getSubInfoBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSubItemAt\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"unlockKeyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validTill\",\"type\":\"uint256\"}],\"internalType\":\"struct DataHub.SubItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getSubItems\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"unlockKeyLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validTill\",\"type\":\"uint256\"}],\"internalType\":\"struct DataHub.SubItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSubRequestAt\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"fdpBuyerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"served\",\"type\":\"bool\"}],\"internalType\":\"struct DataHub.SubRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"getSubRequestByHash\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"fdpBuyerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"served\",\"type\":\"bool\"}],\"internalType\":\"struct DataHub.SubRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getSubRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"fdpBuyerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"served\",\"type\":\"bool\"}],\"internalType\":\"struct DataHub.SubRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"}],\"name\":\"getSubSubscribers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubs\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fdpSellerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"bids\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sells\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reports\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"daysValid\",\"type\":\"uint16\"}],\"internalType\":\"struct DataHub.Sub[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numSubRequests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSubItems\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numActiveBids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numListedSubs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inEscrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fdpSellerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataSwarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"category\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"podAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"daysValid\",\"type\":\"uint16\"}],\"name\":\"listSub\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minListingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"removeUserActiveBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"}],\"name\":\"reportSub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"requestAgain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedKeyLocation\",\"type\":\"bytes32\"}],\"name\":\"sellSub\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newListingFee\",\"type\":\"uint256\"}],\"name\":\"setListingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPortableAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"subscriptionIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"subHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fdpSellerNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"bids\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sells\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reports\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"daysValid\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DataHub.sol\":\"DataHub\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DataHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract DataHub is Ownable, ReentrancyGuard, AccessControl  {\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    uint256 private constant FEE_PRECISION = 1e5;  \\n    uint256 public marketFee = 1000; // 1%\\n    uint256 public minListingFee = 1000000 gwei; // min listing fee - 0.0001000 ETH\\n    uint256 public feesCollected = 0;\\n    uint256 public inEscrow = 0;\\n    bytes32 public constant ROLE_REPORTER = keccak256(\\\"ROLE_REPORTER\\\");\\n\\n    // subscription request\\n    struct SubRequest {\\n        bytes32 fdpBuyerNameHash;\\n        bytes32 subHash;     // which subscription;\\n        bytes32 requestHash; // this is needed when\\n        address buyer;\\n        bool    served; // default false\\n    }\\n    // active Bid\\n    struct ActiveBid {\\n        bytes32 requestHash;\\n        address seller;\\n        bool    served; // default false\\n    }\\n    // subscription items\\n    struct SubItem {\\n        bytes32 subHash;  // what subscription you are entitled to\\n        bytes32 unlockKeyLocation; // where is your key\\n        uint256 validTill; // until it is valid \\n    }\\n    struct User {\\n        // who wants to subscribe to what\\n        SubRequest[] subRequests;\\n        mapping(bytes32 => uint256) subRequestIds;\\n\\n        ActiveBid[] activeBids;\\n        mapping(bytes32 => uint256) activeBidIds;\\n\\n        // what is user subscribed to\\n        //SubItem[] subItems;\\n        //mapping(bytes32 => uint256) subItemIds;\\n        bytes32[] subItemHashes;\\n\\n        bytes32[] listedSubs; // everything user listed \\n    }\\n    mapping(address => User) users;\\n    mapping(address => address) userToPortable;\\n    // mapping(address => address) portableToUser;\\n    mapping(bytes32 => address) nameHashToUser;\\n\\n    SubItem[] private allSubItems;\\n    mapping(bytes32 => uint256) allSubItemIds; \\n     mapping(bytes32 => bytes32[]) nameHashToSubItems; // what nameHash has access to (whomever bought it)\\n\\n\\n    struct Category {\\n        uint64[]     subIdxs;\\n    }\\n    mapping(bytes32 => Category) categories; // where is category in categories array\\n\\n    // Sub listings\\n    struct Sub {\\n        bytes32 subHash;\\n        bytes32 fdpSellerNameHash; //\\n        address seller;\\n        bytes32 swarmLocation; // metadata location\\n        uint256 price;\\n        bool    active; // is subscription active\\n        uint256 earned;  \\n        uint32  bids;\\n        uint32  sells;\\n        uint32  reports; \\n        uint16  daysValid;\\n    }\\n    Sub[] public  subscriptions;\\n    mapping(bytes32 => uint256) public subscriptionIds; \\n\\n    struct SubInfo {\\n        mapping(address => uint256) perSubscriberBalance; // balance per subscriber\\n        address[] subscribers; \\n    }\\n    mapping(bytes32 => SubInfo) subInfos; // where is sub in subscriptions array    \\n\\n    constructor() {\\n    }\\n\\n    receive() external payable {}\\n\\n    function getUserStats(address addr) public view returns (uint numSubRequests, uint numSubItems, uint numActiveBids, uint numListedSubs) {\\n        numSubRequests = users[addr].subRequests.length;\\n        numSubItems = users[addr].subItemHashes.length;\\n        numActiveBids = users[addr].activeBids.length;\\n        numListedSubs = users[addr].listedSubs.length;\\n    }\\n    function setPortableAddress(address addr) public {\\n        userToPortable[msg.sender] = addr;\\n        //portableToUser[addr] = msg.sender;\\n    }\\n    function getPortableAddress(address addr) public view returns (address) {\\n        return userToPortable[addr];\\n    }    \\n    // function getUserAddress(address fdpAddress) public view returns (address) {\\n    //     return portableToUser[fdpAddress];\\n    // }   \\n    function getFee(uint256 _fee, uint256 amount) public pure returns (uint256) {\\n        return (amount * _fee) / FEE_PRECISION;\\n    }\\n    function setFee(uint256 newFee) onlyOwner public  {\\n        marketFee = newFee; \\n    }\\n    function setListingFee(uint256 newListingFee) onlyOwner public  {\\n        minListingFee = newListingFee; \\n    }      \\n    function getCategory(bytes32 category) public view returns (Category memory) {\\n        return categories[category];\\n    }\\n    function getSubs() public view returns (Sub[] memory) {\\n        return subscriptions;\\n    }\\n    function getSubByIndex(uint index) public view returns (Sub memory) {\\n        return subscriptions[index];\\n    }\\n    function getSubBy(bytes32 subHash) public view returns (Sub memory) {\\n        return subscriptions[subscriptionIds[subHash]-1];\\n    }\\n    function getSubRequestAt(address addr, uint index) public view returns (SubRequest memory) {\\n        return users[addr].subRequests[index];\\n    }\\n    function getActiveBidAt(address addr, uint index) public view returns (ActiveBid memory) {\\n        return users[addr].activeBids[index];\\n    }    \\n\\n    function getSubItemAt(address addr, uint index) public view returns (SubItem memory) {\\n        // return users[addr].subItems[index];\\n        return allSubItems[allSubItemIds[users[addr].subItemHashes[index]]-1];\\n    }\\n    function getSubItems(address addr, uint start, uint length) public view returns (SubItem[] memory items, uint last) {\\n        // either we  iterate through all items and return only those that are active\\n        // or we return all items and let the client filter them\\n        // iterate through active subItems\\n        items = new SubItem[](length);\\n        uint count = 0;\\n        last = 0; // init to 0\\n        \\n        for (uint i = start; i < users[addr].subItemHashes.length; i++) {\\n            SubItem memory subItem = allSubItems[allSubItemIds[users[addr].subItemHashes[i]]-1];\\n            if(block.timestamp < subItem.validTill) {\\n                if(count < length)\\n                {\\n                   items[count] = subItem;\\n                   ++count;\\n                   last = i;\\n                } else \\n                    break;\\n            }\\n        }\\n        //return items;\\n    }\\n    /*function getSubItemBy(address addr, bytes32 subHash) public view returns (SubItem memory) {\\n        // check if subHash subItem is active\\n        require(block.timestamp <= users[addr].subItems[users[addr].subItemIds[subHash]-1].validTill, \\\"SubItem expired\\\");\\n        return users[addr].subItems[users[addr].subItemIds[subHash]-1];\\n    }*/\\n    function getAllSubItems(address addr) public view returns (SubItem[] memory) {\\n        // TODO return non active without keyLockLocation\\n        SubItem[] memory items = new SubItem[](users[addr].subItemHashes.length);\\n        for (uint i = 0; i < items.length; i++) {\\n            items[i] = allSubItems[allSubItemIds[users[addr].subItemHashes[i]]-1];\\n            if(block.timestamp > items[i].validTill) {\\n                items[i].unlockKeyLocation = bytes32(0);\\n            }\\n        }\\n        return items; //users[addr].subItems;\\n    }\\n    function getAllSubItemsForNameHash(bytes32 nameHash) public view returns (SubItem[] memory) {\\n        //User storage u = users[nameHashToUser[nameHash]];\\n        // TODO return non active without keyLockLocation\\n        uint len = nameHashToSubItems[nameHash].length;\\n        SubItem[] memory items = new SubItem[](len);\\n        for (uint i = 0; i < len; i++) {\\n            items[i] = allSubItems[allSubItemIds[nameHashToSubItems[nameHash][i]]-1];\\n            // nameHashToSubItems[nameHash][i];\\n            if(block.timestamp > items[i].validTill) {\\n                items[i].unlockKeyLocation = bytes32(0);\\n            }\\n        }\\n        return items; //users[addr].subItems;\\n    }\\n    \\n    function getNameHashSubItems(bytes32 nameHash) public view returns (bytes32[] memory) {\\n        return nameHashToSubItems[nameHash];\\n    }\\n\\n    function getListedSubs(address addr) public view returns (bytes32[] memory) {\\n        return users[addr].listedSubs;\\n    }\\n    function getActiveBids(address addr) public view returns (ActiveBid[] memory) {\\n        return users[addr].activeBids;\\n    }\\n    function getSubRequestByHash(address addr, bytes32 requestHash) public view returns (SubRequest memory) {\\n        return users[addr].subRequests[users[addr].subRequestIds[requestHash]-1];\\n    }\\n    function getActiveBidsByHash(address addr, bytes32 requestHash) public view returns (ActiveBid memory) {\\n        return users[addr].activeBids[users[addr].activeBidIds[requestHash]-1];\\n    }\\n    function getSubRequests(address addr) public view returns (SubRequest[] memory) {\\n        return users[addr].subRequests;\\n    }\\n    function getSubSubscribers(bytes32 subHash) public view returns (address[] memory) {\\n        return subInfos[subHash].subscribers;\\n    }\\n    function getSubInfoBalance(bytes32 subHash, address forAddress) public view returns (uint256) {\\n        return subInfos[subHash].perSubscriberBalance[forAddress];\\n    }\\n    function enableSub(bytes32 subHash, bool active) public {\\n        require(subscriptionIds[subHash] != 0, \\\"No Sub\\\"); // must exists\\n        Sub storage s = subscriptions[subscriptionIds[subHash] - 1]; \\n        require(s.seller == msg.sender, \\\"Not Seller\\\"); // only seller can enable subscription\\n        require(s.reports<4, \\\"Too many reports\\\"); // only seller can enable subscription\\n\\n        s.active = active;\\n    }\\n    function reportSub(bytes32 subHash) public {\\n        require(hasRole(ROLE_REPORTER, msg.sender),\\\"Not Reporter\\\");\\n        require(subscriptionIds[subHash] != 0, \\\"No Sub\\\"); // must exists\\n        Sub storage s = subscriptions[subscriptionIds[subHash] - 1]; \\n        s.reports = s.reports + 1;\\n        if(s.reports >= 3) {\\n            s.active = false;\\n        }\\n    }\\n    // Market to sell encrypted swarmLocation\\n    function listSub(bytes32 fdpSellerNameHash, bytes32 dataSwarmLocation, uint price, bytes32 category, address podAddress, uint16 daysValid) public payable {\\n        //bytes32 subHash = keccak256(abi.encode(msg.sender, fdpSeller, dataSwarmLocation, price, category, podIndex));\\n        require(msg.value>=minListingFee, \\\"minFee\\\"); // sent value must be equal to price\\n        require(daysValid>=1 && daysValid<=365, \\\"daysValid\\\"); // must not exists\\n\\n        bytes32 subHash = keccak256(abi.encode(msg.sender, fdpSellerNameHash, podAddress));// user can list same pod only once\\n        require(subscriptionIds[subHash] == 0, \\\"SubExists\\\"); // must not exists\\n\\n        Sub memory s = Sub(subHash, fdpSellerNameHash, msg.sender, dataSwarmLocation, price, true, 0, 0, 0, 0, daysValid);\\n        \\n        subscriptions.push(s);\\n        subscriptionIds[subHash] = subscriptions.length; // will point to 1 more than index\\n\\n        Category storage c = categories[category];\\n        c.subIdxs.push(uint64(subscriptions.length) - 1); // point to index\\n\\n        User storage seller = users[msg.sender];\\n        seller.listedSubs.push(subHash);\\n\\n        feesCollected+=msg.value;\\n    }\\n    function bidSub(bytes32 subHash, bytes32 fdpBuyerNameHash) public nonReentrant payable {\\n        // marketplace does not require user to be registred with smail -- TODO on front end and check \\n        // require(users[msg.sender].key != bytes32(0), \\\"Not reg\\\"); // user can not receive encrypted data\\n        require(subscriptionIds[subHash] != 0, \\\"No Sub\\\"); // must exists\\n        Sub storage s = subscriptions[subscriptionIds[subHash] - 1]; \\n\\n        require(s.active, \\\"Inactive\\\"); // must be active\\n        require(msg.value==s.price, \\\"Value!=price\\\"); // sent value must be equal to price\\n\\n        User storage seller = users[s.seller];\\n        bytes32 requestHash = keccak256(abi.encode(msg.sender, subHash, fdpBuyerNameHash)); //, block.timestamp));\\n        require(seller.subRequestIds[requestHash] == 0, \\\"Req exists\\\");\\n\\n        s.bids++;\\n\\n        SubRequest memory sr;\\n        sr.fdpBuyerNameHash = fdpBuyerNameHash;\\n        sr.buyer = msg.sender;\\n        sr.subHash = s.subHash;\\n        sr.requestHash = requestHash;\\n\\n        seller.subRequests.push(sr);\\n        seller.subRequestIds[requestHash] = seller.subRequests.length; // +1 of index\\n        \\n        inEscrow += msg.value;\\n\\n        ActiveBid memory ab;\\n        ab.requestHash = requestHash;\\n        ab.seller = s.seller; //msg.sender;\\n\\n        User storage buyer = users[msg.sender];\\n        buyer.activeBids.push(ab);      \\n        buyer.activeBidIds[requestHash] = buyer.activeBids.length; // +1 of index\\n    }\\n\\n   \\n\\n    // encryptedSecret is podReference encrypited with sharedSecret - podAddress, seller.address, buyer.address, encryptedSecret\\n    function sellSub(bytes32 requestHash, bytes32 encryptedKeyLocation) public nonReentrant payable {\\n        User storage seller = users[msg.sender];\\n        require(seller.subRequestIds[requestHash] != 0, \\\"No Req\\\");\\n\\n        SubRequest storage br = seller.subRequests[seller.subRequestIds[requestHash]-1];\\n        require(br.served == false, \\\"served\\\"); // must exists\\n        require(subscriptionIds[br.subHash] != 0, \\\"No Sub\\\"); // must exists\\n\\n        Sub storage s = subscriptions[subscriptionIds[br.subHash]-1]; \\n        require(msg.sender==s.seller, \\\"Not Sub Seller\\\"); // sent value must be equal to price\\n\\n        User storage buyer = users[br.buyer];\\n        //User storage buyer = users[userToPortable[br.buyer]];\\n        SubItem memory si;\\n        si.subHash = br.subHash;\\n        si.unlockKeyLocation = encryptedKeyLocation;\\n        si.validTill = block.timestamp + (s.daysValid * 86400); //(daysValid * 60*60*24) // days;\\n\\n        bytes32 subItemHash = keccak256(abi.encode(msg.sender, br.buyer, si.subHash, si.validTill, si.unlockKeyLocation)); //, block.timestamp));\\n        allSubItems.push(si); \\n        allSubItemIds[subItemHash] = allSubItems.length;\\n\\n        buyer.subItemHashes.push(subItemHash);\\n        nameHashToSubItems[br.fdpBuyerNameHash].push(subItemHash); // point to index\\n        \\n        ActiveBid storage ab = buyer.activeBids[buyer.activeBidIds[requestHash]-1];\\n        ab.served = true; // active bid served\\n        br.served = true; // sub request served\\n        //removeSubRequest(msg.sender, requestHash); // seller removes request from his list\\n        //removeActiveBid(br.buyer, requestHash); // remove activeBid from buyer\\n\\n        // calculate fees and transfer to seller\\n        uint256 fee = getFee(marketFee, s.price);\\n        uint256 sellerPayout = s.price-fee;\\n        payable(msg.sender).transfer(sellerPayout);\\n        inEscrow -= s.price;\\n        feesCollected += fee;\\n\\n        s.sells++;\\n        s.earned += (sellerPayout);\\n\\n        if(subInfos[br.subHash].perSubscriberBalance[br.buyer]==0) // only add subscriber if not already added\\n           subInfos[br.subHash].subscribers.push(br.buyer);\\n\\n        subInfos[br.subHash].perSubscriberBalance[br.buyer] += (sellerPayout);\\n    }\\n\\n    function requestAgain(bytes32 requestHash) public nonReentrant payable {\\n        User storage buyer = users[msg.sender];\\n        ActiveBid storage ab = buyer.activeBids[buyer.activeBidIds[requestHash]-1];\\n        require(ab.served == true, \\\"ab served\\\"); \\n        // todo some checks those with sellSub\\n        User storage seller = users[ab.seller];\\n        SubRequest storage sr = seller.subRequests[seller.subRequestIds[requestHash]-1];\\n        require(ab.served == true, \\\"sr served\\\"); // must exists\\n\\n        Sub memory s = subscriptions[subscriptionIds[sr.subHash]-1];\\n        require(msg.value==s.price, \\\"!price\\\"); // sent value must be equal to price\\n\\n        sr.served = false;\\n        ab.served = false;\\n        inEscrow += msg.value;\\n    }\\n\\n    // removes active bids from SubRequests of seller and from Active bids of buyer, returns funds to buyer\\n    function removeUserActiveBid(bytes32 requestHash) public {\\n        User storage u = users[msg.sender];\\n        require(u.activeBidIds[requestHash] != 0, \\\"!ab Req\\\");\\n        ActiveBid memory ab = u.activeBids[u.activeBidIds[requestHash]-1];\\n\\n        User storage seller = users[ab.seller];\\n        require(seller.subRequestIds[requestHash] != 0, \\\"!seller Req\\\");\\n\\n        SubRequest storage br = seller.subRequests[seller.subRequestIds[requestHash]-1];\\n        require(subscriptionIds[br.subHash] != 0, \\\"!sub\\\");\\n\\n        Sub memory s = subscriptions[subscriptionIds[br.subHash]-1];\\n\\n        if(br.served == false && ab.served == false)\\n           payable(msg.sender).transfer(s.price);\\n\\n        removeSubRequest(ab.seller, requestHash); // remove from seller \\n        removeActiveBid(msg.sender, requestHash);\\n    }\\n    function removeActiveBid(address user, bytes32 requestHash) private {\\n        User storage u = users[user];\\n        require(u.activeBidIds[requestHash] != 0, \\\"!ab Req\\\");\\n\\n        uint256 removeIndex = u.activeBidIds[requestHash] - 1;       \\n        uint256 lastIndex = u.activeBids.length - 1; // replace removeIndex with last item and pop last item\\n        if (lastIndex != removeIndex) {\\n            u.activeBids[removeIndex] = u.activeBids[lastIndex];\\n            u.activeBidIds[u.activeBids[removeIndex].requestHash] = removeIndex + 1;\\n        }\\n        u.activeBids.pop();\\n        delete u.activeBidIds[requestHash];\\n    }\\n    // remove subRequest from seller needs to return money to bidder \\n    function removeSubRequest(address owner, bytes32 requestHash) private {\\n        User storage u = users[owner]; //msg.sender];\\n        require(u.subRequestIds[requestHash] != 0, \\\"!Req\\\");\\n\\n        uint256 removeIndex = u.subRequestIds[requestHash] - 1;\\n        uint256 lastIndex = u.subRequests.length - 1; // replace removeIndex with last item and pop last item\\n        if (lastIndex != removeIndex) {\\n            u.subRequests[removeIndex] = u.subRequests[lastIndex];\\n            u.subRequestIds[u.subRequests[lastIndex].requestHash] = removeIndex + 1;\\n        }\\n        u.subRequests.pop();\\n        delete u.subRequestIds[requestHash];\\n    }\\n\\n    // user can remove subItem from his list if wishes to do so\\n    /*function removeSubItem(uint256 index) public {\\n        User storage u = users[msg.sender];\\n        require(index < u.subItemHashes.length, \\\"!Index\\\");\\n\\n        uint256 lastIndex = u.subItemHashes.length - 1;\\n        if (lastIndex != index) {\\n            u.subItemHashes[index] = u.subItemHashes[lastIndex];\\n        }\\n        u.subItemHashes.pop();\\n    }*/\\n\\n    function fundsBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }    \\n    function fundsTransfer() onlyOwner public payable {\\n        payable(msg.sender).transfer((address(this).balance-inEscrow));\\n    }\\n    function release(address token, uint amount) public virtual {\\n        SafeERC20.safeTransfer(IERC20(token), owner(), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x3d29f0b7ddfb201328de24335df5f625c1a2996348a81282ab013e278b21e349\",\"license\":\"MIT\"}},\"version\":1}",
          "bytecode": "0x60806040526103e860035566038d7ea4c68000600455600060055560006006553480156200002c57600080fd5b50620000383362000042565b6001805562000092565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61454e80620000a26000396000f3fe6080604052600436106102e85760003560e01c80637de2e5e811610190578063b8fb1bac116100dc578063d547741f11610095578063eed5b6e51161006f578063eed5b6e514610a56578063f071db5a14610a76578063f2fde38b14610a8c578063fbc4fc4414610aac57600080fd5b8063d547741f14610a03578063d76ac1d114610a23578063e91dbcb014610a4357600080fd5b8063b8fb1bac146108f0578063c3b4dde914610912578063c6d05aee1461094b578063cddf64ea14610995578063d250185c146109b5578063d3fbc74c146109d557600080fd5b806391d14854116101495780639bde82dc116101235780639bde82dc14610885578063a217fddf146108a5578063b62fe12f146108ba578063b7391341146108da57600080fd5b806391d148541461082557806392b58bc2146108455780639454932c1461087257600080fd5b80637de2e5e81461071857806380dd0d8e1461074557806383102c2b1461077257806384053229146107a657806388ac2917146107d35780638da5cb5b146107f357600080fd5b80632c3ca35a1161024f578063473b084c1161020857806369fe0e2d116101e257806369fe0e2d146106ad578063703a54b5146106cd578063715018a6146106e357806378ba33c6146106f857600080fd5b8063473b084c1461060c5780634e43603a14610639578063567556a4146106a557600080fd5b80632c3ca35a146104cf5780632d5bbf60146104fc5780632da826431461058c5780632f2ff15d146105b957806336568abe146105d95780633ca684e3146105f957600080fd5b80631a937f08116102a15780631a937f08146103dc5780631f9ef490146103ef578063202cff8a1461041c578063224b6b8c1461042f578063248a9ca31461045c578063254e287b1461048c57600080fd5b806301ffc9a7146102f45780630260f912146103295780630357371d1461034b5780630ccf21561461036b5780630e4999941461038f578063131dbd09146103bc57600080fd5b366102ef57005b600080fd5b34801561030057600080fd5b5061031461030f366004613e6a565b610ad9565b60405190151581526020015b60405180910390f35b34801561033557600080fd5b50610349610344366004613d76565b610b10565b005b34801561035757600080fd5b50610349610366366004613d16565b610e4b565b34801561037757600080fd5b5061038160035481565b604051908152602001610320565b34801561039b57600080fd5b506103816103aa366004613d76565b600f6020526000908152604090205481565b3480156103c857600080fd5b506103496103d7366004613d76565b610e6b565b6103496103ea366004613d76565b610e9a565b3480156103fb57600080fd5b5061040f61040a366004613d76565b61119a565b6040516103209190614379565b61034961042a366004613e09565b611294565b34801561043b57600080fd5b5061044f61044a366004613cd3565b61163a565b604051610320919061414b565b34801561046857600080fd5b50610381610477366004613d76565b60009081526002602052604090206001015490565b34801561049857600080fd5b506103816104a7366004613d8e565b60009182526010602090815260408084206001600160a01b0393909316845291905290205490565b3480156104db57600080fd5b506104ef6104ea366004613d76565b611843565b60405161032091906140b2565b34801561050857600080fd5b5061051c610517366004613d76565b6118a5565b604080519b8c5260208c019a909a526001600160a01b03909816988a01989098526060890195909552608088019390935290151560a087015260c086015263ffffffff90811660e086015290811661010085015290911661012083015261ffff1661014082015261016001610320565b34801561059857600080fd5b506105ac6105a7366004613ced565b611931565b60405161032091906142c4565b3480156105c557600080fd5b506103496105d4366004613d8e565b6119f1565b3480156105e557600080fd5b506103496105f4366004613d8e565b611a1c565b610349610607366004613de8565b611a96565b34801561061857600080fd5b5061062c610627366004613d76565b612033565b60405161032091906142f0565b34801561064557600080fd5b50610685610654366004613cd3565b6001600160a01b03166000908152600760205260409020805460048201546002830154600590930154919390929190565b604080519485526020850193909352918301526060820152608001610320565b6103496120e0565b3480156106b957600080fd5b506103496106c8366004613d76565b612148565b3480156106d957600080fd5b5061038160045481565b3480156106ef57600080fd5b50610349612177565b34801561070457600080fd5b506105ac610713366004613d16565b6121ad565b34801561072457600080fd5b50610738610733366004613d76565b612201565b6040516103209190614065565b34801561075157600080fd5b50610765610760366004613d16565b61226f565b604051610320919061434a565b34801561077e57600080fd5b506103817fc6ff1722ffb1bdb71482122a9b8ca2ca5d75d70ed7d05f5d3174c866c748f82581565b3480156107b257600080fd5b506107c66107c1366004613d16565b612351565b604051610320919061436b565b3480156107df57600080fd5b506103496107ee366004613db9565b612414565b3480156107ff57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610320565b34801561083157600080fd5b50610314610840366004613d8e565b612542565b34801561085157600080fd5b50610865610860366004613cd3565b61256d565b6040516103209190614180565b34801561087e57600080fd5b5047610381565b34801561089157600080fd5b506107c66108a0366004613ced565b61261f565b3480156108b157600080fd5b50610381600081565b3480156108c657600080fd5b5061044f6108d5366004613d76565b61269b565b3480156108e657600080fd5b5061038160065481565b3480156108fc57600080fd5b5061090561288a565b60405161032091906141c2565b34801561091e57600080fd5b5061080d61092d366004613cd3565b6001600160a01b039081166000908152600860205260409020541690565b34801561095757600080fd5b50610349610966366004613cd3565b33600090815260086020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b3480156109a157600080fd5b506104ef6109b0366004613cd3565b612979565b3480156109c157600080fd5b506103816109d0366004613de8565b6129e6565b3480156109e157600080fd5b506109f56109f0366004613d28565b612a07565b60405161032092919061415e565b348015610a0f57600080fd5b50610349610a1e366004613d8e565b612be2565b348015610a2f57600080fd5b50610349610a3e366004613d76565b612c08565b610349610a51366004613de8565b612d4b565b348015610a6257600080fd5b5061040f610a71366004613d76565b6130aa565b348015610a8257600080fd5b5061038160055481565b348015610a9857600080fd5b50610349610aa7366004613cd3565b6130d3565b348015610ab857600080fd5b50610acc610ac7366004613cd3565b61316b565b60405161032091906140ea565b60006001600160e01b03198216637965db0b60e01b1480610b0a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360009081526007602090815260408083208484526003810190925290912054610b6b5760405162461bcd60e51b81526020600482015260076024820152662161622052657160c81b60448201526064015b60405180910390fd5b60008281526003820160205260408120546002830190610b8d90600190614432565b81548110610bab57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060408051606081018252600294909402909101805484526001908101546001600160a01b038116858501819052600160a01b90910460ff1615158584015285526007835281852088865290810190925290922054909250610c465760405162461bcd60e51b815260206004820152600b60248201526a2173656c6c65722052657160a81b6044820152606401610b62565b6000848152600180830160205260408220548391610c6391614432565b81548110610c8157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600402019050600f6000826001015481526020019081526020016000205460001415610ce25760405162461bcd60e51b8152600401610b629060208082526004908201526310b9bab160e11b604082015260600190565b6001818101546000908152600f60205260408120549091600e91610d069190614432565b81548110610d2457634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101608101825260089093029091018054835260018101549383019390935260028301546001600160a01b031690820152600380830154606083015260048301546080830152600583015460ff908116151560a0840152600684015460c084015260079093015463ffffffff80821660e085015264010000000082048116610100850152600160401b82041661012084015261ffff600160601b90910416610140830152840154909250600160a01b900416158015610df457506040840151155b15610e2b576080810151604051339180156108fc02916000818181858888f19350505050158015610e29573d6000803e3d6000fd5b505b610e39846020015187613202565b610e433387613430565b505050505050565b610e6782610e616000546001600160a01b031690565b8361363c565b5050565b6000546001600160a01b03163314610e955760405162461bcd60e51b8152600401610b6290614258565b600455565b60026001541415610ebd5760405162461bcd60e51b8152600401610b629061428d565b60026001818155336000908152600760209081526040808320868452600381019092528220549093919291840191610ef491614432565b81548110610f1257634e487b7160e01b600052603260045260246000fd5b6000918252602090912060016002909202018181015490925060ff600160a01b90910416151514610f715760405162461bcd60e51b81526020600482015260096024820152681858881cd95c9d995960ba1b6044820152606401610b62565b6001808201546001600160a01b0316600090815260076020908152604080832087845280850190925282205490928391610fab9190614432565b81548110610fc957634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020190508260010160149054906101000a900460ff161515600115151461102a5760405162461bcd60e51b81526020600482015260096024820152681cdc881cd95c9d995960ba1b6044820152606401610b62565b6001818101546000908152600f60205260408120549091600e9161104e9190614432565b8154811061106c57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101608101825260089093029091018054835260018101549383019390935260028301546001600160a01b03169082015260038201546060820152600482015460808201819052600583015460ff16151560a0830152600683015460c083015260079092015463ffffffff80821660e084015264010000000082048116610100840152600160401b82041661012083015261ffff600160601b90910416610140820152915034146111575760405162461bcd60e51b815260206004820152600660248201526521707269636560d01b6044820152606401610b62565b60038201805460ff60a01b19908116909155600185018054909116905560068054349190600090611189908490614388565b909155505060018055505050505050565b6111a2613c5b565b6000828152600f6020526040902054600e906111c090600190614432565b815481106111de57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101608101825260089093029091018054835260018101549383019390935260028301546001600160a01b0316908201526003820154606082015260048201546080820152600582015460ff16151560a0820152600682015460c082015260079091015463ffffffff80821660e084015264010000000082048116610100840152600160401b82041661012083015261ffff600160601b9091041661014082015292915050565b6004543410156112cf5760405162461bcd60e51b81526020600482015260066024820152656d696e46656560d01b6044820152606401610b62565b60018161ffff16101580156112ea575061016d8161ffff1611155b6113225760405162461bcd60e51b815260206004820152600960248201526819185e5cd5985b1a5960ba1b6044820152606401610b62565b604080513360208201529081018790526001600160a01b038316606082015260009060800160408051601f1981840301815291815281516020928301206000818152600f909352912054909150156113a85760405162461bcd60e51b815260206004820152600960248201526853756245786973747360b81b6044820152606401610b62565b6000604051806101600160405280838152602001898152602001336001600160a01b0316815260200188815260200187815260200160011515815260200160008152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020018461ffff168152509050600e819080600181540180825580915050600190039060005260206000209060080201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c0820151816006015560e08201518160070160006101000a81548163ffffffff021916908363ffffffff1602179055506101008201518160070160046101000a81548163ffffffff021916908363ffffffff1602179055506101208201518160070160086101000a81548163ffffffff021916908363ffffffff16021790555061014082015181600701600c6101000a81548161ffff021916908361ffff1602179055505050600e80549050600f6000848152602001908152602001600020819055506000600d60008781526020019081526020016000209050806000016001600e805490506115b09190614449565b815460018082018455600093845260208085206004840401805460039094166008026101000a67ffffffffffffffff818102199095169590941693909302939093179091553383526007825260408320600580820180549384018155855292842090910186905581549092349291611629908490614388565b909155505050505050505050505050565b6001600160a01b0381166000908152600760205260408120600401546060919067ffffffffffffffff81111561168057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156116cb57816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161169e5790505b50905060005b815181101561183c576001600160a01b03841660009081526007602052604081206004018054600a92600192600b928690811061171e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020546117429190614432565b8154811061176057634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508282815181106117b757634e487b7160e01b600052603260045260246000fd5b60200260200101819052508181815181106117e257634e487b7160e01b600052603260045260246000fd5b60200260200101516040015142111561182a576000801b82828151811061181957634e487b7160e01b600052603260045260246000fd5b602002602001015160200181815250505b80611834816144b5565b9150506116d1565b5092915050565b6000818152600c602090815260409182902080548351818402810184019094528084526060939283018282801561189957602002820191906000526020600020905b815481526020019060010190808311611885575b50505050509050919050565b600e81815481106118b557600080fd5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600687015460079097015495975093956001600160a01b03909316949193909260ff9091169163ffffffff808216916401000000008104821691600160401b82041690600160601b900461ffff168b565b60408051606081018252600080825260208083018290528284018290526001600160a01b038616825260078152838220858352600381019091529290205490916002019061198190600190614432565b8154811061199f57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160608101825260029390930290910180548352600101546001600160a01b03811693830193909352600160a01b90920460ff161515918101919091529392505050565b600082815260026020526040902060010154611a0d813361368e565b611a1783836136f2565b505050565b6001600160a01b0381163314611a8c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610b62565b610e678282613778565b60026001541415611ab95760405162461bcd60e51b8152600401610b629061428d565b60026001908155336000908152600760209081526040808320868452938401909152902054611b135760405162461bcd60e51b81526020600482015260066024820152654e6f2052657160d01b6044820152606401610b62565b6000838152600180830160205260408220548391611b3091614432565b81548110611b4e57634e487b7160e01b600052603260045260246000fd5b600091825260209091206004909102016003810154909150600160a01b900460ff1615611ba65760405162461bcd60e51b81526020600482015260066024820152651cd95c9d995960d21b6044820152606401610b62565b60018101546000908152600f6020526040902054611bd65760405162461bcd60e51b8152600401610b6290614238565b6001818101546000908152600f60205260408120549091600e91611bfa9190614432565b81548110611c1857634e487b7160e01b600052603260045260246000fd5b6000918252602090912060089091020160028101549091506001600160a01b03163314611c785760405162461bcd60e51b815260206004820152600e60248201526d2737ba1029bab11029b2b63632b960911b6044820152606401610b62565b60038201546001600160a01b03166000908152600760205260409020611cb7604080516060810182526000808252602082018190529181019190915290565b60018401548152602081018690526007830154611ce290600160601b900461ffff16620151806143e8565b611cf19062ffffff1642614388565b6040828101828152600387810154855160208088018051875133818501526001600160a01b03909516858901526060850193909352608084019790975260a0808401929092528551808403909201825260c09092018552805190820120600a80546001808201835560008381528a517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a89388029384015598517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a983015595517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa9091015554818752600b83528587205560048801805480860182559087528287200181905589548652600c825284862080548086018255908752828720018190558c86529187019052918320549192916002860191611e2f91614432565b81548110611e4d57634e487b7160e01b600052603260045260246000fd5b60009182526020822060029190910201600181018054600160a01b60ff60a01b19918216811790925560038a810180549092169092179055546004880154919350611e97916129e6565b90506000818760040154611eab9190614432565b604051909150339082156108fc029083906000818181858888f19350505050158015611edb573d6000803e3d6000fd5b50866004015460066000828254611ef29190614432565b925050819055508160056000828254611f0b9190614388565b9091555050600787018054640100000000900463ffffffff16906004611f30836144d0565b91906101000a81548163ffffffff021916908363ffffffff1602179055505080876006016000828254611f639190614388565b90915550506001880154600090815260106020908152604080832060038c01546001600160a01b03168452909152902054611fe2576001808901546000908152601060209081526040822060038c0154908401805494850181558352912090910180546001600160a01b0319166001600160a01b039092169190911790555b6001880154600090815260106020908152604080832060038c01546001600160a01b031684529091528120805483929061201d908490614388565b9091555050600180555050505050505050505050565b6040805160208082018352606082526000848152600d8252839020835181548084028201860186529281018381529394909391928492918491908401828280156120d057602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841161208b5790505b5050505050815250509050919050565b6000546001600160a01b0316331461210a5760405162461bcd60e51b8152600401610b6290614258565b60065433906108fc9061211d9047614432565b6040518115909202916000818181858888f19350505050158015612145573d6000803e3d6000fd5b50565b6000546001600160a01b031633146121725760405162461bcd60e51b8152600401610b6290614258565b600355565b6000546001600160a01b031633146121a15760405162461bcd60e51b8152600401610b6290614258565b6121ab60006137df565b565b60408051606081018252600080825260208083018290528284018290526001600160a01b0386168252600790529190912060020180548390811061199f57634e487b7160e01b600052603260045260246000fd5b60008181526010602090815260409182902060010180548351818402810184019094528084526060939283018282801561189957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116122465750505050509050919050565b60408051606081018252600080825260208201819052918101919091526001600160a01b03831660009081526007602052604081206004018054600a92600192600b92879081106122d057634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020546122f49190614432565b8154811061231257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905092915050565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b038616825260079052919091208054839081106123b057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a081018252600493909302909101805483526001810154938301939093526002830154908201526003909101546001600160a01b0381166060830152600160a01b900460ff16151560808201529392505050565b6000828152600f602052604090205461243f5760405162461bcd60e51b8152600401610b6290614238565b6000828152600f6020526040812054600e9061245d90600190614432565b8154811061247b57634e487b7160e01b600052603260045260246000fd5b600091825260209091206002600890920201908101549091506001600160a01b031633146124d85760405162461bcd60e51b815260206004820152600a6024820152692737ba1029b2b63632b960b11b6044820152606401610b62565b60078101546004600160401b90910463ffffffff161061252d5760405162461bcd60e51b815260206004820152601060248201526f546f6f206d616e79207265706f72747360801b6044820152606401610b62565b600501805460ff191691151591909117905550565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609492939192909184015b828210156126145760008481526020908190206040805160a081018252600486029092018054835260018082015484860152600282015492840192909252600301546001600160a01b0381166060840152600160a01b900460ff161515608083015290835290920191016125a5565b505050509050919050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526001600160a01b0383166000908152600760209081526040808320858452600180820190935292205461267d9190614432565b815481106123b057634e487b7160e01b600052603260045260246000fd5b6000818152600c60205260408120546060918167ffffffffffffffff8111156126d457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561271f57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816126f25790505b50905060005b82811015612882576000858152600c602052604081208054600a92600192600b928690811061276457634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020546127889190614432565b815481106127a657634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508282815181106127fd57634e487b7160e01b600052603260045260246000fd5b602002602001018190525081818151811061282857634e487b7160e01b600052603260045260246000fd5b602002602001015160400151421115612870576000801b82828151811061285f57634e487b7160e01b600052603260045260246000fd5b602002602001015160200181815250505b8061287a816144b5565b915050612725565b509392505050565b6060600e805480602002602001604051908101604052809291908181526020016000905b82821015612970576000848152602090819020604080516101608101825260088602909201805483526001808201548486015260028201546001600160a01b0316928401929092526003810154606084015260048101546080840152600581015460ff16151560a0840152600681015460c08401526007015463ffffffff80821660e085015264010000000082048116610100850152600160401b820416610120840152600160601b900461ffff1661014083015290835290920191016128ae565b50505050905090565b6001600160a01b03811660009081526007602090815260409182902060050180548351818402810184019094528084526060939283018282801561189957602002820191906000526020600020908154815260200190600101908083116118855750505050509050919050565b6000620186a06129f68484614413565b612a0091906143c8565b9392505050565b606060008267ffffffffffffffff811115612a3257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a7d57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181612a505790505b5091506000905080845b6001600160a01b038716600090815260076020526040902060040154811015612bd8576001600160a01b03871660009081526007602052604081206004018054600a91600191600b91859187908110612af057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154815260200190815260200160002054612b149190614432565b81548110612b3257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090508060400151421015612bc55785831015612bbf5780858481518110612ba057634e487b7160e01b600052603260045260246000fd5b602002602001018190525082612bb5906144b5565b9250819350612bc5565b50612bd8565b5080612bd0816144b5565b915050612a87565b5050935093915050565b600082815260026020526040902060010154612bfe813361368e565b611a178383613778565b612c327fc6ff1722ffb1bdb71482122a9b8ca2ca5d75d70ed7d05f5d3174c866c748f82533612542565b612c6d5760405162461bcd60e51b815260206004820152600c60248201526b2737ba102932b837b93a32b960a11b6044820152606401610b62565b6000818152600f6020526040902054612c985760405162461bcd60e51b8152600401610b6290614238565b6000818152600f6020526040812054600e90612cb690600190614432565b81548110612cd457634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020190508060070160089054906101000a900463ffffffff166001612d0591906143a0565b6007820180546bffffffff00000000000000001916600160401b63ffffffff938416810291909117918290556003910490911610610e6757600501805460ff1916905550565b60026001541415612d6e5760405162461bcd60e51b8152600401610b629061428d565b60026001556000828152600f6020526040902054612d9e5760405162461bcd60e51b8152600401610b6290614238565b6000828152600f6020526040812054600e90612dbc90600190614432565b81548110612dda57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201600581015490915060ff16612e2c5760405162461bcd60e51b8152602060048201526008602482015267496e61637469766560c01b6044820152606401610b62565b80600401543414612e6e5760405162461bcd60e51b815260206004820152600c60248201526b56616c7565213d707269636560a01b6044820152606401610b62565b60028101546001600160a01b0316600090815260076020908152604080832081513381850152808301889052606080820188905283518083039091018152608090910183528051908401208085526001820190935292205415612f005760405162461bcd60e51b815260206004820152600a6024820152695265712065786973747360b01b6044820152606401610b62565b60078301805463ffffffff16906000612f18836144d0565b91906101000a81548163ffffffff021916908363ffffffff16021790555050612f686040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b8481523360608201908152845460208084019182526040808501868152875460018181018a5560008a815285812089516004909402019283559551828201559151600282015594516003909501805460808801511515600160a01b026001600160a81b03199091166001600160a01b0397909716969096179590951790945586548684529387019091528120919091556006805434929061300a908490614388565b90915550506040805160608101825260008183018181528583526002978801546001600160a01b03908116602080860191825233855260078152868520808c01805460018082018355828952848920995191909e029098019788559251968c01805495511515600160a01b026001600160a81b03199096169790941696909617939093179091555495825260039092019091522091909155505080555050565b6130b2613c5b565b600e82815481106111de57634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b031633146130fd5760405162461bcd60e51b8152600401610b6290614258565b6001600160a01b0381166131625760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b62565b612145816137df565b6001600160a01b0381166000908152600760209081526040808320600201805482518185028101850190935280835260609492939192909184015b828210156126145760008481526020908190206040805160608101825260028602909201805483526001908101546001600160a01b03811684860152600160a01b900460ff1615159183019190915290835290920191016131a6565b6001600160a01b038216600090815260076020908152604080832084845260018101909252909120546132605760405162461bcd60e51b8152600401610b62906020808252600490820152632152657160e01b604082015260600190565b60008281526001828101602052604082205461327c9190614432565b825490915060009061329090600190614432565b90508181146133be578260000181815481106132bc57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600402018360000183815481106132ed57634e487b7160e01b600052603260045260246000fd5b6000918252602090912082546004909202019081556001808301548183015560028084015490830155600392830180549390920180546001600160a01b031981166001600160a01b039095169485178255925460ff600160a01b91829004161515026001600160a81b031990931690931791909117909155613370908390614388565b83600101600085600001848154811061339957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060040201600201548152602001908152602001600020819055505b82548390806133dd57634e487b7160e01b600052603160045260246000fd5b60008281526020808220600460001990940193840201828155600181810184905560028201849055600390910180546001600160a81b031916905592909355958652939093019092525050604081205550565b6001600160a01b0382166000908152600760209081526040808320848452600381019092529091205461348f5760405162461bcd60e51b81526020600482015260076024820152662161622052657160c81b6044820152606401610b62565b60008281526003820160205260408120546134ac90600190614432565b60028301549091506000906134c390600190614432565b90508181146135d8578260020181815481106134ef57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020183600201838154811061352057634e487b7160e01b600052603260045260246000fd5b6000918252602090912082546002909202019081556001918201805491830180546001600160a01b031981166001600160a01b039094169384178255915460ff600160a01b91829004161515026001600160a81b031990921690921717905561358a908390614388565b8360030160008560020185815481106135b357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600001548152602001908152602001600020819055505b826002018054806135f957634e487b7160e01b600052603160045260246000fd5b6000828152602080822060026000199094019384020182815560010180546001600160a81b03191690559190925594815260039093019093525060408120555050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611a1790849061382f565b6136988282612542565b610e67576136b0816001600160a01b03166014613901565b6136bb836020613901565b6040516020016136cc929190613ff0565b60408051601f198184030181529082905262461bcd60e51b8252610b6291600401614205565b6136fc8282612542565b610e675760008281526002602090815260408083206001600160a01b03851684529091529020805460ff191660011790556137343390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6137828282612542565b15610e675760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000613884826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ae39092919063ffffffff16565b805190915015611a1757808060200190518101906138a29190613d5a565b611a175760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b62565b60606000613910836002614413565b61391b906002614388565b67ffffffffffffffff81111561394157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561396b576020820181803683370190505b509050600360fc1b8160008151811061399457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106139d157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006139f5846002614413565b613a00906001614388565b90505b6001811115613a94576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613a4257634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110613a6657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93613a8d8161449e565b9050613a03565b508315612a005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b62565b6060613af28484600085613afa565b949350505050565b606082471015613b5b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b62565b843b613ba95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b62565b600080866001600160a01b03168587604051613bc59190613fd4565b60006040518083038185875af1925050503d8060008114613c02576040519150601f19603f3d011682016040523d82523d6000602084013e613c07565b606091505b5091509150613c17828286613c22565b979650505050505050565b60608315613c31575081612a00565b825115613c415782518084602001fd5b8160405162461bcd60e51b8152600401610b629190614205565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b80356001600160a01b0381168114613cce57600080fd5b919050565b600060208284031215613ce4578081fd5b612a0082613cb7565b60008060408385031215613cff578081fd5b613d0883613cb7565b946020939093013593505050565b60008060408385031215613cff578182fd5b600080600060608486031215613d3c578081fd5b613d4584613cb7565b95602085013595506040909401359392505050565b600060208284031215613d6b578081fd5b8151612a008161450a565b600060208284031215613d87578081fd5b5035919050565b60008060408385031215613da0578182fd5b82359150613db060208401613cb7565b90509250929050565b60008060408385031215613dcb578182fd5b823591506020830135613ddd8161450a565b809150509250929050565b60008060408385031215613dfa578182fd5b50508035926020909101359150565b60008060008060008060c08789031215613e21578182fd5b86359550602087013594506040870135935060608701359250613e4660808801613cb7565b915060a087013561ffff81168114613e5c578182fd5b809150509295509295509295565b600060208284031215613e7b578081fd5b81356001600160e01b031981168114612a00578182fd5b6000815180845260208085019450808401835b83811015613edf57613ecc8783518051825260208082015190830152604090810151910152565b6060969096019590820190600101613ea5565b509495945050505050565b8051825260208082015190830152604080820151908301526060808201516001600160a01b0316908301526080908101511515910152565b80518252602081015160208301526040810151613f4a60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a0810151613f7260a084018215159052565b5060c081015160c083015260e0810151613f9460e084018263ffffffff169052565b506101008181015163ffffffff81168483015250506101208181015163ffffffff81168483015250506101408181015161ffff8116848301525b50505050565b60008251613fe6818460208701614472565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614028816017850160208801614472565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614059816028840160208801614472565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b818110156140a65783516001600160a01b031683529284019291840191600101614081565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156140a6578351835292840192918401916001016140ce565b6020808252825182820181905260009190848201906040850190845b818110156140a657614138838551805182526020808201516001600160a01b0316908301526040908101511515910152565b9284019260609290920191600101614106565b602081526000612a006020830184613e92565b6040815260006141716040830185613e92565b90508260208301529392505050565b6020808252825182820181905260009190848201906040850190845b818110156140a6576141af838551613eea565b9284019260a0929092019160010161419c565b6020808252825182820181905260009190848201906040850190845b818110156140a6576141f1838551613f22565b9284019261016092909201916001016141de565b6020815260008251806020840152614224816040850160208701614472565b601f01601f19169190910160400192915050565b60208082526006908201526527379029bab160d11b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815181526020808301516001600160a01b03169082015260408083015115159082015260608101610b0a565b6020808252825182820182905280516040840181905260009291820190839060608601905b8083101561433f57835167ffffffffffffffff168252928401926001929092019190840190614315565b509695505050505050565b81518152602080830151908201526040808301519082015260608101610b0a565b60a08101610b0a8284613eea565b6101608101610b0a8284613f22565b6000821982111561439b5761439b6144f4565b500190565b600063ffffffff8083168185168083038211156143bf576143bf6144f4565b01949350505050565b6000826143e357634e487b7160e01b81526012600452602481fd5b500490565b600062ffffff8083168185168183048111821515161561440a5761440a6144f4565b02949350505050565b600081600019048311821515161561442d5761442d6144f4565b500290565b600082821015614444576144446144f4565b500390565b600067ffffffffffffffff8381169083168181101561446a5761446a6144f4565b039392505050565b60005b8381101561448d578181015183820152602001614475565b83811115613fce5750506000910152565b6000816144ad576144ad6144f4565b506000190190565b60006000198214156144c9576144c96144f4565b5060010190565b600063ffffffff808316818114156144ea576144ea6144f4565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b801515811461214557600080fdfea2646970667358221220125da98c0af8997edf16a2e66a59cbf30f5c8a03dddf9b76fe973eb1d881ac3664736f6c63430008040033",
          "deployedBytecode": "0x6080604052600436106102e85760003560e01c80637de2e5e811610190578063b8fb1bac116100dc578063d547741f11610095578063eed5b6e51161006f578063eed5b6e514610a56578063f071db5a14610a76578063f2fde38b14610a8c578063fbc4fc4414610aac57600080fd5b8063d547741f14610a03578063d76ac1d114610a23578063e91dbcb014610a4357600080fd5b8063b8fb1bac146108f0578063c3b4dde914610912578063c6d05aee1461094b578063cddf64ea14610995578063d250185c146109b5578063d3fbc74c146109d557600080fd5b806391d14854116101495780639bde82dc116101235780639bde82dc14610885578063a217fddf146108a5578063b62fe12f146108ba578063b7391341146108da57600080fd5b806391d148541461082557806392b58bc2146108455780639454932c1461087257600080fd5b80637de2e5e81461071857806380dd0d8e1461074557806383102c2b1461077257806384053229146107a657806388ac2917146107d35780638da5cb5b146107f357600080fd5b80632c3ca35a1161024f578063473b084c1161020857806369fe0e2d116101e257806369fe0e2d146106ad578063703a54b5146106cd578063715018a6146106e357806378ba33c6146106f857600080fd5b8063473b084c1461060c5780634e43603a14610639578063567556a4146106a557600080fd5b80632c3ca35a146104cf5780632d5bbf60146104fc5780632da826431461058c5780632f2ff15d146105b957806336568abe146105d95780633ca684e3146105f957600080fd5b80631a937f08116102a15780631a937f08146103dc5780631f9ef490146103ef578063202cff8a1461041c578063224b6b8c1461042f578063248a9ca31461045c578063254e287b1461048c57600080fd5b806301ffc9a7146102f45780630260f912146103295780630357371d1461034b5780630ccf21561461036b5780630e4999941461038f578063131dbd09146103bc57600080fd5b366102ef57005b600080fd5b34801561030057600080fd5b5061031461030f366004613e6a565b610ad9565b60405190151581526020015b60405180910390f35b34801561033557600080fd5b50610349610344366004613d76565b610b10565b005b34801561035757600080fd5b50610349610366366004613d16565b610e4b565b34801561037757600080fd5b5061038160035481565b604051908152602001610320565b34801561039b57600080fd5b506103816103aa366004613d76565b600f6020526000908152604090205481565b3480156103c857600080fd5b506103496103d7366004613d76565b610e6b565b6103496103ea366004613d76565b610e9a565b3480156103fb57600080fd5b5061040f61040a366004613d76565b61119a565b6040516103209190614379565b61034961042a366004613e09565b611294565b34801561043b57600080fd5b5061044f61044a366004613cd3565b61163a565b604051610320919061414b565b34801561046857600080fd5b50610381610477366004613d76565b60009081526002602052604090206001015490565b34801561049857600080fd5b506103816104a7366004613d8e565b60009182526010602090815260408084206001600160a01b0393909316845291905290205490565b3480156104db57600080fd5b506104ef6104ea366004613d76565b611843565b60405161032091906140b2565b34801561050857600080fd5b5061051c610517366004613d76565b6118a5565b604080519b8c5260208c019a909a526001600160a01b03909816988a01989098526060890195909552608088019390935290151560a087015260c086015263ffffffff90811660e086015290811661010085015290911661012083015261ffff1661014082015261016001610320565b34801561059857600080fd5b506105ac6105a7366004613ced565b611931565b60405161032091906142c4565b3480156105c557600080fd5b506103496105d4366004613d8e565b6119f1565b3480156105e557600080fd5b506103496105f4366004613d8e565b611a1c565b610349610607366004613de8565b611a96565b34801561061857600080fd5b5061062c610627366004613d76565b612033565b60405161032091906142f0565b34801561064557600080fd5b50610685610654366004613cd3565b6001600160a01b03166000908152600760205260409020805460048201546002830154600590930154919390929190565b604080519485526020850193909352918301526060820152608001610320565b6103496120e0565b3480156106b957600080fd5b506103496106c8366004613d76565b612148565b3480156106d957600080fd5b5061038160045481565b3480156106ef57600080fd5b50610349612177565b34801561070457600080fd5b506105ac610713366004613d16565b6121ad565b34801561072457600080fd5b50610738610733366004613d76565b612201565b6040516103209190614065565b34801561075157600080fd5b50610765610760366004613d16565b61226f565b604051610320919061434a565b34801561077e57600080fd5b506103817fc6ff1722ffb1bdb71482122a9b8ca2ca5d75d70ed7d05f5d3174c866c748f82581565b3480156107b257600080fd5b506107c66107c1366004613d16565b612351565b604051610320919061436b565b3480156107df57600080fd5b506103496107ee366004613db9565b612414565b3480156107ff57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610320565b34801561083157600080fd5b50610314610840366004613d8e565b612542565b34801561085157600080fd5b50610865610860366004613cd3565b61256d565b6040516103209190614180565b34801561087e57600080fd5b5047610381565b34801561089157600080fd5b506107c66108a0366004613ced565b61261f565b3480156108b157600080fd5b50610381600081565b3480156108c657600080fd5b5061044f6108d5366004613d76565b61269b565b3480156108e657600080fd5b5061038160065481565b3480156108fc57600080fd5b5061090561288a565b60405161032091906141c2565b34801561091e57600080fd5b5061080d61092d366004613cd3565b6001600160a01b039081166000908152600860205260409020541690565b34801561095757600080fd5b50610349610966366004613cd3565b33600090815260086020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b3480156109a157600080fd5b506104ef6109b0366004613cd3565b612979565b3480156109c157600080fd5b506103816109d0366004613de8565b6129e6565b3480156109e157600080fd5b506109f56109f0366004613d28565b612a07565b60405161032092919061415e565b348015610a0f57600080fd5b50610349610a1e366004613d8e565b612be2565b348015610a2f57600080fd5b50610349610a3e366004613d76565b612c08565b610349610a51366004613de8565b612d4b565b348015610a6257600080fd5b5061040f610a71366004613d76565b6130aa565b348015610a8257600080fd5b5061038160055481565b348015610a9857600080fd5b50610349610aa7366004613cd3565b6130d3565b348015610ab857600080fd5b50610acc610ac7366004613cd3565b61316b565b60405161032091906140ea565b60006001600160e01b03198216637965db0b60e01b1480610b0a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360009081526007602090815260408083208484526003810190925290912054610b6b5760405162461bcd60e51b81526020600482015260076024820152662161622052657160c81b60448201526064015b60405180910390fd5b60008281526003820160205260408120546002830190610b8d90600190614432565b81548110610bab57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060408051606081018252600294909402909101805484526001908101546001600160a01b038116858501819052600160a01b90910460ff1615158584015285526007835281852088865290810190925290922054909250610c465760405162461bcd60e51b815260206004820152600b60248201526a2173656c6c65722052657160a81b6044820152606401610b62565b6000848152600180830160205260408220548391610c6391614432565b81548110610c8157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600402019050600f6000826001015481526020019081526020016000205460001415610ce25760405162461bcd60e51b8152600401610b629060208082526004908201526310b9bab160e11b604082015260600190565b6001818101546000908152600f60205260408120549091600e91610d069190614432565b81548110610d2457634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101608101825260089093029091018054835260018101549383019390935260028301546001600160a01b031690820152600380830154606083015260048301546080830152600583015460ff908116151560a0840152600684015460c084015260079093015463ffffffff80821660e085015264010000000082048116610100850152600160401b82041661012084015261ffff600160601b90910416610140830152840154909250600160a01b900416158015610df457506040840151155b15610e2b576080810151604051339180156108fc02916000818181858888f19350505050158015610e29573d6000803e3d6000fd5b505b610e39846020015187613202565b610e433387613430565b505050505050565b610e6782610e616000546001600160a01b031690565b8361363c565b5050565b6000546001600160a01b03163314610e955760405162461bcd60e51b8152600401610b6290614258565b600455565b60026001541415610ebd5760405162461bcd60e51b8152600401610b629061428d565b60026001818155336000908152600760209081526040808320868452600381019092528220549093919291840191610ef491614432565b81548110610f1257634e487b7160e01b600052603260045260246000fd5b6000918252602090912060016002909202018181015490925060ff600160a01b90910416151514610f715760405162461bcd60e51b81526020600482015260096024820152681858881cd95c9d995960ba1b6044820152606401610b62565b6001808201546001600160a01b0316600090815260076020908152604080832087845280850190925282205490928391610fab9190614432565b81548110610fc957634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020190508260010160149054906101000a900460ff161515600115151461102a5760405162461bcd60e51b81526020600482015260096024820152681cdc881cd95c9d995960ba1b6044820152606401610b62565b6001818101546000908152600f60205260408120549091600e9161104e9190614432565b8154811061106c57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101608101825260089093029091018054835260018101549383019390935260028301546001600160a01b03169082015260038201546060820152600482015460808201819052600583015460ff16151560a0830152600683015460c083015260079092015463ffffffff80821660e084015264010000000082048116610100840152600160401b82041661012083015261ffff600160601b90910416610140820152915034146111575760405162461bcd60e51b815260206004820152600660248201526521707269636560d01b6044820152606401610b62565b60038201805460ff60a01b19908116909155600185018054909116905560068054349190600090611189908490614388565b909155505060018055505050505050565b6111a2613c5b565b6000828152600f6020526040902054600e906111c090600190614432565b815481106111de57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101608101825260089093029091018054835260018101549383019390935260028301546001600160a01b0316908201526003820154606082015260048201546080820152600582015460ff16151560a0820152600682015460c082015260079091015463ffffffff80821660e084015264010000000082048116610100840152600160401b82041661012083015261ffff600160601b9091041661014082015292915050565b6004543410156112cf5760405162461bcd60e51b81526020600482015260066024820152656d696e46656560d01b6044820152606401610b62565b60018161ffff16101580156112ea575061016d8161ffff1611155b6113225760405162461bcd60e51b815260206004820152600960248201526819185e5cd5985b1a5960ba1b6044820152606401610b62565b604080513360208201529081018790526001600160a01b038316606082015260009060800160408051601f1981840301815291815281516020928301206000818152600f909352912054909150156113a85760405162461bcd60e51b815260206004820152600960248201526853756245786973747360b81b6044820152606401610b62565b6000604051806101600160405280838152602001898152602001336001600160a01b0316815260200188815260200187815260200160011515815260200160008152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020018461ffff168152509050600e819080600181540180825580915050600190039060005260206000209060080201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c0820151816006015560e08201518160070160006101000a81548163ffffffff021916908363ffffffff1602179055506101008201518160070160046101000a81548163ffffffff021916908363ffffffff1602179055506101208201518160070160086101000a81548163ffffffff021916908363ffffffff16021790555061014082015181600701600c6101000a81548161ffff021916908361ffff1602179055505050600e80549050600f6000848152602001908152602001600020819055506000600d60008781526020019081526020016000209050806000016001600e805490506115b09190614449565b815460018082018455600093845260208085206004840401805460039094166008026101000a67ffffffffffffffff818102199095169590941693909302939093179091553383526007825260408320600580820180549384018155855292842090910186905581549092349291611629908490614388565b909155505050505050505050505050565b6001600160a01b0381166000908152600760205260408120600401546060919067ffffffffffffffff81111561168057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156116cb57816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161169e5790505b50905060005b815181101561183c576001600160a01b03841660009081526007602052604081206004018054600a92600192600b928690811061171e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020546117429190614432565b8154811061176057634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508282815181106117b757634e487b7160e01b600052603260045260246000fd5b60200260200101819052508181815181106117e257634e487b7160e01b600052603260045260246000fd5b60200260200101516040015142111561182a576000801b82828151811061181957634e487b7160e01b600052603260045260246000fd5b602002602001015160200181815250505b80611834816144b5565b9150506116d1565b5092915050565b6000818152600c602090815260409182902080548351818402810184019094528084526060939283018282801561189957602002820191906000526020600020905b815481526020019060010190808311611885575b50505050509050919050565b600e81815481106118b557600080fd5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600687015460079097015495975093956001600160a01b03909316949193909260ff9091169163ffffffff808216916401000000008104821691600160401b82041690600160601b900461ffff168b565b60408051606081018252600080825260208083018290528284018290526001600160a01b038616825260078152838220858352600381019091529290205490916002019061198190600190614432565b8154811061199f57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160608101825260029390930290910180548352600101546001600160a01b03811693830193909352600160a01b90920460ff161515918101919091529392505050565b600082815260026020526040902060010154611a0d813361368e565b611a1783836136f2565b505050565b6001600160a01b0381163314611a8c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610b62565b610e678282613778565b60026001541415611ab95760405162461bcd60e51b8152600401610b629061428d565b60026001908155336000908152600760209081526040808320868452938401909152902054611b135760405162461bcd60e51b81526020600482015260066024820152654e6f2052657160d01b6044820152606401610b62565b6000838152600180830160205260408220548391611b3091614432565b81548110611b4e57634e487b7160e01b600052603260045260246000fd5b600091825260209091206004909102016003810154909150600160a01b900460ff1615611ba65760405162461bcd60e51b81526020600482015260066024820152651cd95c9d995960d21b6044820152606401610b62565b60018101546000908152600f6020526040902054611bd65760405162461bcd60e51b8152600401610b6290614238565b6001818101546000908152600f60205260408120549091600e91611bfa9190614432565b81548110611c1857634e487b7160e01b600052603260045260246000fd5b6000918252602090912060089091020160028101549091506001600160a01b03163314611c785760405162461bcd60e51b815260206004820152600e60248201526d2737ba1029bab11029b2b63632b960911b6044820152606401610b62565b60038201546001600160a01b03166000908152600760205260409020611cb7604080516060810182526000808252602082018190529181019190915290565b60018401548152602081018690526007830154611ce290600160601b900461ffff16620151806143e8565b611cf19062ffffff1642614388565b6040828101828152600387810154855160208088018051875133818501526001600160a01b03909516858901526060850193909352608084019790975260a0808401929092528551808403909201825260c09092018552805190820120600a80546001808201835560008381528a517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a89388029384015598517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a983015595517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa9091015554818752600b83528587205560048801805480860182559087528287200181905589548652600c825284862080548086018255908752828720018190558c86529187019052918320549192916002860191611e2f91614432565b81548110611e4d57634e487b7160e01b600052603260045260246000fd5b60009182526020822060029190910201600181018054600160a01b60ff60a01b19918216811790925560038a810180549092169092179055546004880154919350611e97916129e6565b90506000818760040154611eab9190614432565b604051909150339082156108fc029083906000818181858888f19350505050158015611edb573d6000803e3d6000fd5b50866004015460066000828254611ef29190614432565b925050819055508160056000828254611f0b9190614388565b9091555050600787018054640100000000900463ffffffff16906004611f30836144d0565b91906101000a81548163ffffffff021916908363ffffffff1602179055505080876006016000828254611f639190614388565b90915550506001880154600090815260106020908152604080832060038c01546001600160a01b03168452909152902054611fe2576001808901546000908152601060209081526040822060038c0154908401805494850181558352912090910180546001600160a01b0319166001600160a01b039092169190911790555b6001880154600090815260106020908152604080832060038c01546001600160a01b031684529091528120805483929061201d908490614388565b9091555050600180555050505050505050505050565b6040805160208082018352606082526000848152600d8252839020835181548084028201860186529281018381529394909391928492918491908401828280156120d057602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841161208b5790505b5050505050815250509050919050565b6000546001600160a01b0316331461210a5760405162461bcd60e51b8152600401610b6290614258565b60065433906108fc9061211d9047614432565b6040518115909202916000818181858888f19350505050158015612145573d6000803e3d6000fd5b50565b6000546001600160a01b031633146121725760405162461bcd60e51b8152600401610b6290614258565b600355565b6000546001600160a01b031633146121a15760405162461bcd60e51b8152600401610b6290614258565b6121ab60006137df565b565b60408051606081018252600080825260208083018290528284018290526001600160a01b0386168252600790529190912060020180548390811061199f57634e487b7160e01b600052603260045260246000fd5b60008181526010602090815260409182902060010180548351818402810184019094528084526060939283018282801561189957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116122465750505050509050919050565b60408051606081018252600080825260208201819052918101919091526001600160a01b03831660009081526007602052604081206004018054600a92600192600b92879081106122d057634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020546122f49190614432565b8154811061231257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905092915050565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b038616825260079052919091208054839081106123b057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a081018252600493909302909101805483526001810154938301939093526002830154908201526003909101546001600160a01b0381166060830152600160a01b900460ff16151560808201529392505050565b6000828152600f602052604090205461243f5760405162461bcd60e51b8152600401610b6290614238565b6000828152600f6020526040812054600e9061245d90600190614432565b8154811061247b57634e487b7160e01b600052603260045260246000fd5b600091825260209091206002600890920201908101549091506001600160a01b031633146124d85760405162461bcd60e51b815260206004820152600a6024820152692737ba1029b2b63632b960b11b6044820152606401610b62565b60078101546004600160401b90910463ffffffff161061252d5760405162461bcd60e51b815260206004820152601060248201526f546f6f206d616e79207265706f72747360801b6044820152606401610b62565b600501805460ff191691151591909117905550565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609492939192909184015b828210156126145760008481526020908190206040805160a081018252600486029092018054835260018082015484860152600282015492840192909252600301546001600160a01b0381166060840152600160a01b900460ff161515608083015290835290920191016125a5565b505050509050919050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526001600160a01b0383166000908152600760209081526040808320858452600180820190935292205461267d9190614432565b815481106123b057634e487b7160e01b600052603260045260246000fd5b6000818152600c60205260408120546060918167ffffffffffffffff8111156126d457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561271f57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816126f25790505b50905060005b82811015612882576000858152600c602052604081208054600a92600192600b928690811061276457634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020546127889190614432565b815481106127a657634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508282815181106127fd57634e487b7160e01b600052603260045260246000fd5b602002602001018190525081818151811061282857634e487b7160e01b600052603260045260246000fd5b602002602001015160400151421115612870576000801b82828151811061285f57634e487b7160e01b600052603260045260246000fd5b602002602001015160200181815250505b8061287a816144b5565b915050612725565b509392505050565b6060600e805480602002602001604051908101604052809291908181526020016000905b82821015612970576000848152602090819020604080516101608101825260088602909201805483526001808201548486015260028201546001600160a01b0316928401929092526003810154606084015260048101546080840152600581015460ff16151560a0840152600681015460c08401526007015463ffffffff80821660e085015264010000000082048116610100850152600160401b820416610120840152600160601b900461ffff1661014083015290835290920191016128ae565b50505050905090565b6001600160a01b03811660009081526007602090815260409182902060050180548351818402810184019094528084526060939283018282801561189957602002820191906000526020600020908154815260200190600101908083116118855750505050509050919050565b6000620186a06129f68484614413565b612a0091906143c8565b9392505050565b606060008267ffffffffffffffff811115612a3257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a7d57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181612a505790505b5091506000905080845b6001600160a01b038716600090815260076020526040902060040154811015612bd8576001600160a01b03871660009081526007602052604081206004018054600a91600191600b91859187908110612af057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154815260200190815260200160002054612b149190614432565b81548110612b3257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090508060400151421015612bc55785831015612bbf5780858481518110612ba057634e487b7160e01b600052603260045260246000fd5b602002602001018190525082612bb5906144b5565b9250819350612bc5565b50612bd8565b5080612bd0816144b5565b915050612a87565b5050935093915050565b600082815260026020526040902060010154612bfe813361368e565b611a178383613778565b612c327fc6ff1722ffb1bdb71482122a9b8ca2ca5d75d70ed7d05f5d3174c866c748f82533612542565b612c6d5760405162461bcd60e51b815260206004820152600c60248201526b2737ba102932b837b93a32b960a11b6044820152606401610b62565b6000818152600f6020526040902054612c985760405162461bcd60e51b8152600401610b6290614238565b6000818152600f6020526040812054600e90612cb690600190614432565b81548110612cd457634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020190508060070160089054906101000a900463ffffffff166001612d0591906143a0565b6007820180546bffffffff00000000000000001916600160401b63ffffffff938416810291909117918290556003910490911610610e6757600501805460ff1916905550565b60026001541415612d6e5760405162461bcd60e51b8152600401610b629061428d565b60026001556000828152600f6020526040902054612d9e5760405162461bcd60e51b8152600401610b6290614238565b6000828152600f6020526040812054600e90612dbc90600190614432565b81548110612dda57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201600581015490915060ff16612e2c5760405162461bcd60e51b8152602060048201526008602482015267496e61637469766560c01b6044820152606401610b62565b80600401543414612e6e5760405162461bcd60e51b815260206004820152600c60248201526b56616c7565213d707269636560a01b6044820152606401610b62565b60028101546001600160a01b0316600090815260076020908152604080832081513381850152808301889052606080820188905283518083039091018152608090910183528051908401208085526001820190935292205415612f005760405162461bcd60e51b815260206004820152600a6024820152695265712065786973747360b01b6044820152606401610b62565b60078301805463ffffffff16906000612f18836144d0565b91906101000a81548163ffffffff021916908363ffffffff16021790555050612f686040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b8481523360608201908152845460208084019182526040808501868152875460018181018a5560008a815285812089516004909402019283559551828201559151600282015594516003909501805460808801511515600160a01b026001600160a81b03199091166001600160a01b0397909716969096179590951790945586548684529387019091528120919091556006805434929061300a908490614388565b90915550506040805160608101825260008183018181528583526002978801546001600160a01b03908116602080860191825233855260078152868520808c01805460018082018355828952848920995191909e029098019788559251968c01805495511515600160a01b026001600160a81b03199096169790941696909617939093179091555495825260039092019091522091909155505080555050565b6130b2613c5b565b600e82815481106111de57634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b031633146130fd5760405162461bcd60e51b8152600401610b6290614258565b6001600160a01b0381166131625760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b62565b612145816137df565b6001600160a01b0381166000908152600760209081526040808320600201805482518185028101850190935280835260609492939192909184015b828210156126145760008481526020908190206040805160608101825260028602909201805483526001908101546001600160a01b03811684860152600160a01b900460ff1615159183019190915290835290920191016131a6565b6001600160a01b038216600090815260076020908152604080832084845260018101909252909120546132605760405162461bcd60e51b8152600401610b62906020808252600490820152632152657160e01b604082015260600190565b60008281526001828101602052604082205461327c9190614432565b825490915060009061329090600190614432565b90508181146133be578260000181815481106132bc57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600402018360000183815481106132ed57634e487b7160e01b600052603260045260246000fd5b6000918252602090912082546004909202019081556001808301548183015560028084015490830155600392830180549390920180546001600160a01b031981166001600160a01b039095169485178255925460ff600160a01b91829004161515026001600160a81b031990931690931791909117909155613370908390614388565b83600101600085600001848154811061339957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060040201600201548152602001908152602001600020819055505b82548390806133dd57634e487b7160e01b600052603160045260246000fd5b60008281526020808220600460001990940193840201828155600181810184905560028201849055600390910180546001600160a81b031916905592909355958652939093019092525050604081205550565b6001600160a01b0382166000908152600760209081526040808320848452600381019092529091205461348f5760405162461bcd60e51b81526020600482015260076024820152662161622052657160c81b6044820152606401610b62565b60008281526003820160205260408120546134ac90600190614432565b60028301549091506000906134c390600190614432565b90508181146135d8578260020181815481106134ef57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020183600201838154811061352057634e487b7160e01b600052603260045260246000fd5b6000918252602090912082546002909202019081556001918201805491830180546001600160a01b031981166001600160a01b039094169384178255915460ff600160a01b91829004161515026001600160a81b031990921690921717905561358a908390614388565b8360030160008560020185815481106135b357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600001548152602001908152602001600020819055505b826002018054806135f957634e487b7160e01b600052603160045260246000fd5b6000828152602080822060026000199094019384020182815560010180546001600160a81b03191690559190925594815260039093019093525060408120555050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611a1790849061382f565b6136988282612542565b610e67576136b0816001600160a01b03166014613901565b6136bb836020613901565b6040516020016136cc929190613ff0565b60408051601f198184030181529082905262461bcd60e51b8252610b6291600401614205565b6136fc8282612542565b610e675760008281526002602090815260408083206001600160a01b03851684529091529020805460ff191660011790556137343390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6137828282612542565b15610e675760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000613884826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ae39092919063ffffffff16565b805190915015611a1757808060200190518101906138a29190613d5a565b611a175760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b62565b60606000613910836002614413565b61391b906002614388565b67ffffffffffffffff81111561394157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561396b576020820181803683370190505b509050600360fc1b8160008151811061399457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106139d157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006139f5846002614413565b613a00906001614388565b90505b6001811115613a94576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613a4257634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110613a6657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93613a8d8161449e565b9050613a03565b508315612a005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b62565b6060613af28484600085613afa565b949350505050565b606082471015613b5b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b62565b843b613ba95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b62565b600080866001600160a01b03168587604051613bc59190613fd4565b60006040518083038185875af1925050503d8060008114613c02576040519150601f19603f3d011682016040523d82523d6000602084013e613c07565b606091505b5091509150613c17828286613c22565b979650505050505050565b60608315613c31575081612a00565b825115613c415782518084602001fd5b8160405162461bcd60e51b8152600401610b629190614205565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b80356001600160a01b0381168114613cce57600080fd5b919050565b600060208284031215613ce4578081fd5b612a0082613cb7565b60008060408385031215613cff578081fd5b613d0883613cb7565b946020939093013593505050565b60008060408385031215613cff578182fd5b600080600060608486031215613d3c578081fd5b613d4584613cb7565b95602085013595506040909401359392505050565b600060208284031215613d6b578081fd5b8151612a008161450a565b600060208284031215613d87578081fd5b5035919050565b60008060408385031215613da0578182fd5b82359150613db060208401613cb7565b90509250929050565b60008060408385031215613dcb578182fd5b823591506020830135613ddd8161450a565b809150509250929050565b60008060408385031215613dfa578182fd5b50508035926020909101359150565b60008060008060008060c08789031215613e21578182fd5b86359550602087013594506040870135935060608701359250613e4660808801613cb7565b915060a087013561ffff81168114613e5c578182fd5b809150509295509295509295565b600060208284031215613e7b578081fd5b81356001600160e01b031981168114612a00578182fd5b6000815180845260208085019450808401835b83811015613edf57613ecc8783518051825260208082015190830152604090810151910152565b6060969096019590820190600101613ea5565b509495945050505050565b8051825260208082015190830152604080820151908301526060808201516001600160a01b0316908301526080908101511515910152565b80518252602081015160208301526040810151613f4a60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a0810151613f7260a084018215159052565b5060c081015160c083015260e0810151613f9460e084018263ffffffff169052565b506101008181015163ffffffff81168483015250506101208181015163ffffffff81168483015250506101408181015161ffff8116848301525b50505050565b60008251613fe6818460208701614472565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614028816017850160208801614472565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614059816028840160208801614472565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b818110156140a65783516001600160a01b031683529284019291840191600101614081565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156140a6578351835292840192918401916001016140ce565b6020808252825182820181905260009190848201906040850190845b818110156140a657614138838551805182526020808201516001600160a01b0316908301526040908101511515910152565b9284019260609290920191600101614106565b602081526000612a006020830184613e92565b6040815260006141716040830185613e92565b90508260208301529392505050565b6020808252825182820181905260009190848201906040850190845b818110156140a6576141af838551613eea565b9284019260a0929092019160010161419c565b6020808252825182820181905260009190848201906040850190845b818110156140a6576141f1838551613f22565b9284019261016092909201916001016141de565b6020815260008251806020840152614224816040850160208701614472565b601f01601f19169190910160400192915050565b60208082526006908201526527379029bab160d11b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815181526020808301516001600160a01b03169082015260408083015115159082015260608101610b0a565b6020808252825182820182905280516040840181905260009291820190839060608601905b8083101561433f57835167ffffffffffffffff168252928401926001929092019190840190614315565b509695505050505050565b81518152602080830151908201526040808301519082015260608101610b0a565b60a08101610b0a8284613eea565b6101608101610b0a8284613f22565b6000821982111561439b5761439b6144f4565b500190565b600063ffffffff8083168185168083038211156143bf576143bf6144f4565b01949350505050565b6000826143e357634e487b7160e01b81526012600452602481fd5b500490565b600062ffffff8083168185168183048111821515161561440a5761440a6144f4565b02949350505050565b600081600019048311821515161561442d5761442d6144f4565b500290565b600082821015614444576144446144f4565b500390565b600067ffffffffffffffff8381169083168181101561446a5761446a6144f4565b039392505050565b60005b8381101561448d578181015183820152602001614475565b83811115613fce5750506000910152565b6000816144ad576144ad6144f4565b506000190190565b60006000198214156144c9576144c96144f4565b5060010190565b600063ffffffff808316818114156144ea576144ea6144f4565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b801515811461214557600080fdfea2646970667358221220125da98c0af8997edf16a2e66a59cbf30f5c8a03dddf9b76fe973eb1d881ac3664736f6c63430008040033",
          "devdoc": {
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          },
          "storageLayout": {
            "storage": [
              {
                "astId": 389,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 497,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "_status",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 24,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "_roles",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
              },
              {
                "astId": 1404,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "marketFee",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 1407,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "minListingFee",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
              },
              {
                "astId": 1410,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "feesCollected",
                "offset": 0,
                "slot": "5",
                "type": "t_uint256"
              },
              {
                "astId": 1413,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "inEscrow",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
              },
              {
                "astId": 1471,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "users",
                "offset": 0,
                "slot": "7",
                "type": "t_mapping(t_address,t_struct(User)1466_storage)"
              },
              {
                "astId": 1475,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "userToPortable",
                "offset": 0,
                "slot": "8",
                "type": "t_mapping(t_address,t_address)"
              },
              {
                "astId": 1479,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "nameHashToUser",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_bytes32,t_address)"
              },
              {
                "astId": 1483,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "allSubItems",
                "offset": 0,
                "slot": "10",
                "type": "t_array(t_struct(SubItem)1443_storage)dyn_storage"
              },
              {
                "astId": 1487,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "allSubItemIds",
                "offset": 0,
                "slot": "11",
                "type": "t_mapping(t_bytes32,t_uint256)"
              },
              {
                "astId": 1492,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "nameHashToSubItems",
                "offset": 0,
                "slot": "12",
                "type": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)"
              },
              {
                "astId": 1501,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "categories",
                "offset": 0,
                "slot": "13",
                "type": "t_mapping(t_bytes32,t_struct(Category)1496_storage)"
              },
              {
                "astId": 1528,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "subscriptions",
                "offset": 0,
                "slot": "14",
                "type": "t_array(t_struct(Sub)1524_storage)dyn_storage"
              },
              {
                "astId": 1532,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "subscriptionIds",
                "offset": 0,
                "slot": "15",
                "type": "t_mapping(t_bytes32,t_uint256)"
              },
              {
                "astId": 1545,
                "contract": "contracts/DataHub.sol:DataHub",
                "label": "subInfos",
                "offset": 0,
                "slot": "16",
                "type": "t_mapping(t_bytes32,t_struct(SubInfo)1540_storage)"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
              },
              "t_array(t_bytes32)dyn_storage": {
                "base": "t_bytes32",
                "encoding": "dynamic_array",
                "label": "bytes32[]",
                "numberOfBytes": "32"
              },
              "t_array(t_struct(ActiveBid)1436_storage)dyn_storage": {
                "base": "t_struct(ActiveBid)1436_storage",
                "encoding": "dynamic_array",
                "label": "struct DataHub.ActiveBid[]",
                "numberOfBytes": "32"
              },
              "t_array(t_struct(Sub)1524_storage)dyn_storage": {
                "base": "t_struct(Sub)1524_storage",
                "encoding": "dynamic_array",
                "label": "struct DataHub.Sub[]",
                "numberOfBytes": "32"
              },
              "t_array(t_struct(SubItem)1443_storage)dyn_storage": {
                "base": "t_struct(SubItem)1443_storage",
                "encoding": "dynamic_array",
                "label": "struct DataHub.SubItem[]",
                "numberOfBytes": "32"
              },
              "t_array(t_struct(SubRequest)1429_storage)dyn_storage": {
                "base": "t_struct(SubRequest)1429_storage",
                "encoding": "dynamic_array",
                "label": "struct DataHub.SubRequest[]",
                "numberOfBytes": "32"
              },
              "t_array(t_uint64)dyn_storage": {
                "base": "t_uint64",
                "encoding": "dynamic_array",
                "label": "uint64[]",
                "numberOfBytes": "32"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_mapping(t_address,t_address)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => address)",
                "numberOfBytes": "32",
                "value": "t_address"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              },
              "t_mapping(t_address,t_struct(User)1466_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct DataHub.User)",
                "numberOfBytes": "32",
                "value": "t_struct(User)1466_storage"
              },
              "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_mapping(t_bytes32,t_address)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
              },
              "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => bytes32[])",
                "numberOfBytes": "32",
                "value": "t_array(t_bytes32)dyn_storage"
              },
              "t_mapping(t_bytes32,t_struct(Category)1496_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => struct DataHub.Category)",
                "numberOfBytes": "32",
                "value": "t_struct(Category)1496_storage"
              },
              "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => struct AccessControl.RoleData)",
                "numberOfBytes": "32",
                "value": "t_struct(RoleData)19_storage"
              },
              "t_mapping(t_bytes32,t_struct(SubInfo)1540_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => struct DataHub.SubInfo)",
                "numberOfBytes": "32",
                "value": "t_struct(SubInfo)1540_storage"
              },
              "t_mapping(t_bytes32,t_uint256)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_struct(ActiveBid)1436_storage": {
                "encoding": "inplace",
                "label": "struct DataHub.ActiveBid",
                "members": [
                  {
                    "astId": 1431,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "requestHash",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 1433,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "seller",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_address"
                  },
                  {
                    "astId": 1435,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "served",
                    "offset": 20,
                    "slot": "1",
                    "type": "t_bool"
                  }
                ],
                "numberOfBytes": "64"
              },
              "t_struct(Category)1496_storage": {
                "encoding": "inplace",
                "label": "struct DataHub.Category",
                "members": [
                  {
                    "astId": 1495,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "subIdxs",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_array(t_uint64)dyn_storage"
                  }
                ],
                "numberOfBytes": "32"
              },
              "t_struct(RoleData)19_storage": {
                "encoding": "inplace",
                "label": "struct AccessControl.RoleData",
                "members": [
                  {
                    "astId": 16,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "members",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_mapping(t_address,t_bool)"
                  },
                  {
                    "astId": 18,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "adminRole",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_bytes32"
                  }
                ],
                "numberOfBytes": "64"
              },
              "t_struct(Sub)1524_storage": {
                "encoding": "inplace",
                "label": "struct DataHub.Sub",
                "members": [
                  {
                    "astId": 1503,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "subHash",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 1505,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "fdpSellerNameHash",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 1507,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "seller",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_address"
                  },
                  {
                    "astId": 1509,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "swarmLocation",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 1511,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "price",
                    "offset": 0,
                    "slot": "4",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 1513,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "active",
                    "offset": 0,
                    "slot": "5",
                    "type": "t_bool"
                  },
                  {
                    "astId": 1515,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "earned",
                    "offset": 0,
                    "slot": "6",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 1517,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "bids",
                    "offset": 0,
                    "slot": "7",
                    "type": "t_uint32"
                  },
                  {
                    "astId": 1519,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "sells",
                    "offset": 4,
                    "slot": "7",
                    "type": "t_uint32"
                  },
                  {
                    "astId": 1521,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "reports",
                    "offset": 8,
                    "slot": "7",
                    "type": "t_uint32"
                  },
                  {
                    "astId": 1523,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "daysValid",
                    "offset": 12,
                    "slot": "7",
                    "type": "t_uint16"
                  }
                ],
                "numberOfBytes": "256"
              },
              "t_struct(SubInfo)1540_storage": {
                "encoding": "inplace",
                "label": "struct DataHub.SubInfo",
                "members": [
                  {
                    "astId": 1536,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "perSubscriberBalance",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_mapping(t_address,t_uint256)"
                  },
                  {
                    "astId": 1539,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "subscribers",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_array(t_address)dyn_storage"
                  }
                ],
                "numberOfBytes": "64"
              },
              "t_struct(SubItem)1443_storage": {
                "encoding": "inplace",
                "label": "struct DataHub.SubItem",
                "members": [
                  {
                    "astId": 1438,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "subHash",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 1440,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "unlockKeyLocation",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 1442,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "validTill",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_uint256"
                  }
                ],
                "numberOfBytes": "96"
              },
              "t_struct(SubRequest)1429_storage": {
                "encoding": "inplace",
                "label": "struct DataHub.SubRequest",
                "members": [
                  {
                    "astId": 1420,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "fdpBuyerNameHash",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 1422,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "subHash",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 1424,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "requestHash",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 1426,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "buyer",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_address"
                  },
                  {
                    "astId": 1428,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "served",
                    "offset": 20,
                    "slot": "3",
                    "type": "t_bool"
                  }
                ],
                "numberOfBytes": "128"
              },
              "t_struct(User)1466_storage": {
                "encoding": "inplace",
                "label": "struct DataHub.User",
                "members": [
                  {
                    "astId": 1447,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "subRequests",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_array(t_struct(SubRequest)1429_storage)dyn_storage"
                  },
                  {
                    "astId": 1451,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "subRequestIds",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_mapping(t_bytes32,t_uint256)"
                  },
                  {
                    "astId": 1455,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "activeBids",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_array(t_struct(ActiveBid)1436_storage)dyn_storage"
                  },
                  {
                    "astId": 1459,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "activeBidIds",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_mapping(t_bytes32,t_uint256)"
                  },
                  {
                    "astId": 1462,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "subItemHashes",
                    "offset": 0,
                    "slot": "4",
                    "type": "t_array(t_bytes32)dyn_storage"
                  },
                  {
                    "astId": 1465,
                    "contract": "contracts/DataHub.sol:DataHub",
                    "label": "listedSubs",
                    "offset": 0,
                    "slot": "5",
                    "type": "t_array(t_bytes32)dyn_storage"
                  }
                ],
                "numberOfBytes": "192"
              },
              "t_uint16": {
                "encoding": "inplace",
                "label": "uint16",
                "numberOfBytes": "2"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              },
              "t_uint32": {
                "encoding": "inplace",
                "label": "uint32",
                "numberOfBytes": "4"
              },
              "t_uint64": {
                "encoding": "inplace",
                "label": "uint64",
                "numberOfBytes": "8"
              }
            }
          }
        },
        "Calendar": {
          "address": "0x021F96206493c5F832CB3D5f00175C5ceEC6B5F5",
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "_swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "addEvent",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "_swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "addEventForAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "_swarmLocation",
                  "type": "bytes32"
                },
                {
                  "internalType": "address[]",
                  "name": "_participants",
                  "type": "address[]"
                }
              ],
              "name": "addInvite",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "allow",
                  "type": "bool"
                }
              ],
              "name": "allowAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_index",
                  "type": "uint64"
                }
              ],
              "name": "confirmInvite",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                }
              ],
              "name": "getEventsByDate",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Calendar.Event[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64[]",
                  "name": "_dates",
                  "type": "uint64[]"
                }
              ],
              "name": "getEventsByDates",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Calendar.Event[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                }
              ],
              "name": "getFreeSlot",
              "outputs": [
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                }
              ],
              "name": "getInvitesByDate",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "creator",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "date",
                      "type": "uint64"
                    },
                    {
                      "internalType": "address[]",
                      "name": "participants",
                      "type": "address[]"
                    },
                    {
                      "internalType": "address[]",
                      "name": "accepted",
                      "type": "address[]"
                    }
                  ],
                  "internalType": "struct Calendar.Invite[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64[]",
                  "name": "_dates",
                  "type": "uint64[]"
                }
              ],
              "name": "getInvitesByDates",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "creator",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "date",
                      "type": "uint64"
                    },
                    {
                      "internalType": "address[]",
                      "name": "participants",
                      "type": "address[]"
                    },
                    {
                      "internalType": "address[]",
                      "name": "accepted",
                      "type": "address[]"
                    }
                  ],
                  "internalType": "struct Calendar.Invite[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                }
              ],
              "name": "isOwnerAvailable",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_index",
                  "type": "uint64"
                }
              ],
              "name": "removeEventByIndex",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_index",
                  "type": "uint64"
                }
              ],
              "name": "removeInviteByIndex",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_newTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_newDuration",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "_swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "updateEventsByDate",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Calendar.Event",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "transactionHash": "0x63c2da2e4bdf44eb23d076219815ad36309149f2992bc551fdbbe11e2a2d18a1",
          "receipt": {
            "to": null,
            "from": "0xd27ffA0e47Fca8D3E757B4d2C408169859B8c419",
            "contractAddress": "0x021F96206493c5F832CB3D5f00175C5ceEC6B5F5",
            "transactionIndex": 33,
            "gasUsed": "1975517",
            "logsBloom": "0x
            "blockHash": "0x0eb993e75fcd3a96f00b8ca799369b75821c5d19d261eb56d04c2aa20bee0e99",
            "transactionHash": "0x63c2da2e4bdf44eb23d076219815ad36309149f2992bc551fdbbe11e2a2d18a1",
            "logs": [],
            "blockNumber": 3470155,
            "cumulativeGasUsed": "4708644",
            "status": 1,
            "byzantium": true
          },
          "args": [],
          "numDeployments": 1,
          "solcInputHash": "73e833b4efab7caac102c90ac4c374a2",
          "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"addEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"addEventForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_swarmLocation\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"addInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"allowAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_index\",\"type\":\"uint64\"}],\"name\":\"confirmInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"}],\"name\":\"getEventsByDate\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"internalType\":\"struct Calendar.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_dates\",\"type\":\"uint64[]\"}],\"name\":\"getEventsByDates\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"internalType\":\"struct Calendar.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"getFreeSlot\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"}],\"name\":\"getInvitesByDate\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"date\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"accepted\",\"type\":\"address[]\"}],\"internalType\":\"struct Calendar.Invite[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_dates\",\"type\":\"uint64[]\"}],\"name\":\"getInvitesByDates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"date\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"accepted\",\"type\":\"address[]\"}],\"internalType\":\"struct Calendar.Invite[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"isOwnerAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_index\",\"type\":\"uint64\"}],\"name\":\"removeEventByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_index\",\"type\":\"uint64\"}],\"name\":\"removeInviteByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_newTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_newDuration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"updateEventsByDate\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"internalType\":\"struct Calendar.Event\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Calendar.sol\":\"Calendar\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Calendar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// written by @tfius \\r\\npragma solidity ^0.8.0;\\r\\n/*\\r\\n Expected JSON format for event\\r\\n   [{\\r\\n        \\\"eventName\\\": \\\"string\\\",\\r\\n        \\\"description\\\": \\\"string\\\",\\r\\n        \\\"category\\\": \\\"string\\\",\\r\\n        \\\"location\\\": \\\"string\\\",\\r\\n        \\\"participants\\\": [\\\"string\\\"],\\r\\n        \\\"date\\\": \\\"uint64\\\",\\r\\n        \\\"duration\\\": \\\"uint64\\\",\\r\\n        \\\"time\\\": \\\"uint64\\\"\\r\\n    }]\\r\\n*/ \\r\\n/*\\r\\nstruct Event {\\r\\n        bytes eventName;\\r\\n        bytes description;\\r\\n        bytes category;\\r\\n        bytes32 location;\\r\\n        bytes32[] participants;\\r\\n        uint64 duration;\\r\\n        uint64 date;\\r\\n        uint64 time;\\r\\n    }\\r\\n*/ \\r\\n\\r\\ncontract Calendar {\\r\\n    \\r\\n    struct Event {\\r\\n        bytes32 location; // swarm location\\r\\n        uint64 time;\\r\\n        uint64 duration;       \\r\\n    }\\r\\n    struct Invite {\\r\\n        address creator;\\r\\n        bytes32 location; // swarm location\\r\\n        uint64 time;\\r\\n        uint64 duration;\\r\\n        uint64 date;\\r\\n        address[] participants;\\r\\n        address[] accepted;\\r\\n    }\\r\\n    \\r\\n    Event[] private _events;\\r\\n    mapping(address => mapping(uint64 => uint256[])) private _userEvents; // user to date to event index\\r\\n\\r\\n    Invite[] private _invites;\\r\\n    mapping(address => mapping(uint64 => uint256[])) private _userInvites; // user to date to invite index\\r\\n\\r\\n    mapping(address => mapping(address => bool)) private _userAllowList; // allow list per address -> address -> bool\\r\\n    \\r\\n    /*  1. The function takes 4 parameters: date, time, duration, swarmLocation.\\r\\n        2. The first line creates a new Event struct and stores it in the memory variable e. The parameters are passed to the Event struct constructor.\\r\\n        3. The second line pushes the newly created Event struct to the _events array.\\r\\n        4. The third line pushes the index of the newly created Event struct to the _userEvents mapping. */\\r\\n    function addEvent(uint64 _date, uint64 _time, uint64 _duration, bytes32 _swarmLocation) public {\\r\\n        Event memory e = Event(_swarmLocation, _time, _duration);\\r\\n        _events.push(e);\\r\\n        _userEvents[msg.sender][_date].push(_events.length);\\r\\n    }\\r\\n\\r\\n    function allowAddress(address _address, bool allow) public {\\r\\n        _userAllowList[msg.sender][_address] = allow;\\r\\n    }\\r\\n\\r\\n    function addEventForAddress(address _address, uint64 _date, uint64 _time, uint64 _duration, bytes32 _swarmLocation) public {\\r\\n        require(_userAllowList[_address][msg.sender], \\\"Not allowed to add event\\\");\\r\\n        require(_duration >= 900, \\\"Duration too small > 900s\\\");\\r\\n\\r\\n        //uint256 _end = _time + _duration;\\r\\n        //require(_end % 86400 == _time % 86400, \\\"Event must start and end on the same day\\\");\\r\\n\\r\\n        Event memory e = Event(_swarmLocation, _time, _duration);\\r\\n        _events.push(e);\\r\\n        _userEvents[_address][_date].push(_events.length);\\r\\n    }\\r\\n    /* 1. We use the keyword 'require' to check if the index is valid. \\r\\n       2. We use the keyword 'storage' to indicate that we are modifying the existing event. \\r\\n       3. We use the keyword 'memory' to indicate that we are returning a copy of the event.\\r\\n    */\\r\\n    function updateEventsByDate(uint64 _date, uint64 _index, uint64 _newTime, uint64 _newDuration, bytes32 _swarmLocation) public returns (Event memory) {\\r\\n        require(_index < _userEvents[msg.sender][_date].length, \\\"Invalid index\\\");\\r\\n        Event storage e =  _events[_userEvents[msg.sender][_date][_index]];\\r\\n        e.time = _newTime;\\r\\n        e.duration = _newDuration;\\r\\n        e.location = _swarmLocation;\\r\\n        return e;\\r\\n    }\\r\\n    /* 1. We require that the index is less than the length of the array. Otherwise we will get an out-of-bounds error.\\r\\n       2. We loop over the array and shift the elements to the left. We start from the index that we want to remove and end at the second-to-last element.\\r\\n       3. We then use the pop function to remove the last element of the array.\\r\\n    */\\r\\n    function removeEventByIndex(uint64 _date, uint64 _index) public  {\\r\\n        require(_index < _userEvents[msg.sender][_date].length, \\\"Invalid index\\\");\\r\\n        \\r\\n        for (uint i = _index; i < _userEvents[msg.sender][_date].length - 1; i++) {\\r\\n            _userEvents[msg.sender][_date][i] =_userEvents[msg.sender][_date][i+1];\\r\\n        }\\r\\n        _userEvents[msg.sender][_date].pop();\\r\\n    }\\r\\n\\r\\n    /*  1. The first line creates an array of type Event and sets it's size to the length of the array of event IDs for the user and date passed in.\\r\\n        2. The for loop iterates through the array of event IDs and sets the array of events to the actual event data.\\r\\n        3. The function then returns the array of events. */\\r\\n    function getEventsByDate(address owner, uint64 _date) public view returns (Event[] memory) {\\r\\n        Event[] memory events = new Event[](_userEvents[owner][_date].length);\\r\\n        for (uint256 i=0; i < events.length; i++) {\\r\\n            events[i] = _events[_userEvents[owner][_date][i]-1];\\r\\n        }\\r\\n        return events;\\r\\n    }\\r\\n\\r\\n    /*  1. _dates is an array of timestamps\\r\\n        2. We get the length of the array and loop through it\\r\\n        3. For each date we get the length of the events array and we add it to a variable called totalLength\\r\\n        4. We initialize the c variable to 0\\r\\n        5. We initialize an array of events with the length of totalLength\\r\\n        6. We loop through the _dates array again\\r\\n        7. For each date we loop through the array of events for that date\\r\\n        8. We set the events array at index c to the event at index j\\r\\n        9. We increment c by 1\\r\\n        10. We return the events array */\\r\\n    function getEventsByDates(address owner, uint64[] memory _dates) public view returns (Event[] memory) {\\r\\n        uint totalLength = 0;\\r\\n        for(uint i = 0; i < _dates.length; i++) {\\r\\n            totalLength += _userEvents[owner][_dates[i]].length;\\r\\n        }\\r\\n        uint c = 0;\\r\\n        Event[] memory events = new Event[](totalLength);\\r\\n        for(uint i = 0; i < _dates.length; i++) {\\r\\n            for (uint64 j=0; j < _userEvents[owner][_dates[i]].length; j++) {\\r\\n                events[c] = _events[_userEvents[owner][_dates[i]][j]-1];\\r\\n                c++;\\r\\n            }\\r\\n        }\\r\\n        return events;\\r\\n    }\\r\\n\\r\\n    function isOwnerAvailable(address owner, uint64 _date, uint64 _time, uint64 _duration) public view returns (bool) {\\r\\n        Event[] memory events = getEventsByDate(owner, _date);\\r\\n        for (uint256 i=0; i < events.length; i++) {\\r\\n            if (_time > events[i].time && _time < events[i].time + events[i].duration) {\\r\\n                return false;\\r\\n            }\\r\\n            if (_time + _duration > events[i].time && _time + _duration < events[i].time + events[i].duration) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getFreeSlot(address owner, uint64 _date, uint64 _duration) public view returns (uint64) {\\r\\n        Event[] memory events = getEventsByDate(owner, _date);\\r\\n        uint64 time = 0;\\r\\n        for (uint256 i=0; i < events.length; i++) {\\r\\n            if (events[i].time - time >= _duration) {\\r\\n                return time;\\r\\n            }\\r\\n            time = events[i].time + events[i].duration;\\r\\n        }\\r\\n        return time;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    /* function that adds invites to the calendar */\\r\\n    function addInvite(uint64 _date, uint64 _time, uint64 _duration, bytes32 _swarmLocation, address[] memory _participants) public {\\r\\n        address[] memory accepted = new address[](0);\\r\\n        Invite memory i = Invite(msg.sender, _swarmLocation, _time, _duration, _date, _participants, accepted);\\r\\n        _invites.push(i);\\r\\n\\r\\n        // for all participants, add invite to their invites\\r\\n        for (uint256 j=0; j < _participants.length; j++) {\\r\\n            _userInvites[_participants[j]][_date].push(_invites.length);\\r\\n        }\\r\\n        _userInvites[msg.sender][_date].push(_invites.length);\\r\\n    }\\r\\n\\r\\n    /* function to get invites for date */\\r\\n    function getInvitesByDate(address owner, uint64 _date) public view returns (Invite[] memory) {\\r\\n        Invite[] memory invites = new Invite[](_userInvites[owner][_date].length);\\r\\n        for (uint256 i=0; i < invites.length; i++) {\\r\\n            invites[i] = _invites[_userInvites[owner][_date][i]-1];\\r\\n        }\\r\\n        return invites;\\r\\n    }\\r\\n    /* function to get invites for dates */\\r\\n    function getInvitesByDates(address owner, uint64[] memory _dates) public view returns (Invite[] memory) {\\r\\n        uint totalLength = 0;\\r\\n        for(uint i = 0; i < _dates.length; i++) {\\r\\n            totalLength += _userInvites[owner][_dates[i]].length;\\r\\n        }\\r\\n        uint c = 0;\\r\\n        Invite[] memory invites = new Invite[](totalLength);\\r\\n        for(uint i = 0; i < _dates.length; i++) {\\r\\n            for (uint64 j=0; j < _userInvites[owner][_dates[i]].length; j++) {\\r\\n                invites[c] = _invites[_userInvites[owner][_dates[i]][j]-1];\\r\\n                c++;\\r\\n            }\\r\\n        }\\r\\n        return invites;\\r\\n    }\\r\\n\\r\\n    /* function to confirm invite, add event to calendar and remove invite from user invites */\\r\\n    function confirmInvite(uint64 _date, uint64 _index) public {\\r\\n        require(_index < _userInvites[msg.sender][_date].length, \\\"Invalid index\\\");\\r\\n        Invite storage i = _invites[_userInvites[msg.sender][_date][_index]];\\r\\n        i.accepted.push(msg.sender);\\r\\n        addEvent(_date, i.time, i.duration, i.location);\\r\\n        removeInviteByIndex(_date, _index);\\r\\n    }\\r\\n\\r\\n    function removeInviteByIndex(uint64 _date, uint64 _index) public  {\\r\\n        require(_index < _userInvites[msg.sender][_date].length, \\\"Invalid index\\\");\\r\\n        \\r\\n        for (uint i = _index; i < _userInvites[msg.sender][_date].length - 1; i++) {\\r\\n            _userInvites[msg.sender][_date][i] =_userInvites[msg.sender][_date][i+1];\\r\\n        }\\r\\n        _userInvites[msg.sender][_date].pop();\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc785e515a8cfce4776589829034bd23d1ad2027519f4eb1123674d4165c636a0\",\"license\":\"MIT\"}},\"version\":1}",
          "bytecode": "",
          "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063644f872f1161008c578063b289551111610066578063b289551114610229578063baa097eb1461023c578063c455643b1461024f578063f988491d1461026257600080fd5b8063644f872f146101be5780636e81d53d146101e95780637ae485c91461020957600080fd5b806338511650116100c8578063385116501461013f57806339113166146101525780634edc689d14610165578063585af311146101ab57600080fd5b806302e3dff6146100ef57806305daf59014610117578063162276a91461012c575b600080fd5b6101026100fd366004611d4c565b610282565b60405190151581526020015b60405180910390f35b61012a610125366004611dfa565b61046e565b005b61012a61013a366004611dfa565b61060e565b61012a61014d366004611d9f565b61078c565b61012a610160366004611dfa565b61093c565b61012a610173366004611c9e565b3360009081526004602090815260408083206001600160a01b0395909516835293905291909120805460ff1916911515919091179055565b61012a6101b9366004611e5f565b610a62565b6101d16101cc366004611d0a565b610cc4565b6040516001600160401b03909116815260200161010e565b6101fc6101f7366004611bed565b610dbb565b60405161010e919061200a565b61021c610217366004611bed565b6111c5565b60405161010e9190611f99565b6101fc610237366004611cd8565b6114c6565b61021c61024a366004611cd8565b61177d565b61012a61025d366004611e15565b61192c565b610275610270366004611f36565b611a06565b60405161010e919061211b565b60008061028f868661177d565b905060005b815181101561045f578181815181106102bd57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160401b0316856001600160401b031611801561035b575081818151811061030457634e487b7160e01b600052603260045260246000fd5b60200260200101516040015182828151811061033057634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161034691906121b7565b6001600160401b0316856001600160401b0316105b1561036b57600092505050610466565b81818151811061038b57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160401b031684866103ac91906121b7565b6001600160401b031611801561043d57508181815181106103dd57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015182828151811061040957634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161041f91906121b7565b6001600160401b031661043285876121b7565b6001600160401b0316105b1561044d57600092505050610466565b8061045781612221565b915050610294565b5060019150505b949350505050565b3360009081526003602090815260408083206001600160401b038087168552925290912054908216106104bc5760405162461bcd60e51b81526004016104b3906120f4565b60405180910390fd5b6001600160401b0381165b3360009081526003602090815260408083206001600160401b03871684529091529020546104f7906001906121e2565b8110156105b3573360009081526003602090815260408083206001600160401b0387168452909152902061052c82600161219f565b8154811061054a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101543383526003825260408084206001600160401b0388168552909252912080548390811061059557634e487b7160e01b600052603260045260246000fd5b600091825260209091200155806105ab81612221565b9150506104c7565b503360009081526003602090815260408083206001600160401b038616845290915290208054806105f457634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590555050565b3360009081526001602090815260408083206001600160401b038087168552925290912054908216106106535760405162461bcd60e51b81526004016104b3906120f4565b6001600160401b0381165b3360009081526001602081815260408084206001600160401b03881685529091529091205461068d91906121e2565b81101561074b573360009081526001602081815260408084206001600160401b0388168552909152909120906106c490839061219f565b815481106106e257634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101543383526001825260408084206001600160401b0388168552909252912080548390811061072d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001558061074381612221565b91505061065e565b503360009081526001602090815260408083206001600160401b038616845290915290208054806105f457634e487b7160e01b600052603160045260246000fd5b6001600160a01b038516600090815260046020908152604080832033845290915290205460ff166107ff5760405162461bcd60e51b815260206004820152601860248201527f4e6f7420616c6c6f77656420746f20616464206576656e74000000000000000060448201526064016104b3565b610384826001600160401b0316101561085a5760405162461bcd60e51b815260206004820152601960248201527f4475726174696f6e20746f6f20736d616c6c203e20393030730000000000000060448201526064016104b3565b604080516060810182529182526001600160401b0393841660208084019182529385168383019081526000805460018181018355828052955160029091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56381019190915592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564909301805492518816600160401b026001600160801b031990931693881693909317919091179091556001600160a01b03909616865281835280862094909316855292815290832083548154938401825590845292200155565b3360009081526003602090815260408083206001600160401b038087168552925290912054908216106109815760405162461bcd60e51b81526004016104b3906120f4565b3360009081526003602090815260408083206001600160401b03808716855292528220805460029285169081106109c857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154815481106109f157634e487b7160e01b600052603260045260246000fd5b600091825260208083206004600590930201918201805460018181018355918552919093200180546001600160a01b03191633179055600281015491810154909250610a539185916001600160401b0380831692600160401b9004169061192c565b610a5d838361046e565b505050565b604080516000808252610100820183523360208084019182529383018681526001600160401b0389811660608601908152898216608087019081528c831660a0880190815260c088018a815260e08901899052600280546001810182559852865160059098027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace810180546001600160a01b03909a166001600160a01b0319909a1699909917895595517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf87015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad086018054935192518616600160801b0267ffffffffffffffff60801b19938716600160401b026001600160801b0319909516929096169190911792909217169290921790915551805194959294859493610bd1937f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad101920190611b40565b5060c08201518051610bed916004840191602090910190611b40565b50505060005b8351811015610c7f5760036000858381518110610c2057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0316825281810192909252604090810160009081206001600160401b038c1682528352908120600254815460018101835591835292909120015580610c7781612221565b915050610bf3565b50503360009081526003602090815260408083206001600160401b03909916835297815296812060025481546001810183559183529790912001959095555050505050565b600080610cd1858561177d565b90506000805b8251811015610daf57846001600160401b031682848381518110610d0b57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151610d2191906121f9565b6001600160401b031610610d3957509150610db49050565b828181518110610d5957634e487b7160e01b600052603260045260246000fd5b602002602001015160400151838281518110610d8557634e487b7160e01b600052603260045260246000fd5b602002602001015160200151610d9b91906121b7565b915080610da781612221565b915050610cd7565b509150505b9392505050565b60606000805b8351811015610e52576001600160a01b03851660009081526003602052604081208551909190869084908110610e0757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b031681526020019081526020016000208054905082610e3e919061219f565b915080610e4a81612221565b915050610dc1565b50600080826001600160401b03811115610e7c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ee557816020015b6040805160e081018252600080825260208083018290529282018190526060808301829052608083019190915260a0820181905260c08201528252600019909201910181610e9a5790505b50905060005b85518110156111b95760005b6001600160a01b03881660009081526003602052604081208851909190899085908110610f3457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b0316815260200190815260200160002080549050816001600160401b031610156111a6576001600160a01b03881660009081526003602052604081208851600292600192918b9087908110610fb157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b03168152602001908152602001600020836001600160401b03168154811061100157634e487b7160e01b600052603260045260246000fd5b906000526020600020015461101691906121e2565b8154811061103457634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160e081018252600590930290910180546001600160a01b0316835260018101548385015260028101546001600160401b0380821685850152600160401b820481166060860152600160801b9091041660808401526003810180548351818702810187019094528084529394919360a0860193928301828280156110ef57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110d1575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561115157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611133575b50505050508152505083858151811061117a57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250838061119090612221565b945050808061119e9061223c565b915050610ef7565b50806111b181612221565b915050610eeb565b50925050505b92915050565b60606000805b835181101561125c576001600160a01b0385166000908152600160205260408120855190919086908490811061121157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b031681526020019081526020016000208054905082611248919061219f565b91508061125481612221565b9150506111cb565b50600080826001600160401b0381111561128657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112d157816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816112a45790505b50905060005b85518110156111b95760005b6001600160a01b0388166000908152600160205260408120885190919089908590811061132057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b0316815260200190815260200160002080549050816001600160401b031610156114b3576001600160a01b03881660009081526001602081905260408220895183908b908790811061139a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b03168152602001908152602001600020836001600160401b0316815481106113ea57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546113ff91906121e2565b8154811061141d57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051606081018252600290930290910180548352600101546001600160401b0380821694840194909452600160401b900490921691810191909152835184908690811061148757634e487b7160e01b600052603260045260246000fd5b6020026020010181905250838061149d90612221565b94505080806114ab9061223c565b9150506112e3565b50806114be81612221565b9150506112d7565b6001600160a01b03821660009081526003602090815260408083206001600160401b03808616855292528220546060929181111561151457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561157d57816020015b6040805160e081018252600080825260208083018290529282018190526060808301829052608083019190915260a0820181905260c082015282526000199092019101816115325790505b50905060005b8151811015611775576001600160a01b03851660009081526003602090815260408083206001600160401b038816845290915290208054600291600191849081106115de57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546115f391906121e2565b8154811061161157634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160e081018252600590930290910180546001600160a01b0316835260018101548385015260028101546001600160401b0380821685850152600160401b820481166060860152600160801b9091041660808401526003810180548351818702810187019094528084529394919360a0860193928301828280156116cc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116ae575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561172e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611710575b50505050508152505082828151811061175757634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061176d90612221565b915050611583565b509392505050565b6001600160a01b03821660009081526001602090815260408083206001600160401b0380861685529252822054606092918111156117cb57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561181657816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816117e95790505b50905060005b8151811015611775576001600160a01b03851660009081526001602081815260408084206001600160401b0389168552909152822080548490811061187157634e487b7160e01b600052603260045260246000fd5b906000526020600020015461188691906121e2565b815481106118a457634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051606081018252600290930290910180548352600101546001600160401b0380821694840194909452600160401b900490921691810191909152825183908390811061190e57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061192490612221565b91505061181c565b604080516060810182529182526001600160401b0393841660208084019182529385168383019081526000805460018181018355828052955160029091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56381019190915592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564909301805492518816600160401b026001600160801b03199093169388169390931791909117909155338152828452818120959094168452938252928220825481549485018255908352912090910155565b6040805160608101825260008082526020808301829052828401829052338252600181528382206001600160401b038a811684529152929020549091861610611a615760405162461bcd60e51b81526004016104b3906120f4565b3360009081526001602090815260408083206001600160401b03808b16855292528220805483928916908110611aa757634e487b7160e01b600052603260045260246000fd5b906000526020600020015481548110611ad057634e487b7160e01b600052603260045260246000fd5b6000918252602091829020600291909102016001810180546001600160401b039889166001600160801b031990911617600160401b978916880217908190559085905560408051606081018252958652818816928601929092529490940490941692820192909252949350505050565b828054828255906000526020600020908101928215611b95579160200282015b82811115611b9557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611b60565b50611ba1929150611ba5565b5090565b5b80821115611ba15760008155600101611ba6565b80356001600160a01b0381168114611bd157600080fd5b919050565b80356001600160401b0381168114611bd157600080fd5b60008060408385031215611bff578182fd5b611c0883611bba565b91506020808401356001600160401b03811115611c23578283fd5b8401601f81018613611c33578283fd5b8035611c46611c418261217c565b61214c565b80828252848201915084840189868560051b8701011115611c65578687fd5b8694505b83851015611c8e57611c7a81611bd6565b835260019490940193918501918501611c69565b5080955050505050509250929050565b60008060408385031215611cb0578182fd5b611cb983611bba565b915060208301358015158114611ccd578182fd5b809150509250929050565b60008060408385031215611cea578182fd5b611cf383611bba565b9150611d0160208401611bd6565b90509250929050565b600080600060608486031215611d1e578081fd5b611d2784611bba565b9250611d3560208501611bd6565b9150611d4360408501611bd6565b90509250925092565b60008060008060808587031215611d61578081fd5b611d6a85611bba565b9350611d7860208601611bd6565b9250611d8660408601611bd6565b9150611d9460608601611bd6565b905092959194509250565b600080600080600060a08688031215611db6578081fd5b611dbf86611bba565b9450611dcd60208701611bd6565b9350611ddb60408701611bd6565b9250611de960608701611bd6565b949793965091946080013592915050565b60008060408385031215611e0c578182fd5b611cf383611bd6565b60008060008060808587031215611e2a578384fd5b611e3385611bd6565b9350611e4160208601611bd6565b9250611e4f60408601611bd6565b9396929550929360600135925050565b600080600080600060a08688031215611e76578081fd5b611e7f86611bd6565b94506020611e8e818801611bd6565b9450611e9c60408801611bd6565b93506060870135925060808701356001600160401b03811115611ebd578283fd5b8701601f81018913611ecd578283fd5b8035611edb611c418261217c565b8082825284820191508484018c868560051b8701011115611efa578687fd5b8694505b83851015611f2357611f0f81611bba565b835260019490940193918501918501611efe565b5080955050505050509295509295909350565b600080600080600060a08688031215611f4d578283fd5b611dbf86611bd6565b6000815180845260208085019450808401835b83811015611f8e5781516001600160a01b031687529582019590820190600101611f69565b509495945050505050565b6020808252825182820181905260009190848201906040850190845b81811015611ffe57611feb838551805182526020808201516001600160401b039081169184019190915260409182015116910152565b9284019260609290920191600101611fb5565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b870101848801865b838110156120e657888303603f19018552815180516001600160a01b031684528781015188850152868101516001600160401b03168785015260608082015160e09190612087828801826001600160401b03169052565b50506080828101516001600160401b03169086015260a0808301518187018390526120b483880182611f56565b9250505060c080830151925085820381870152506120d28183611f56565b968901969450505090860190600101612030565b509098975050505050505050565b6020808252600d908201526c092dcecc2d8d2c840d2dcc8caf609b1b604082015260600190565b606081016111bf8284805182526020808201516001600160401b039081169184019190915260409182015116910152565b604051601f8201601f191681016001600160401b038111828210171561217457612174612279565b604052919050565b60006001600160401b0382111561219557612195612279565b5060051b60200190565b600082198211156121b2576121b2612263565b500190565b60006001600160401b038083168185168083038211156121d9576121d9612263565b01949350505050565b6000828210156121f4576121f4612263565b500390565b60006001600160401b038381169083168181101561221957612219612263565b039392505050565b600060001982141561223557612235612263565b5060010190565b60006001600160401b038083168181141561225957612259612263565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220013d8d0b81d1b3c2b7ae1c80b07ee57997da2b1b4117798c568bf0d88134a9b164736f6c63430008040033",
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          },
          "storageLayout": {
            "storage": [
              {
                "astId": 29,
                "contract": "contracts/Calendar.sol:Calendar",
                "label": "_events",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_struct(Event)8_storage)dyn_storage"
              },
              {
                "astId": 36,
                "contract": "contracts/Calendar.sol:Calendar",
                "label": "_userEvents",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_mapping(t_uint64,t_array(t_uint256)dyn_storage))"
              },
              {
                "astId": 40,
                "contract": "contracts/Calendar.sol:Calendar",
                "label": "_invites",
                "offset": 0,
                "slot": "2",
                "type": "t_array(t_struct(Invite)25_storage)dyn_storage"
              },
              {
                "astId": 47,
                "contract": "contracts/Calendar.sol:Calendar",
                "label": "_userInvites",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_mapping(t_uint64,t_array(t_uint256)dyn_storage))"
              },
              {
                "astId": 53,
                "contract": "contracts/Calendar.sol:Calendar",
                "label": "_userAllowList",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
              },
              "t_array(t_struct(Event)8_storage)dyn_storage": {
                "base": "t_struct(Event)8_storage",
                "encoding": "dynamic_array",
                "label": "struct Calendar.Event[]",
                "numberOfBytes": "32"
              },
              "t_array(t_struct(Invite)25_storage)dyn_storage": {
                "base": "t_struct(Invite)25_storage",
                "encoding": "dynamic_array",
                "label": "struct Calendar.Invite[]",
                "numberOfBytes": "32"
              },
              "t_array(t_uint256)dyn_storage": {
                "base": "t_uint256",
                "encoding": "dynamic_array",
                "label": "uint256[]",
                "numberOfBytes": "32"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              },
              "t_mapping(t_address,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
              },
              "t_mapping(t_address,t_mapping(t_uint64,t_array(t_uint256)dyn_storage))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint64 => uint256[]))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint64,t_array(t_uint256)dyn_storage)"
              },
              "t_mapping(t_uint64,t_array(t_uint256)dyn_storage)": {
                "encoding": "mapping",
                "key": "t_uint64",
                "label": "mapping(uint64 => uint256[])",
                "numberOfBytes": "32",
                "value": "t_array(t_uint256)dyn_storage"
              },
              "t_struct(Event)8_storage": {
                "encoding": "inplace",
                "label": "struct Calendar.Event",
                "members": [
                  {
                    "astId": 3,
                    "contract": "contracts/Calendar.sol:Calendar",
                    "label": "location",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 5,
                    "contract": "contracts/Calendar.sol:Calendar",
                    "label": "time",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint64"
                  },
                  {
                    "astId": 7,
                    "contract": "contracts/Calendar.sol:Calendar",
                    "label": "duration",
                    "offset": 8,
                    "slot": "1",
                    "type": "t_uint64"
                  }
                ],
                "numberOfBytes": "64"
              },
              "t_struct(Invite)25_storage": {
                "encoding": "inplace",
                "label": "struct Calendar.Invite",
                "members": [
                  {
                    "astId": 10,
                    "contract": "contracts/Calendar.sol:Calendar",
                    "label": "creator",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_address"
                  },
                  {
                    "astId": 12,
                    "contract": "contracts/Calendar.sol:Calendar",
                    "label": "location",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 14,
                    "contract": "contracts/Calendar.sol:Calendar",
                    "label": "time",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_uint64"
                  },
                  {
                    "astId": 16,
                    "contract": "contracts/Calendar.sol:Calendar",
                    "label": "duration",
                    "offset": 8,
                    "slot": "2",
                    "type": "t_uint64"
                  },
                  {
                    "astId": 18,
                    "contract": "contracts/Calendar.sol:Calendar",
                    "label": "date",
                    "offset": 16,
                    "slot": "2",
                    "type": "t_uint64"
                  },
                  {
                    "astId": 21,
                    "contract": "contracts/Calendar.sol:Calendar",
                    "label": "participants",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_array(t_address)dyn_storage"
                  },
                  {
                    "astId": 24,
                    "contract": "contracts/Calendar.sol:Calendar",
                    "label": "accepted",
                    "offset": 0,
                    "slot": "4",
                    "type": "t_array(t_address)dyn_storage"
                  }
                ],
                "numberOfBytes": "160"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              },
              "t_uint64": {
                "encoding": "inplace",
                "label": "uint64",
                "numberOfBytes": "8"
              }
            }
          }
        },
        "Scheduler": {
          "address": "0x4e713E4DdF939CABB6abe53D7783EB3c0AB6AFFc",
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "feesCollected",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "fundsBalance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "fundsTransfer",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                }
              ],
              "name": "getEventsByDate",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "sender",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Scheduler.Event[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint64[]",
                  "name": "_dates",
                  "type": "uint64[]"
                }
              ],
              "name": "getEventsByDates",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "sender",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "location",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint64",
                      "name": "time",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Scheduler.Event[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "getFee",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                }
              ],
              "name": "getFreeSlot",
              "outputs": [
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                }
              ],
              "name": "getPriceForEvent",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "getUser",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "isAway",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint64",
                      "name": "startTime",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "endTime",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Scheduler.User",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                }
              ],
              "name": "isOwnerAvailable",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "release",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_index",
                  "type": "uint64"
                }
              ],
              "name": "removeEventByIndex",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_date",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_duration",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "_swarmLocation",
                  "type": "bytes32"
                }
              ],
              "name": "scheduleEvent",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "schedulerFee",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bool",
                  "name": "_away",
                  "type": "bool"
                }
              ],
              "name": "setAway",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "allow",
                  "type": "bool"
                }
              ],
              "name": "setBlockAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "newFee",
                  "type": "uint256"
                }
              ],
              "name": "setFee",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_paymentPerS",
                  "type": "uint256"
                }
              ],
              "name": "setPayment",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint64",
                  "name": "_startTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_endTime",
                  "type": "uint64"
                }
              ],
              "name": "setStartEndTime",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "transactionHash": "0xd44aa38b46f65c0e907a969e6743c3f6f32055defbbdee0eb63043861c47dd93",
          "receipt": {
            "to": null,
            "from": "0xd27ffA0e47Fca8D3E757B4d2C408169859B8c419",
            "contractAddress": "0x4e713E4DdF939CABB6abe53D7783EB3c0AB6AFFc",
            "transactionIndex": 29,
            "gasUsed": "1821357",
            "logsBloom": "0x
            "blockHash": "0xc3048959fb8dd4a6fdc2a1e9bf9bace06f67367cd85753a940ba48869e4bd71e",
            "transactionHash": "0xd44aa38b46f65c0e907a969e6743c3f6f32055defbbdee0eb63043861c47dd93",
            "logs": [
              {
                "transactionIndex": 29,
                "blockNumber": 3470156,
                "transactionHash": "0xd44aa38b46f65c0e907a969e6743c3f6f32055defbbdee0eb63043861c47dd93",
                "address": "0x4e713E4DdF939CABB6abe53D7783EB3c0AB6AFFc",
                "topics": [
                  "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                  "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "0x000000000000000000000000d27ffa0e47fca8d3e757b4d2c408169859b8c419"
                ],
                "data": "0x",
                "logIndex": 47,
                "blockHash": "0xc3048959fb8dd4a6fdc2a1e9bf9bace06f67367cd85753a940ba48869e4bd71e"
              }
            ],
            "blockNumber": 3470156,
            "cumulativeGasUsed": "8375663",
            "status": 1,
            "byzantium": true
          },
          "args": [],
          "numDeployments": 1,
          "solcInputHash": "34108367d9c4da059aa36eb779d34930",
          "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"feesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"}],\"name\":\"getEventsByDate\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"internalType\":\"struct Scheduler.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_dates\",\"type\":\"uint64[]\"}],\"name\":\"getEventsByDates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"internalType\":\"struct Scheduler.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"getFreeSlot\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"getPriceForEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAway\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"internalType\":\"struct Scheduler.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"isOwnerAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_index\",\"type\":\"uint64\"}],\"name\":\"removeEventByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_date\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_swarmLocation\",\"type\":\"bytes32\"}],\"name\":\"scheduleEvent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedulerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_away\",\"type\":\"bool\"}],\"name\":\"setAway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setBlockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentPerS\",\"type\":\"uint256\"}],\"name\":\"setPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_endTime\",\"type\":\"uint64\"}],\"name\":\"setStartEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Scheduler.sol\":\"Scheduler\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Scheduler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// written by @tfius \\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n/*\\r\\n Expected JSON format for event\\r\\n   [{\\r\\n        \\\"eventName\\\": \\\"string\\\",\\r\\n        \\\"description\\\": \\\"string\\\",\\r\\n        \\\"category\\\": \\\"string\\\",\\r\\n        \\\"location\\\": \\\"string\\\",\\r\\n        \\\"participants\\\": [\\\"string\\\"],\\r\\n        \\\"date\\\": \\\"uint64\\\",\\r\\n        \\\"duration\\\": \\\"uint64\\\",\\r\\n        \\\"time\\\": \\\"uint64\\\"\\r\\n    }]\\r\\n*/ \\r\\n\\r\\ncontract Scheduler is Ownable {\\r\\n    \\r\\n    struct Event {\\r\\n        address sender;\\r\\n        bytes32 location; // swarm location\\r\\n        uint64 time;\\r\\n        uint64 duration;       \\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        uint256 payment; // in wei per second\\r\\n        uint256 balance; // in wei\\r\\n        bool    isAway;\\r\\n\\r\\n        uint64  startTime; // 25200; // 7am\\r\\n        uint64    endTime; // 64800; // 6pm\\r\\n    }\\r\\n\\r\\n    uint256 public schedulerFee = 1000; // 1%\\r\\n    uint256 public feesCollected = 0;\\r\\n    uint256 private constant FEE_PRECISION = 1e5;\\r\\n\\r\\n    Event[] private _events;\\r\\n    mapping(address => User) users;\\r\\n    mapping(address => mapping(uint64 => uint256[])) private _userEvents; // user to date to event index\\r\\n    mapping(address => mapping(address => bool)) private _userBlockList;  // block list per address -> address -> bool\\r\\n\\r\\n    constructor() {\\r\\n    }\\r\\n    receive() external payable {}\\r\\n    function getFee(uint256 amount) public view returns (uint256) {\\r\\n        return (amount * schedulerFee) / FEE_PRECISION;\\r\\n    }\\r\\n    function setFee(uint256 newFee) onlyOwner public  {\\r\\n        schedulerFee = newFee; \\r\\n    }\\r\\n    function getUser(address _address) public view returns (User memory) {\\r\\n        return users[_address];\\r\\n    }\\r\\n\\r\\n    function setBlockAddress(address _address, bool allow) public {\\r\\n        _userBlockList[msg.sender][_address] = allow;\\r\\n    }\\r\\n    function setPayment(uint256 _paymentPerS) public {\\r\\n        users[msg.sender].payment = _paymentPerS;\\r\\n    }\\r\\n    function setAway(bool _away) public {\\r\\n        users[msg.sender].isAway = _away;\\r\\n    }\\r\\n    function setStartEndTime(uint64 _startTime, uint64 _endTime) public {\\r\\n        users[msg.sender].startTime = _startTime;\\r\\n        users[msg.sender].endTime = _endTime;\\r\\n    }\\r\\n    function getPriceForEvent(address _address, uint64 _duration) public view returns (uint256) {\\r\\n        return _duration * users[_address].payment;\\r\\n    }\\r\\n\\r\\n    function addEvent(address _address, uint64 _date, uint64 _time, uint64 _duration, bytes32 _swarmLocation) private {\\r\\n        Event memory e = Event(msg.sender, _swarmLocation, _time, _duration);\\r\\n        _events.push(e);\\r\\n        _userEvents[_address][_date].push(_events.length);\\r\\n    }\\r\\n\\r\\n    function scheduleEvent(address _address, uint64 _date, uint64 _time, uint64 _duration, bytes32 _swarmLocation) public payable {\\r\\n        require(_userBlockList[_address][msg.sender]==false, \\\"Not allowed to add event\\\");\\r\\n        //require(_duration >= 900 && <= 3600, \\\"Duration >15 <60 min\\\");\\r\\n        require(users[_address].isAway==false, \\\"User is away\\\");\\r\\n\\r\\n        uint256 _end = _time + _duration;\\r\\n        require(_end <= 86400, \\\"Event must start / end same day\\\");\\r\\n\\r\\n        if(users[_address].startTime != 0 && users[_address].endTime != 0)\\r\\n           require(_time >= users[_address].startTime && _time + _duration <= users[_address].endTime, \\\"Event not between start/end\\\");\\r\\n\\r\\n        uint256 paymentAmount = _duration * users[_address].payment;\\r\\n        require(msg.value >= paymentAmount, \\\"Insufficient payment\\\");\\r\\n\\r\\n        require(isOwnerAvailable(_address, _date, _time, _duration), \\\"Not available\\\");\\r\\n\\r\\n        addEvent(_address, _date, _time, _duration, _swarmLocation);\\r\\n\\r\\n        if(paymentAmount > 0)\\r\\n        {\\r\\n            uint256 fee = getFee(paymentAmount);\\r\\n            uint256 payout = paymentAmount-fee;\\r\\n            feesCollected += fee;\\r\\n            users[_address].balance += payout;\\r\\n            payable(msg.sender).transfer(payout);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* 1. We require that the index is less than the length of the array. Otherwise we will get an out-of-bounds error.\\r\\n       2. We loop over the array and shift the elements to the left. We start from the index that we want to remove and end at the second-to-last element.\\r\\n       3. We then use the pop function to remove the last element of the array.\\r\\n    */\\r\\n    function removeEventByIndex(uint64 _date, uint64 _index) public  {\\r\\n        require(_index < _userEvents[msg.sender][_date].length, \\\"Invalid index\\\");\\r\\n        \\r\\n        for (uint i = _index; i < _userEvents[msg.sender][_date].length - 1; i++) {\\r\\n            _userEvents[msg.sender][_date][i] =_userEvents[msg.sender][_date][i+1];\\r\\n        }\\r\\n        _userEvents[msg.sender][_date].pop();\\r\\n    }\\r\\n\\r\\n    /*  1. The first line creates an array of type Event and sets it's size to the length of the array of event IDs for the user and date passed in.\\r\\n        2. The for loop iterates through the array of event IDs and sets the array of events to the actual event data.\\r\\n        3. The function then returns the array of events. */\\r\\n    function getEventsByDate(address owner, uint64 _date) public view returns (Event[] memory) {\\r\\n        Event[] memory events = new Event[](_userEvents[owner][_date].length);\\r\\n        for (uint256 i=0; i < events.length; i++) {\\r\\n            events[i] = _events[_userEvents[owner][_date][i]-1];\\r\\n        }\\r\\n        return events;\\r\\n    }\\r\\n\\r\\n    /*  1. _dates is an array of timestamps\\r\\n        2. We get the length of the array and loop through it\\r\\n        3. For each date we get the length of the events array and we add it to a variable called totalLength\\r\\n        4. We initialize the c variable to 0\\r\\n        5. We initialize an array of events with the length of totalLength\\r\\n        6. We loop through the _dates array again\\r\\n        7. For each date we loop through the array of events for that date\\r\\n        8. We set the events array at index c to the event at index j\\r\\n        9. We increment c by 1\\r\\n        10. We return the events array */\\r\\n    function getEventsByDates(address owner, uint64[] memory _dates) public view returns (Event[] memory) {\\r\\n        uint totalLength = 0;\\r\\n        for(uint i = 0; i < _dates.length; i++) {\\r\\n            totalLength += _userEvents[owner][_dates[i]].length;\\r\\n        }\\r\\n        uint c = 0;\\r\\n        Event[] memory events = new Event[](totalLength);\\r\\n        for(uint i = 0; i < _dates.length; i++) {\\r\\n            for (uint64 j=0; j < _userEvents[owner][_dates[i]].length; j++) {\\r\\n                events[c] = _events[_userEvents[owner][_dates[i]][j]-1];\\r\\n                c++;\\r\\n            }\\r\\n        }\\r\\n        return events;\\r\\n    }\\r\\n\\r\\n    function isOwnerAvailable(address _address, uint64 _date, uint64 _time, uint64 _duration) public view returns (bool) {\\r\\n        Event[] memory events = getEventsByDate(_address, _date);\\r\\n        for (uint256 i=0; i < events.length; i++) {\\r\\n            if(users[_address].startTime != 0 && users[_address].endTime != 0)\\r\\n            {\\r\\n                if(users[_address].startTime > _time && users[_address].endTime < _time + _duration) {\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n            // find if event is inside or overlaps another event\\r\\n            if(_time > events[i].time && _time < events[i].time + events[i].duration) { // start time inside event\\r\\n                return false;\\r\\n            }\\r\\n            if(_time + _duration > events[i].time && _time + _duration < events[i].time + events[i].duration) { // start time inside event\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getFreeSlot(address _address, uint64 _date, uint64 _duration) public view returns (uint64) {\\r\\n        Event[] memory events = getEventsByDate(_address, _date);\\r\\n        uint64 time = 0;\\r\\n        for (uint256 i=0; i < events.length; i++) {\\r\\n            if (events[i].time - time >= _duration) {\\r\\n                return time;\\r\\n            }\\r\\n            time = events[i].time + events[i].duration;\\r\\n        }\\r\\n        return time;\\r\\n    }\\r\\n\\r\\n    function fundsBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }    \\r\\n    function fundsTransfer() onlyOwner public payable {\\r\\n        payable(msg.sender).transfer((address(this).balance));\\r\\n    }\\r\\n    function release(address token, uint amount) public virtual {\\r\\n        SafeERC20.safeTransfer(IERC20(token), owner(), amount);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4a348c72808085695307153579644b6e68180177778568eece480c69aa56b323\",\"license\":\"MIT\"}},\"version\":1}",
          "bytecode": "0x60806040526103e8600155600060025534801561001b57600080fd5b506100253361002a565b61007a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611f16806100896000396000f3fe6080604052600436106101395760003560e01c80637ae485c9116100ab578063bad055081161006f578063bad05508146104da578063c64070ea146104ed578063ce9bfc9c1461050d578063f071db5a1461054b578063f2fde38b14610561578063fcee45f41461058157600080fd5b80637ae485c9146104325780638da5cb5b1461045f5780639454932c14610487578063b6c33170146104a4578063baa097eb146104ba57600080fd5b80635bca217a116100fd5780635bca217a146101f1578063644f872f1461026d57806366fbcdb1146102a557806369fe0e2d146102f85780636f77926b14610318578063715018a61461041d57600080fd5b806302e3dff6146101455780630357371d1461017a578063162276a91461019c5780632fffa196146101bc578063567556a4146101e957600080fd5b3661014057005b600080fd5b34801561015157600080fd5b50610165610160366004611b5d565b6105a1565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061019a610195366004611ac0565b610878565b005b3480156101a857600080fd5b5061019a6101b7366004611c5b565b610898565b3480156101c857600080fd5b5061019a6101d7366004611c43565b33600090815260046020526040902055565b61019a610a54565b3480156101fd57600080fd5b5061019a61020c366004611c5b565b336000908152600460205260409020600201805470ffffffffffffffffffffffffffffffff0019166101006001600160401b039485160270ffffffffffffffff000000000000000000191617600160481b9290931691909102919091179055565b34801561027957600080fd5b5061028d610288366004611b1b565b610aad565b6040516001600160401b039091168152602001610171565b3480156102b157600080fd5b5061019a6102c0366004611a8a565b3360009081526006602090815260408083206001600160a01b0395909516835293905291909120805460ff1916911515919091179055565b34801561030457600080fd5b5061019a610313366004611c43565b610ba4565b34801561032457600080fd5b506103ca610333366004611997565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b0316600090815260046020908152604091829020825160a081018452815481526001820154928101929092526002015460ff81161515928201929092526001600160401b03610100830481166060830152600160481b909204909116608082015290565b6040516101719190600060a082019050825182526020830151602083015260408301511515604083015260608301516001600160401b038082166060850152806080860151166080850152505092915050565b34801561042957600080fd5b5061019a610bd3565b34801561043e57600080fd5b5061045261044d3660046119b1565b610c09565b6040516101719190611c92565b34801561046b57600080fd5b506000546040516001600160a01b039091168152602001610171565b34801561049357600080fd5b50475b604051908152602001610171565b3480156104b057600080fd5b5061049660015481565b3480156104c657600080fd5b506104526104d5366004611ae9565b610f33565b61019a6104e8366004611bb0565b61110c565b3480156104f957600080fd5b50610496610508366004611ae9565b6115f8565b34801561051957600080fd5b5061019a610528366004611c0b565b336000908152600460205260409020600201805460ff1916911515919091179055565b34801561055757600080fd5b5061049660025481565b34801561056d57600080fd5b5061019a61057c366004611997565b611624565b34801561058d57600080fd5b5061049661059c366004611c43565b6116bc565b6000806105ae8686610f33565b905060005b8151811015610869576001600160a01b03871660009081526004602052604090206002015461010090046001600160401b03161580159061061e57506001600160a01b038716600090815260046020526040902060020154600160481b90046001600160401b031615155b156106a7576001600160a01b0387166000908152600460205260409020600201546001600160401b038087166101009092041611801561069757506106638486611d8b565b6001600160a01b0388166000908152600460205260409020600201546001600160401b03918216600160481b909104909116105b156106a757600092505050610870565b8181815181106106c757634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516001600160401b0316856001600160401b0316118015610765575081818151811061070e57634e487b7160e01b600052603260045260246000fd5b60200260200101516060015182828151811061073a57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516107509190611d8b565b6001600160401b0316856001600160401b0316105b1561077557600092505050610870565b81818151811061079557634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516001600160401b031684866107b69190611d8b565b6001600160401b031611801561084757508181815181106107e757634e487b7160e01b600052603260045260246000fd5b60200260200101516060015182828151811061081357634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516108299190611d8b565b6001600160401b031661083c8587611d8b565b6001600160401b0316105b1561085757600092505050610870565b8061086181611e64565b9150506105b3565b5060019150505b949350505050565b6108948261088e6000546001600160a01b031690565b836116e0565b5050565b3360009081526005602090815260408083206001600160401b038087168552925290912054908216106109025760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064015b60405180910390fd5b6001600160401b0381165b3360009081526005602090815260408083206001600160401b038716845290915290205461093d90600190611df5565b8110156109f9573360009081526005602090815260408083206001600160401b03871684529091529020610972826001611d73565b8154811061099057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101543383526005825260408084206001600160401b038816855290925291208054839081106109db57634e487b7160e01b600052603260045260246000fd5b600091825260209091200155806109f181611e64565b91505061090d565b503360009081526005602090815260408083206001600160401b03861684529091529020805480610a3a57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590555050565b6000546001600160a01b03163314610a7e5760405162461bcd60e51b81526004016108f990611d3e565b60405133904780156108fc02916000818181858888f19350505050158015610aaa573d6000803e3d6000fd5b50565b600080610aba8585610f33565b90506000805b8251811015610b9857846001600160401b031682848381518110610af457634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610b0a9190611e0c565b6001600160401b031610610b2257509150610b9d9050565b828181518110610b4257634e487b7160e01b600052603260045260246000fd5b602002602001015160600151838281518110610b6e57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610b849190611d8b565b915080610b9081611e64565b915050610ac0565b509150505b9392505050565b6000546001600160a01b03163314610bce5760405162461bcd60e51b81526004016108f990611d3e565b600155565b6000546001600160a01b03163314610bfd5760405162461bcd60e51b81526004016108f990611d3e565b610c076000611737565b565b60606000805b8351811015610ca0576001600160a01b03851660009081526005602052604081208551909190869084908110610c5557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b031681526020019081526020016000208054905082610c8c9190611d73565b915080610c9881611e64565b915050610c0f565b50600080826001600160401b03811115610cca57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d1c57816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610ce85790505b50905060005b8551811015610f295760005b6001600160a01b03881660009081526005602052604081208851909190899085908110610d6b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b0316815260200190815260200160002080549050816001600160401b03161015610f16576001600160a01b03881660009081526005602052604081208851600392600192918b9087908110610de857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b03168152602001908152602001600020836001600160401b031681548110610e3857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154610e4d9190611df5565b81548110610e6b57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081018252600390930290910180546001600160a01b031683526001810154938301939093526002909201546001600160401b0380821693830193909352600160401b900490911660608201528351849086908110610eea57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508380610f0090611e64565b9450508080610f0e90611e7f565b915050610d2e565b5080610f2181611e64565b915050610d22565b5095945050505050565b6001600160a01b03821660009081526005602090815260408083206001600160401b038086168552925282205460609291811115610f8157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fd357816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610f9f5790505b50905060005b8151811015611104576001600160a01b03851660009081526005602090815260408083206001600160401b0388168452909152902080546003916001918490811061103457634e487b7160e01b600052603260045260246000fd5b90600052602060002001546110499190611df5565b8154811061106757634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081018252600390930290910180546001600160a01b031683526001810154938301939093526002909201546001600160401b0380821693830193909352600160401b9004909116606082015282518390839081106110e657634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806110fc90611e64565b915050610fd9565b509392505050565b6001600160a01b038516600090815260066020908152604080832033845290915290205460ff16156111805760405162461bcd60e51b815260206004820152601860248201527f4e6f7420616c6c6f77656420746f20616464206576656e74000000000000000060448201526064016108f9565b6001600160a01b03851660009081526004602052604090206002015460ff16156111db5760405162461bcd60e51b815260206004820152600c60248201526b55736572206973206177617960a01b60448201526064016108f9565b60006111e78385611d8b565b6001600160401b03169050620151808111156112455760405162461bcd60e51b815260206004820152601f60248201527f4576656e74206d757374207374617274202f20656e642073616d65206461790060448201526064016108f9565b6001600160a01b03861660009081526004602052604090206002015461010090046001600160401b0316158015906112a757506001600160a01b038616600090815260046020526040902060020154600160481b90046001600160401b031615155b15611372576001600160a01b0386166000908152600460205260409020600201546001600160401b0361010090910481169085161080159061132657506001600160a01b038616600090815260046020526040902060020154600160481b90046001600160401b031661131a8486611d8b565b6001600160401b031611155b6113725760405162461bcd60e51b815260206004820152601b60248201527f4576656e74206e6f74206265747765656e2073746172742f656e64000000000060448201526064016108f9565b6001600160a01b03861660009081526004602052604081205461139e906001600160401b038616611dd6565b9050803410156113e75760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016108f9565b6113f3878787876105a1565b61142f5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420617661696c61626c6560981b60448201526064016108f9565b6040805160808101825233815260208082018681526001600160401b03898116848601908152898216606086019081526003805460018082018355600083815298519183027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810180546001600160a01b039485166001600160a01b031990911617905596517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c88015593517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d909601805493518616600160401b026fffffffffffffffffffffffffffffffff1990941696861696909617929092179094558d16855260058452858520918c16855290835293832090548154948501825590835291209091015580156115ef576000611567826116bc565b905060006115758284611df5565b905081600260008282546115899190611d73565b90915550506001600160a01b038916600090815260046020526040812060010180548392906115b9908490611d73565b9091555050604051339082156108fc029083906000818181858888f193505050501580156115eb573d6000803e3d6000fd5b5050505b50505050505050565b6001600160a01b038216600090815260046020526040812054610b9d906001600160401b038416611dd6565b6000546001600160a01b0316331461164e5760405162461bcd60e51b81526004016108f990611d3e565b6001600160a01b0381166116b35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108f9565b610aaa81611737565b6000620186a0600154836116d09190611dd6565b6116da9190611db6565b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611732908490611787565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006117dc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118599092919063ffffffff16565b80519091501561173257808060200190518101906117fa9190611c27565b6117325760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108f9565b6060610870848460008585843b6118b25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108f9565b600080866001600160a01b031685876040516118ce9190611c76565b60006040518083038185875af1925050503d806000811461190b576040519150601f19603f3d011682016040523d82523d6000602084013e611910565b606091505b509150915061192082828661192b565b979650505050505050565b6060831561193a575081610b9d565b82511561194a5782518084602001fd5b8160405162461bcd60e51b81526004016108f99190611d0b565b80356001600160a01b038116811461197b57600080fd5b919050565b80356001600160401b038116811461197b57600080fd5b6000602082840312156119a8578081fd5b610b9d82611964565b600080604083850312156119c3578081fd5b6119cc83611964565b91506020808401356001600160401b03808211156119e8578384fd5b818601915086601f8301126119fb578384fd5b813581811115611a0d57611a0d611ebc565b8060051b604051601f19603f83011681018181108582111715611a3257611a32611ebc565b604052828152858101935084860182860187018b1015611a50578788fd5b8795505b83861015611a7957611a6581611980565b855260019590950194938601938601611a54565b508096505050505050509250929050565b60008060408385031215611a9c578182fd5b611aa583611964565b91506020830135611ab581611ed2565b809150509250929050565b60008060408385031215611ad2578182fd5b611adb83611964565b946020939093013593505050565b60008060408385031215611afb578182fd5b611b0483611964565b9150611b1260208401611980565b90509250929050565b600080600060608486031215611b2f578081fd5b611b3884611964565b9250611b4660208501611980565b9150611b5460408501611980565b90509250925092565b60008060008060808587031215611b72578081fd5b611b7b85611964565b9350611b8960208601611980565b9250611b9760408601611980565b9150611ba560608601611980565b905092959194509250565b600080600080600060a08688031215611bc7578081fd5b611bd086611964565b9450611bde60208701611980565b9350611bec60408701611980565b9250611bfa60608701611980565b949793965091946080013592915050565b600060208284031215611c1c578081fd5b8135610b9d81611ed2565b600060208284031215611c38578081fd5b8151610b9d81611ed2565b600060208284031215611c54578081fd5b5035919050565b60008060408385031215611c6d578182fd5b611b0483611980565b60008251611c88818460208701611e34565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b82811015611cfe57815180516001600160a01b031685528681015187860152858101516001600160401b0390811687870152606091820151169085015260809093019290850190600101611caf565b5091979650505050505050565b6020815260008251806020840152611d2a816040850160208701611e34565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611d8657611d86611ea6565b500190565b60006001600160401b03808316818516808303821115611dad57611dad611ea6565b01949350505050565b600082611dd157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611df057611df0611ea6565b500290565b600082821015611e0757611e07611ea6565b500390565b60006001600160401b0383811690831681811015611e2c57611e2c611ea6565b039392505050565b60005b83811015611e4f578181015183820152602001611e37565b83811115611e5e576000848401525b50505050565b6000600019821415611e7857611e78611ea6565b5060010190565b60006001600160401b0380831681811415611e9c57611e9c611ea6565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610aaa57600080fdfea2646970667358221220677f6ad2c6d0ea52011319f60d5d6d04f5f2bc7889951ab3ea972c484f85460664736f6c63430008040033",
          "deployedBytecode": "0x6080604052600436106101395760003560e01c80637ae485c9116100ab578063bad055081161006f578063bad05508146104da578063c64070ea146104ed578063ce9bfc9c1461050d578063f071db5a1461054b578063f2fde38b14610561578063fcee45f41461058157600080fd5b80637ae485c9146104325780638da5cb5b1461045f5780639454932c14610487578063b6c33170146104a4578063baa097eb146104ba57600080fd5b80635bca217a116100fd5780635bca217a146101f1578063644f872f1461026d57806366fbcdb1146102a557806369fe0e2d146102f85780636f77926b14610318578063715018a61461041d57600080fd5b806302e3dff6146101455780630357371d1461017a578063162276a91461019c5780632fffa196146101bc578063567556a4146101e957600080fd5b3661014057005b600080fd5b34801561015157600080fd5b50610165610160366004611b5d565b6105a1565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061019a610195366004611ac0565b610878565b005b3480156101a857600080fd5b5061019a6101b7366004611c5b565b610898565b3480156101c857600080fd5b5061019a6101d7366004611c43565b33600090815260046020526040902055565b61019a610a54565b3480156101fd57600080fd5b5061019a61020c366004611c5b565b336000908152600460205260409020600201805470ffffffffffffffffffffffffffffffff0019166101006001600160401b039485160270ffffffffffffffff000000000000000000191617600160481b9290931691909102919091179055565b34801561027957600080fd5b5061028d610288366004611b1b565b610aad565b6040516001600160401b039091168152602001610171565b3480156102b157600080fd5b5061019a6102c0366004611a8a565b3360009081526006602090815260408083206001600160a01b0395909516835293905291909120805460ff1916911515919091179055565b34801561030457600080fd5b5061019a610313366004611c43565b610ba4565b34801561032457600080fd5b506103ca610333366004611997565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b0316600090815260046020908152604091829020825160a081018452815481526001820154928101929092526002015460ff81161515928201929092526001600160401b03610100830481166060830152600160481b909204909116608082015290565b6040516101719190600060a082019050825182526020830151602083015260408301511515604083015260608301516001600160401b038082166060850152806080860151166080850152505092915050565b34801561042957600080fd5b5061019a610bd3565b34801561043e57600080fd5b5061045261044d3660046119b1565b610c09565b6040516101719190611c92565b34801561046b57600080fd5b506000546040516001600160a01b039091168152602001610171565b34801561049357600080fd5b50475b604051908152602001610171565b3480156104b057600080fd5b5061049660015481565b3480156104c657600080fd5b506104526104d5366004611ae9565b610f33565b61019a6104e8366004611bb0565b61110c565b3480156104f957600080fd5b50610496610508366004611ae9565b6115f8565b34801561051957600080fd5b5061019a610528366004611c0b565b336000908152600460205260409020600201805460ff1916911515919091179055565b34801561055757600080fd5b5061049660025481565b34801561056d57600080fd5b5061019a61057c366004611997565b611624565b34801561058d57600080fd5b5061049661059c366004611c43565b6116bc565b6000806105ae8686610f33565b905060005b8151811015610869576001600160a01b03871660009081526004602052604090206002015461010090046001600160401b03161580159061061e57506001600160a01b038716600090815260046020526040902060020154600160481b90046001600160401b031615155b156106a7576001600160a01b0387166000908152600460205260409020600201546001600160401b038087166101009092041611801561069757506106638486611d8b565b6001600160a01b0388166000908152600460205260409020600201546001600160401b03918216600160481b909104909116105b156106a757600092505050610870565b8181815181106106c757634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516001600160401b0316856001600160401b0316118015610765575081818151811061070e57634e487b7160e01b600052603260045260246000fd5b60200260200101516060015182828151811061073a57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516107509190611d8b565b6001600160401b0316856001600160401b0316105b1561077557600092505050610870565b81818151811061079557634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516001600160401b031684866107b69190611d8b565b6001600160401b031611801561084757508181815181106107e757634e487b7160e01b600052603260045260246000fd5b60200260200101516060015182828151811061081357634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516108299190611d8b565b6001600160401b031661083c8587611d8b565b6001600160401b0316105b1561085757600092505050610870565b8061086181611e64565b9150506105b3565b5060019150505b949350505050565b6108948261088e6000546001600160a01b031690565b836116e0565b5050565b3360009081526005602090815260408083206001600160401b038087168552925290912054908216106109025760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064015b60405180910390fd5b6001600160401b0381165b3360009081526005602090815260408083206001600160401b038716845290915290205461093d90600190611df5565b8110156109f9573360009081526005602090815260408083206001600160401b03871684529091529020610972826001611d73565b8154811061099057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101543383526005825260408084206001600160401b038816855290925291208054839081106109db57634e487b7160e01b600052603260045260246000fd5b600091825260209091200155806109f181611e64565b91505061090d565b503360009081526005602090815260408083206001600160401b03861684529091529020805480610a3a57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590555050565b6000546001600160a01b03163314610a7e5760405162461bcd60e51b81526004016108f990611d3e565b60405133904780156108fc02916000818181858888f19350505050158015610aaa573d6000803e3d6000fd5b50565b600080610aba8585610f33565b90506000805b8251811015610b9857846001600160401b031682848381518110610af457634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610b0a9190611e0c565b6001600160401b031610610b2257509150610b9d9050565b828181518110610b4257634e487b7160e01b600052603260045260246000fd5b602002602001015160600151838281518110610b6e57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610b849190611d8b565b915080610b9081611e64565b915050610ac0565b509150505b9392505050565b6000546001600160a01b03163314610bce5760405162461bcd60e51b81526004016108f990611d3e565b600155565b6000546001600160a01b03163314610bfd5760405162461bcd60e51b81526004016108f990611d3e565b610c076000611737565b565b60606000805b8351811015610ca0576001600160a01b03851660009081526005602052604081208551909190869084908110610c5557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b031681526020019081526020016000208054905082610c8c9190611d73565b915080610c9881611e64565b915050610c0f565b50600080826001600160401b03811115610cca57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d1c57816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610ce85790505b50905060005b8551811015610f295760005b6001600160a01b03881660009081526005602052604081208851909190899085908110610d6b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b0316815260200190815260200160002080549050816001600160401b03161015610f16576001600160a01b03881660009081526005602052604081208851600392600192918b9087908110610de857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160401b03166001600160401b03168152602001908152602001600020836001600160401b031681548110610e3857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154610e4d9190611df5565b81548110610e6b57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081018252600390930290910180546001600160a01b031683526001810154938301939093526002909201546001600160401b0380821693830193909352600160401b900490911660608201528351849086908110610eea57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508380610f0090611e64565b9450508080610f0e90611e7f565b915050610d2e565b5080610f2181611e64565b915050610d22565b5095945050505050565b6001600160a01b03821660009081526005602090815260408083206001600160401b038086168552925282205460609291811115610f8157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fd357816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610f9f5790505b50905060005b8151811015611104576001600160a01b03851660009081526005602090815260408083206001600160401b0388168452909152902080546003916001918490811061103457634e487b7160e01b600052603260045260246000fd5b90600052602060002001546110499190611df5565b8154811061106757634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081018252600390930290910180546001600160a01b031683526001810154938301939093526002909201546001600160401b0380821693830193909352600160401b9004909116606082015282518390839081106110e657634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806110fc90611e64565b915050610fd9565b509392505050565b6001600160a01b038516600090815260066020908152604080832033845290915290205460ff16156111805760405162461bcd60e51b815260206004820152601860248201527f4e6f7420616c6c6f77656420746f20616464206576656e74000000000000000060448201526064016108f9565b6001600160a01b03851660009081526004602052604090206002015460ff16156111db5760405162461bcd60e51b815260206004820152600c60248201526b55736572206973206177617960a01b60448201526064016108f9565b60006111e78385611d8b565b6001600160401b03169050620151808111156112455760405162461bcd60e51b815260206004820152601f60248201527f4576656e74206d757374207374617274202f20656e642073616d65206461790060448201526064016108f9565b6001600160a01b03861660009081526004602052604090206002015461010090046001600160401b0316158015906112a757506001600160a01b038616600090815260046020526040902060020154600160481b90046001600160401b031615155b15611372576001600160a01b0386166000908152600460205260409020600201546001600160401b0361010090910481169085161080159061132657506001600160a01b038616600090815260046020526040902060020154600160481b90046001600160401b031661131a8486611d8b565b6001600160401b031611155b6113725760405162461bcd60e51b815260206004820152601b60248201527f4576656e74206e6f74206265747765656e2073746172742f656e64000000000060448201526064016108f9565b6001600160a01b03861660009081526004602052604081205461139e906001600160401b038616611dd6565b9050803410156113e75760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016108f9565b6113f3878787876105a1565b61142f5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420617661696c61626c6560981b60448201526064016108f9565b6040805160808101825233815260208082018681526001600160401b03898116848601908152898216606086019081526003805460018082018355600083815298519183027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810180546001600160a01b039485166001600160a01b031990911617905596517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c88015593517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d909601805493518616600160401b026fffffffffffffffffffffffffffffffff1990941696861696909617929092179094558d16855260058452858520918c16855290835293832090548154948501825590835291209091015580156115ef576000611567826116bc565b905060006115758284611df5565b905081600260008282546115899190611d73565b90915550506001600160a01b038916600090815260046020526040812060010180548392906115b9908490611d73565b9091555050604051339082156108fc029083906000818181858888f193505050501580156115eb573d6000803e3d6000fd5b5050505b50505050505050565b6001600160a01b038216600090815260046020526040812054610b9d906001600160401b038416611dd6565b6000546001600160a01b0316331461164e5760405162461bcd60e51b81526004016108f990611d3e565b6001600160a01b0381166116b35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108f9565b610aaa81611737565b6000620186a0600154836116d09190611dd6565b6116da9190611db6565b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611732908490611787565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006117dc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118599092919063ffffffff16565b80519091501561173257808060200190518101906117fa9190611c27565b6117325760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108f9565b6060610870848460008585843b6118b25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108f9565b600080866001600160a01b031685876040516118ce9190611c76565b60006040518083038185875af1925050503d806000811461190b576040519150601f19603f3d011682016040523d82523d6000602084013e611910565b606091505b509150915061192082828661192b565b979650505050505050565b6060831561193a575081610b9d565b82511561194a5782518084602001fd5b8160405162461bcd60e51b81526004016108f99190611d0b565b80356001600160a01b038116811461197b57600080fd5b919050565b80356001600160401b038116811461197b57600080fd5b6000602082840312156119a8578081fd5b610b9d82611964565b600080604083850312156119c3578081fd5b6119cc83611964565b91506020808401356001600160401b03808211156119e8578384fd5b818601915086601f8301126119fb578384fd5b813581811115611a0d57611a0d611ebc565b8060051b604051601f19603f83011681018181108582111715611a3257611a32611ebc565b604052828152858101935084860182860187018b1015611a50578788fd5b8795505b83861015611a7957611a6581611980565b855260019590950194938601938601611a54565b508096505050505050509250929050565b60008060408385031215611a9c578182fd5b611aa583611964565b91506020830135611ab581611ed2565b809150509250929050565b60008060408385031215611ad2578182fd5b611adb83611964565b946020939093013593505050565b60008060408385031215611afb578182fd5b611b0483611964565b9150611b1260208401611980565b90509250929050565b600080600060608486031215611b2f578081fd5b611b3884611964565b9250611b4660208501611980565b9150611b5460408501611980565b90509250925092565b60008060008060808587031215611b72578081fd5b611b7b85611964565b9350611b8960208601611980565b9250611b9760408601611980565b9150611ba560608601611980565b905092959194509250565b600080600080600060a08688031215611bc7578081fd5b611bd086611964565b9450611bde60208701611980565b9350611bec60408701611980565b9250611bfa60608701611980565b949793965091946080013592915050565b600060208284031215611c1c578081fd5b8135610b9d81611ed2565b600060208284031215611c38578081fd5b8151610b9d81611ed2565b600060208284031215611c54578081fd5b5035919050565b60008060408385031215611c6d578182fd5b611b0483611980565b60008251611c88818460208701611e34565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b82811015611cfe57815180516001600160a01b031685528681015187860152858101516001600160401b0390811687870152606091820151169085015260809093019290850190600101611caf565b5091979650505050505050565b6020815260008251806020840152611d2a816040850160208701611e34565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611d8657611d86611ea6565b500190565b60006001600160401b03808316818516808303821115611dad57611dad611ea6565b01949350505050565b600082611dd157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611df057611df0611ea6565b500290565b600082821015611e0757611e07611ea6565b500390565b60006001600160401b0383811690831681811015611e2c57611e2c611ea6565b039392505050565b60005b83811015611e4f578181015183820152602001611e37565b83811115611e5e576000848401525b50505050565b6000600019821415611e7857611e78611ea6565b5060010190565b60006001600160401b0380831681811415611e9c57611e9c611ea6565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610aaa57600080fdfea2646970667358221220677f6ad2c6d0ea52011319f60d5d6d04f5f2bc7889951ab3ea972c484f85460664736f6c63430008040033",
          "devdoc": {
            "kind": "dev",
            "methods": {
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          },
          "storageLayout": {
            "storage": [
              {
                "astId": 389,
                "contract": "contracts/Scheduler.sol:Scheduler",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 3321,
                "contract": "contracts/Scheduler.sol:Scheduler",
                "label": "schedulerFee",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 3324,
                "contract": "contracts/Scheduler.sol:Scheduler",
                "label": "feesCollected",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 3331,
                "contract": "contracts/Scheduler.sol:Scheduler",
                "label": "_events",
                "offset": 0,
                "slot": "3",
                "type": "t_array(t_struct(Event)3307_storage)dyn_storage"
              },
              {
                "astId": 3336,
                "contract": "contracts/Scheduler.sol:Scheduler",
                "label": "users",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_address,t_struct(User)3318_storage)"
              },
              {
                "astId": 3343,
                "contract": "contracts/Scheduler.sol:Scheduler",
                "label": "_userEvents",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_mapping(t_uint64,t_array(t_uint256)dyn_storage))"
              },
              {
                "astId": 3349,
                "contract": "contracts/Scheduler.sol:Scheduler",
                "label": "_userBlockList",
                "offset": 0,
                "slot": "6",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_struct(Event)3307_storage)dyn_storage": {
                "base": "t_struct(Event)3307_storage",
                "encoding": "dynamic_array",
                "label": "struct Scheduler.Event[]",
                "numberOfBytes": "32"
              },
              "t_array(t_uint256)dyn_storage": {
                "base": "t_uint256",
                "encoding": "dynamic_array",
                "label": "uint256[]",
                "numberOfBytes": "32"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              },
              "t_mapping(t_address,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
              },
              "t_mapping(t_address,t_mapping(t_uint64,t_array(t_uint256)dyn_storage))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint64 => uint256[]))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint64,t_array(t_uint256)dyn_storage)"
              },
              "t_mapping(t_address,t_struct(User)3318_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct Scheduler.User)",
                "numberOfBytes": "32",
                "value": "t_struct(User)3318_storage"
              },
              "t_mapping(t_uint64,t_array(t_uint256)dyn_storage)": {
                "encoding": "mapping",
                "key": "t_uint64",
                "label": "mapping(uint64 => uint256[])",
                "numberOfBytes": "32",
                "value": "t_array(t_uint256)dyn_storage"
              },
              "t_struct(Event)3307_storage": {
                "encoding": "inplace",
                "label": "struct Scheduler.Event",
                "members": [
                  {
                    "astId": 3300,
                    "contract": "contracts/Scheduler.sol:Scheduler",
                    "label": "sender",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_address"
                  },
                  {
                    "astId": 3302,
                    "contract": "contracts/Scheduler.sol:Scheduler",
                    "label": "location",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 3304,
                    "contract": "contracts/Scheduler.sol:Scheduler",
                    "label": "time",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_uint64"
                  },
                  {
                    "astId": 3306,
                    "contract": "contracts/Scheduler.sol:Scheduler",
                    "label": "duration",
                    "offset": 8,
                    "slot": "2",
                    "type": "t_uint64"
                  }
                ],
                "numberOfBytes": "96"
              },
              "t_struct(User)3318_storage": {
                "encoding": "inplace",
                "label": "struct Scheduler.User",
                "members": [
                  {
                    "astId": 3309,
                    "contract": "contracts/Scheduler.sol:Scheduler",
                    "label": "payment",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 3311,
                    "contract": "contracts/Scheduler.sol:Scheduler",
                    "label": "balance",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 3313,
                    "contract": "contracts/Scheduler.sol:Scheduler",
                    "label": "isAway",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_bool"
                  },
                  {
                    "astId": 3315,
                    "contract": "contracts/Scheduler.sol:Scheduler",
                    "label": "startTime",
                    "offset": 1,
                    "slot": "2",
                    "type": "t_uint64"
                  },
                  {
                    "astId": 3317,
                    "contract": "contracts/Scheduler.sol:Scheduler",
                    "label": "endTime",
                    "offset": 9,
                    "slot": "2",
                    "type": "t_uint64"
                  }
                ],
                "numberOfBytes": "96"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              },
              "t_uint64": {
                "encoding": "inplace",
                "label": "uint64",
                "numberOfBytes": "8"
              }
            }
          }
        }
      }
    }
  }
}